[
    {
        "id": "cf02ad9c7e091fb3",
        "type": "tab",
        "label": "everHome2MQTT API (REST)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "882084c144462778",
        "type": "tab",
        "label": "everHome2MQTT API (Websocket)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "95278f532bb93da2",
        "type": "tab",
        "label": "everHome2MQTT Config",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7cbd671fa0ddc005",
        "type": "tab",
        "label": "everHome2MQTT Control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4c7024461c6c9a94",
        "type": "tab",
        "label": "everHome2MQTT States",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "89baccb132d06886",
        "type": "tab",
        "label": "everHome2MQTT Tools",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2a67f9b3b75f4816",
        "type": "subflow",
        "name": "Delay Motiondetector",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 320,
                "y": 200,
                "wires": [
                    {
                        "id": "e5901efb6221619f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 200,
                "wires": [
                    {
                        "id": "12d2c89ae0d58df4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1d388786f4cb0d39",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [
            {
                "x": 260,
                "y": 60,
                "wires": [
                    {
                        "id": "286561c968878f31"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 60,
                "wires": [
                    {
                        "id": "286561c968878f31",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "08030ae535e94d33",
        "type": "subflow",
        "name": "Request Ecotracker",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 140,
                "wires": [
                    {
                        "id": "0e9ec3f609ce7215"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1240,
                "y": 140,
                "wires": [
                    {
                        "id": "7fb21347cad2b4ef",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0f37da256ecf693a",
        "type": "subflow",
        "name": "Request Ecotracker (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "36bd34a3ae353f4c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 40,
                "wires": [
                    {
                        "id": "c8f08a42b73c44e2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "147d74e1a76a9fac",
        "type": "subflow",
        "name": "Request Ecotracker (3)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "400e92ae33e396aa"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 40,
                "wires": [
                    {
                        "id": "dda60fc3b4218c26",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "592abed23db1ce8d",
        "type": "subflow",
        "name": "Request Ecotracker (4)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "3b2c02e7aa418d33"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 40,
                "wires": [
                    {
                        "id": "8ee9569a023b4c97",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "6e5434adebb6a0c3",
        "type": "subflow",
        "name": "Request Ecotracker (5)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "80d3c4da6a7b249d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 40,
                "wires": [
                    {
                        "id": "552faa324f5336d5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "ae999fab3333ab46",
        "type": "subflow",
        "name": "Prepare Group Data",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 60,
                "wires": [
                    {
                        "id": "ad59265f9e512926"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1260,
                "y": 60,
                "wires": [
                    {
                        "id": "ade6a5cf30fa04b6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "12f23899f58e7385",
        "type": "subflow",
        "name": "Delay Motiondetector",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 320,
                "y": 200,
                "wires": [
                    {
                        "id": "421c55999a902dbf"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 200,
                "wires": [
                    {
                        "id": "d789ecd5078e3528",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "ee30fd7f1736160b",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [
            {
                "x": 260,
                "y": 60,
                "wires": [
                    {
                        "id": "03f0d0716579a2f9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 60,
                "wires": [
                    {
                        "id": "03f0d0716579a2f9",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "f0cb8267013ae146",
        "type": "subflow",
        "name": "Request Ecotracker",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 140,
                "wires": [
                    {
                        "id": "0d5d3027b713e940"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1240,
                "y": 140,
                "wires": [
                    {
                        "id": "b336fb155ec50412",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "15f6f72abf148ca1",
        "type": "subflow",
        "name": "Request Ecotracker (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "354b7a32b7323be7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 40,
                "wires": [
                    {
                        "id": "72be23b31e2519af",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "09a811f5aab51c4f",
        "type": "subflow",
        "name": "Request Ecotracker (3)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "18657d7374a24d16"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 40,
                "wires": [
                    {
                        "id": "ebcf49b3dec8a1a4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "8c67da6509104312",
        "type": "subflow",
        "name": "Request Ecotracker (2) (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "e379b4844bf8c5c4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 40,
                "wires": [
                    {
                        "id": "2fd696539dbdcc5f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f7478cbf8c5b3a5a",
        "type": "subflow",
        "name": "Request Ecotracker (4)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "338f95eafc9db208"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 40,
                "wires": [
                    {
                        "id": "9d7542b6b8d4aa7a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "6c976fce6ecbc4d5",
        "type": "subflow",
        "name": "Request Ecotracker (5)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "0f752f2fa34c413f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 40,
                "wires": [
                    {
                        "id": "6b623d0cb666579a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "998ea21aa8546658",
        "type": "subflow",
        "name": "Prepare Group Data",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 60,
                "wires": [
                    {
                        "id": "3cc761dbf7e5ff6c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1260,
                "y": 60,
                "wires": [
                    {
                        "id": "e5c0c55910e403a8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "515d7dc53c88348e",
        "type": "subflow",
        "name": "Request Ecotracker (2) (3)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 40,
                "wires": [
                    {
                        "id": "9ec1180e9db51a39"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 40,
                "wires": [
                    {
                        "id": "f38d69d205410f7a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "523ad0dd6fd4a780",
        "type": "group",
        "z": "cf02ad9c7e091fb3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "13b5156f1cdba658",
            "c4d8dcc2c7889573",
            "6323ad5943a4a538",
            "36d70bfe397ec698",
            "a1abd9b783de3a99",
            "1162d0539431a93a",
            "de72a50521fb415e",
            "0c02ba2c513add9d",
            "1e0796d8e5cd68e4",
            "951449e6169ec919",
            "4b6f7edcc6414f85",
            "2fdc460f34229a36",
            "d01a83e2f270f12e",
            "82aa2dc3f3889e67",
            "1e4a35d08639b358",
            "57bf8fdb5b3a50b8",
            "b43ae4d54053f3bb",
            "acb64e29354b9928",
            "7d6a5e28d09ab625"
        ],
        "x": 54,
        "y": 1599,
        "w": 1522,
        "h": 542
    },
    {
        "id": "efea786323ebcbac",
        "type": "group",
        "z": "cf02ad9c7e091fb3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e02295f64a2c9029",
            "7b40798b72bdb20e",
            "8c6ad13090ef2da3",
            "861ed2f6aaa6aa75",
            "7a69df272c1dd0bb",
            "b4622b2ab077c11f",
            "8023b8eb245702ba",
            "a4a99283e864ee6d",
            "f1467554a02ac615",
            "c48a2a38a107d973",
            "1480899ffd47901b",
            "1799d4477a50f3fe",
            "4258efe53ed8d019",
            "10445f5b24b04d9d",
            "f4627a01d246653f",
            "f979137ad08b5745",
            "1983d617fc5113d8",
            "fe08da3e7093e838",
            "ae3beeec5aa607cf",
            "97313cbe6e36e2fd",
            "60d5001a4aa999ac",
            "e34ce1c4ca23f6a8",
            "d7aad541baeb73aa",
            "edad0a7c981c024c",
            "4737b8f3facbdff9",
            "1f370df7dded8d0d",
            "eb59a6655b4c0b30",
            "c0f541b9f5a5e0df",
            "fe9833dbbdadf349",
            "afa7590f7a5eee98",
            "325cb81e1547f3a6",
            "f07ba875c965c51c",
            "d0789705000c11aa",
            "342314729ff35403",
            "d04a2eea4aaf4f4e",
            "1e16984fcddff6e3",
            "793e3443707a4160",
            "bf867abc47d31e25",
            "6fb4bb42b70dcb73",
            "ea43ba0a08935eb3",
            "d49769c6a79c5c96",
            "1b605a836740b894",
            "a1861f3938782cd2",
            "b089ce80eead2b08",
            "56536bc20d42155c",
            "3ec81652c5faeea1",
            "593f3d1b2213a2b3",
            "1c645c33763fab40",
            "9306234cda912d58",
            "df36c817baf4123d",
            "bd51bdc18c6b80c6",
            "65bd60ba01a0277f",
            "2ac1db1ca066ba7a",
            "97aa4a96423da545",
            "bb5ddb07bdf0b155",
            "800f163431dd79b4",
            "20f8aaeba6690ac5",
            "757ff4850050a702",
            "d3e7197d8fafcc05",
            "0812757ef641465c",
            "c63f7420338ed62d",
            "229268c16cb00c83",
            "c9841c25ab3c24fd",
            "3223bc5da99bcbed",
            "7a3ad09392484477",
            "ff9195da3bfd38dc",
            "85fd09512cf3486c",
            "fd8e1a4f45b7705c",
            "ae940d48f0775e5a",
            "d62f64f7503865b2",
            "9fefe8e3edd4c70c",
            "8e544892bb2bc628",
            "c7b37b53485f900c",
            "83e0939569fa4e94",
            "ed283429a698138f",
            "b761942c5c363566",
            "fe1fa53e84cc285b",
            "2662322312b0e379",
            "b6b1e9b8fc37bd5f",
            "fdc5088bc12c56a7",
            "53e18d77df572801",
            "046850a87a658ff4",
            "f6a3fb8528998ec2",
            "cc76ee9e2b84b5d9",
            "88660bd4c74eb21b"
        ],
        "x": 54,
        "y": 59,
        "w": 2072,
        "h": 1502
    },
    {
        "id": "12555d2026f2b1f7",
        "type": "group",
        "z": "95278f532bb93da2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0b35e34144c32612",
            "d0dc83969b8c14b4",
            "70a5be8ee1988fb7",
            "294ebad6e293b090",
            "07ccf8bc620e2eb5",
            "ff3bd0b279e1459b",
            "5999576fec1bf251",
            "098dd18a510b4a34",
            "4c666029cb05a518",
            "1ea03c0fdb17c030",
            "3fe7f96c15ee6699",
            "1962364b9fa3a2db",
            "2fe36f04f8969a4d",
            "2c9e7c2c2e2a0e16",
            "0487a6ea15b08097"
        ],
        "x": 54,
        "y": 59,
        "w": 2292,
        "h": 342
    },
    {
        "id": "ebad0b280b30e495",
        "type": "group",
        "z": "7cbd671fa0ddc005",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "af34c99b9832290b",
            "96cf4afb238f9a2a",
            "0179892b815aa565",
            "c74d84ace096bbab",
            "0af17e3e0a40fcef",
            "a3ea0b2a99f1cfbe",
            "fab294fcd252736a",
            "8d764efedf71d953",
            "4bc8da691a0969c3",
            "497ca1deab9c9ed2",
            "125cd9e02a40321c",
            "b42d1a0fa27d3d13",
            "d6e37092529d6a44",
            "503466892b317314",
            "9bd343a04e678770",
            "0556ba10c4453dd8",
            "3ebed5969e5255fb",
            "58dfceae4a681e65",
            "ddc1255baf4bfa15",
            "1308aed5422ca167"
        ],
        "x": 54,
        "y": 1379,
        "w": 1832,
        "h": 282
    },
    {
        "id": "8b4dd73313215ef8",
        "type": "group",
        "z": "7cbd671fa0ddc005",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0d5be596b5af6ddd",
            "4dfbf75f2b2cdb03",
            "5554f8103b1b3745",
            "99ce772ef0594ea8",
            "15a26c577514f92d",
            "c2e0edcd58416128",
            "0d3df798c1178832",
            "8afe0e15e3936c4d",
            "5b391f292ab49989",
            "a367026312ac88fd",
            "cb3fe56a8ae3e3d9",
            "97aee404750bc0aa",
            "4fcd3f4dca28e450",
            "4fd098eb3e166066",
            "c8d8dbc33e50a7ca",
            "6c146c47d3e7dd94",
            "11aa817591621cc2",
            "dab55c07e59576d7",
            "7acf82ade1e1f7ae",
            "0244ba8c5b7a47a2",
            "2e011f241d948e79",
            "1b256dad245d72bb",
            "5a765987fba18a3f",
            "a3cbc925029fbaa3",
            "fcf1cb60453c993c",
            "88d596965dab338c",
            "c107e2fda3ca5ad8",
            "21765dfa746c591a",
            "379f5d9060a1d5ab",
            "4cf0fc56afb84bfa",
            "be17a2cf7f626295",
            "3547aa46ead492f0",
            "f2e23ac8d5180e61",
            "1c7faf0784dd7ec1",
            "a4f0e09e31ead929",
            "2643a13c4533c11d",
            "7e00c34979521e58",
            "78b722f5706dfd3c",
            "63a94e73774c35a7",
            "93a429c6fbbb38fd",
            "16cc9db9be3f2a26",
            "8a0ef43c94c2af46",
            "9c1f2d8fece8e2f3",
            "2538fcbbcb4b2f30",
            "ed71b7168fe7ff86",
            "a785786d812c0dad"
        ],
        "x": 54,
        "y": 59,
        "w": 1832,
        "h": 1242
    },
    {
        "id": "99da6a943348bdde",
        "type": "group",
        "z": "89baccb132d06886",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "02e1ef894ae6c347",
            "e1f993108f070de6",
            "e3e64ee723aca3b9",
            "a7a5014a666aa256",
            "d27d299cd19db7f9",
            "908d4e610af16134",
            "e05ed0ad2eae10f5"
        ],
        "x": 54,
        "y": 739,
        "w": 1632,
        "h": 142
    },
    {
        "id": "33099db6c61473d5",
        "type": "group",
        "z": "89baccb132d06886",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d22801476e848b8a",
            "6561b508ea6aa881",
            "2b9760d334ff917f",
            "5454944e985365da",
            "cb1a0bc1291872c6",
            "5832aa27919f386c",
            "4e91f8c4603163bc"
        ],
        "x": 54,
        "y": 519,
        "w": 1632,
        "h": 182
    },
    {
        "id": "314444591f1337f2",
        "type": "group",
        "z": "89baccb132d06886",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "54b7ea2311990f4a",
            "319c1cee37533531",
            "3d4f0b7e95afb7fc",
            "ad23556f82d88e06",
            "96d24e2df27b51f5"
        ],
        "x": 54,
        "y": 339,
        "w": 1632,
        "h": 142
    },
    {
        "id": "29f16be80f76bbe6",
        "type": "group",
        "z": "89baccb132d06886",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d9ef5b38f1979e91",
            "0a39217260b00d6b",
            "efe45a26fe0d2c64",
            "3dd9a5685f80ef1d",
            "066a327e85353e97",
            "88184648a85ff4dc",
            "88227f1e3a6ad2bb",
            "677ee05d0edb2561",
            "7a6e91afc6002279",
            "14044e685c1fb612"
        ],
        "x": 54,
        "y": 59,
        "w": 1632,
        "h": 242
    },
    {
        "id": "7d973e37df0bd660",
        "type": "group",
        "z": "4c7024461c6c9a94",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4b0a212b187b0ee9",
            "dc084ae1d854e27c",
            "4ec9c9400663101b",
            "4895fc16c8841550",
            "3fc93b54ac53c6cf",
            "1a5132f781ec336a",
            "6ae929175e3a3478"
        ],
        "x": 54,
        "y": 479,
        "w": 1572,
        "h": 202
    },
    {
        "id": "df29c22a0843c619",
        "type": "group",
        "z": "4c7024461c6c9a94",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "128e660181a019aa",
            "b956b37c82c745fd",
            "fa78747e59e0b8d7",
            "b8295f6e67de8018",
            "ca1d412fae75a739",
            "dc89a4dce7170cea",
            "abbb999142c8a34f",
            "6e93388140d8743b",
            "a65e35f9e5c93a02",
            "8df3eecaae2e5609",
            "066001260ae0d439",
            "052eb1f1bff5d854",
            "90dab40f588294ce",
            "bfcad80d008902a0",
            "22fa401bbd96b29a",
            "05f7ff12bc5bcdaa",
            "eb0a016416a34ae1",
            "25ca5fa6aef5a3d7",
            "78e7fb06a12f0647",
            "2b28cedea7e94870"
        ],
        "x": 54,
        "y": 59,
        "w": 1572,
        "h": 382
    },
    {
        "id": "7092612d54be0bf4",
        "type": "group",
        "z": "882084c144462778",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a6dfbbf3121bfa9b",
            "195b4e0a0a73475d",
            "9e710d4f5156be14",
            "b2ba17c385c9e312",
            "9665e366dbf07480",
            "0613c85297b00ff7",
            "b93506ed060e64d0",
            "b595bc23a32bd2af",
            "0a47e5012007759d",
            "80bcd5b0dbff6cb3",
            "4cc9d949e0831faa",
            "6003f7b19473dc92",
            "181fe872542ffe6a",
            "474f9d0eb283f99c",
            "7659297c38265b4e"
        ],
        "x": 54,
        "y": 839,
        "w": 2512,
        "h": 262
    },
    {
        "id": "714ee53a3861c61a",
        "type": "group",
        "z": "882084c144462778",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "32db9532c95c1fb0",
            "c83a54f4887aa514",
            "bd497c76fb3c9e75",
            "31fd627743ae487b",
            "f30a2e293187e4bd",
            "f951f65c0abf9db4",
            "cf271fa3f9c3a0d8",
            "54f3443f99f70a9c",
            "735a0d29df7e53a8",
            "77d396a6949cdb6f",
            "454e5d6f133ee857",
            "e4c41794e8715859",
            "7e9709686d1e6900",
            "d9d5b294029608cc",
            "a8eb0edc8ff85b20",
            "b3b32bd5417396de",
            "ba7dac02229b4902",
            "e358f8a5c7ae27d9",
            "18bf953f6b85c405",
            "3a270afb8239ea4d",
            "afb4d65d8a34588f",
            "b760852c3a6d424d",
            "71b8252730bcbbe7",
            "72ad765ee4e81754",
            "a76928d617a7c707",
            "9ebe344d466ba4a9",
            "34459320041cc080",
            "34b73d66f5be9796",
            "ca103ca3d9b006db",
            "b145726ea4117690",
            "782d5dea06df6e64",
            "966e50a0a7d74cb7",
            "247bad1427840fd6",
            "2063774a9b105040",
            "efa6d18633bd3ccd",
            "765a7487a8e19abf",
            "40efcc54acebdeba"
        ],
        "x": 54,
        "y": 59,
        "w": 2512,
        "h": 762
    },
    {
        "id": "4959409e2e6b91aa",
        "type": "group",
        "z": "4c7024461c6c9a94",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "64a6c14a5fdc7c67",
            "1b5e185424bca3be",
            "576e0e775026e472",
            "14893dc929383299",
            "c67107b2bea2b61b",
            "1bc000805434e814",
            "8bdd12d79db958cb",
            "33b1f6278c09c847",
            "cdacf6064bf598be",
            "46e3122e434f7247",
            "10602205a759a50c",
            "98a8d32025992a9f",
            "b1c4e17fb65ffa3f",
            "e28344a502208811",
            "1f6146b7bd3a1b34",
            "a2da5b944ed56eab",
            "a35cb952d1dec3e8",
            "dd5a2c9eda3535f4",
            "7cb46713d3bf6793",
            "152d089608d28a24",
            "2720ac14e98a345d",
            "993645cfe93cd094",
            "5b278a459a12ccf8",
            "57b6041eb001a980",
            "3034c55b53d1c37d",
            "b34cc710ee6d83e4",
            "a06670c99a80e426",
            "4aa4dce91ecbecff"
        ],
        "x": 54,
        "y": 719,
        "w": 1572,
        "h": 662
    },
    {
        "id": "bfb0edcd0febbe3e",
        "type": "group",
        "z": "4c7024461c6c9a94",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b6a225abcf696187",
            "39c75fad51eb482e",
            "2480f246336f4f3d",
            "29eebf99226b1b21",
            "996b829ffe4fdf19",
            "f76b29556d142bdb",
            "42df7241f3fd3d0f",
            "076935f96467b2c7",
            "7f0d015d64c1d532",
            "9c1930e358acba1b",
            "7641aaa20177d87c",
            "8502b8640b5d2af5",
            "bdcb145ad347384d",
            "90e5a490195a0609",
            "e0e7e5ba5ee98eb0",
            "9b08ecc37e0059fc",
            "6eb6e455079f25ae",
            "5e8def8103a3ab3f",
            "5595786919a3e4b5",
            "f0729a5cee4bb8bb",
            "803e584dbbb5efb4",
            "8c75bdc3c30c3336",
            "5b2c186f1063ab21",
            "55cf220d67e79297",
            "9b27b02732ad3f57",
            "260ed86cca47c42c",
            "5c02199f718d520d",
            "d866dddd17adcfd4",
            "807d841973018fb8",
            "485b263c46f3ef4c",
            "02fe33e605020999",
            "b7ba11fc80d400ba",
            "cb3708f3d2df69df",
            "59fae3a613178a6b",
            "96320e82e6feaced",
            "e978ec7564d2e93a",
            "b0acf82f76e764e5",
            "a0776c0c79cbc3c8",
            "61770934f35e7b7f",
            "d667eb0cc4673f59",
            "22e7b58ba0bc15dc",
            "9d67f7fa7734767a",
            "ae6de7d697172d30",
            "93bdfcd35b3dd9d4",
            "ba8fcde65b6c5b74",
            "667d2a270b70eb62",
            "c91905f470e8fe47",
            "a1c2eca6313258b5",
            "3cb99a7fcedd5fcc",
            "4c0c406f7cc74fe8",
            "9f0e7c22c031e6b0",
            "ac3e4c8bebde7fb2",
            "147a425c2e51f232",
            "ebdaf1719065aaba"
        ],
        "x": 54,
        "y": 1419,
        "w": 2212,
        "h": 1142
    },
    {
        "id": "b2f04ce1015743c7",
        "type": "group",
        "z": "95278f532bb93da2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9072efdb2c998ed8",
            "a9fe2d63f6699e90",
            "c48afe39ac37f91c",
            "4a300ee35db77eae",
            "88002726fa4516fa",
            "eed6e24a403e9bd7",
            "7389706a657683d0",
            "11cd37e7497d68a1",
            "d8509b92dc59f7c9",
            "8da9e83f729b52be",
            "7473bc201344071b",
            "5102d38dcb2e96f2",
            "fc9b14e873544f4d",
            "a2cba29cf0d005cb",
            "f5be34b9324b441a",
            "893ab7aca14f6f42",
            "985fe8b4415556d2",
            "c53bcdacaef85199",
            "a932c1be1b631683",
            "d875932dc662107b",
            "b88072ebfdb051ab",
            "9ac593ed81da1c65",
            "dac4e379d1c58c0f",
            "18e71865b8985772",
            "bae557adbb1ea41f",
            "3099deb5b4d2a9a5",
            "91f450526a3bd0ed",
            "ac28c9216e9323ee",
            "006281a7dc4ee7f4",
            "8076456f237ea430",
            "5d5ce2dbea88f157",
            "6fd289415d798d18",
            "69d864aab7e4f633",
            "1a0d3ba8b059037f",
            "13294fbd1cf1d90c",
            "26ae8609e9773ec3",
            "e846570c36ad4d23",
            "9680249a2bb20205",
            "86fd5f35c0588851",
            "aeb87f3ae70b534d",
            "d4f417bb8fb9b016",
            "92509327616b5dab",
            "03861f1917de04df",
            "431c3797993676b0",
            "5bf8c0d282840685",
            "6e90fe1ffb3f1b49",
            "d27786bd27e11b64",
            "34f5a994d6ce764c",
            "7e24c5c34fdd420a",
            "fd9d7d82a94f4276",
            "f4f4ec8d0481f7ce",
            "211a9284e3487795",
            "6955011acf40111c",
            "c3d6f0bb540b7bac",
            "17acee79616b0ac5",
            "9b26a60638ddc257",
            "bae1c73d625fbabc",
            "3cfb5b52c12a7162",
            "78e4f8f72d0a222b",
            "3d3385e7c58703a0",
            "7c4e5b59e42b2d9e",
            "11868f5defbb3ea5",
            "8d21578953d34c91",
            "eae3d70df44ab014",
            "f9bc7cbca77a0e7c"
        ],
        "x": 54,
        "y": 459,
        "w": 2292,
        "h": 2142
    },
    {
        "id": "3e61b13e9b5416f9",
        "type": "group",
        "z": "7cbd671fa0ddc005",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1bf1f44899b3619a",
            "65a32b1d5cf8b00f",
            "1cbcc803a1d1a826",
            "6a98eb05e3436cd0",
            "2035f8f023522ff6",
            "a9f46d4f34548d1d"
        ],
        "x": 54,
        "y": 1679,
        "w": 1032,
        "h": 222
    },
    {
        "id": "efb062bb1a7b2ea6",
        "type": "group",
        "z": "4c7024461c6c9a94",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "925645361fbf56a1",
            "cdd112e8570c6712",
            "3085874b272cf5f0",
            "389712dfddf9a7c0",
            "0e06acf8e5ede672",
            "40d81977fae4b9d7",
            "ee93397850e8d2c1",
            "1d6f05aaee4b7d81",
            "da7cb589a0d25390",
            "20e3408ebf990256",
            "2a646f8c2f29fdf8",
            "a1d36a21e07eb0bf",
            "a1e5af14f5b0a35f",
            "69b0ce969a6faba1",
            "4b1540ddad5b6e9a",
            "cbe9c4064b18d171"
        ],
        "x": 54,
        "y": 2599,
        "w": 1572,
        "h": 282
    },
    {
        "id": "11f89a4cc77d569b",
        "type": "group",
        "z": "4c7024461c6c9a94",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cfd6aa51252ed91a",
            "137717810da4ac61",
            "87fd9da7cef3c964",
            "db5fb16216980f93",
            "3674ca12408e492a",
            "4a4592ff06fce113",
            "b6742b90abc42646",
            "b90bacb4c839bf08"
        ],
        "x": 54,
        "y": 2919,
        "w": 972,
        "h": 222
    },
    {
        "id": "8502b8640b5d2af5",
        "type": "junction",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "x": 1680,
        "y": 1720,
        "wires": [
            [
                "29eebf99226b1b21"
            ]
        ]
    },
    {
        "id": "bdcb145ad347384d",
        "type": "junction",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "x": 1680,
        "y": 1480,
        "wires": [
            [
                "29eebf99226b1b21"
            ]
        ]
    },
    {
        "id": "90e5a490195a0609",
        "type": "junction",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "x": 1680,
        "y": 1540,
        "wires": [
            [
                "29eebf99226b1b21"
            ]
        ]
    },
    {
        "id": "6eb6e455079f25ae",
        "type": "junction",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "x": 1680,
        "y": 1960,
        "wires": [
            [
                "29eebf99226b1b21"
            ]
        ]
    },
    {
        "id": "807d841973018fb8",
        "type": "junction",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "x": 1680,
        "y": 2400,
        "wires": [
            [
                "29eebf99226b1b21"
            ]
        ]
    },
    {
        "id": "59fae3a613178a6b",
        "type": "junction",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "x": 1680,
        "y": 2200,
        "wires": [
            [
                "29eebf99226b1b21"
            ]
        ]
    },
    {
        "id": "b0acf82f76e764e5",
        "type": "junction",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "x": 1680,
        "y": 2020,
        "wires": [
            [
                "29eebf99226b1b21"
            ]
        ]
    },
    {
        "id": "61770934f35e7b7f",
        "type": "junction",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "x": 1680,
        "y": 2080,
        "wires": [
            [
                "29eebf99226b1b21"
            ]
        ]
    },
    {
        "id": "22e7b58ba0bc15dc",
        "type": "junction",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "x": 1680,
        "y": 2140,
        "wires": [
            [
                "29eebf99226b1b21"
            ]
        ]
    },
    {
        "id": "667d2a270b70eb62",
        "type": "junction",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "x": 1680,
        "y": 1860,
        "wires": [
            [
                "29eebf99226b1b21"
            ]
        ]
    },
    {
        "id": "ebdaf1719065aaba",
        "type": "junction",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "x": 1680,
        "y": 2260,
        "wires": [
            [
                "29eebf99226b1b21"
            ]
        ]
    },
    {
        "id": "32920df5.c1a102",
        "type": "server",
        "name": "Home Assistant",
        "addon": true
    },
    {
        "id": "010c8dcccc60a718",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "everhome/central/state_connected/mqtt",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "{\"value\":\"offline\"}",
        "closeMsg": {},
        "willTopic": "everhome/central/state_connected/mqtt",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "{\"value\":\"offline\"}",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "12d2c89ae0d58df4",
        "type": "trigger",
        "z": "2a67f9b3b75f4816",
        "name": "",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "1",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 640,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "e5901efb6221619f",
        "type": "function",
        "z": "2a67f9b3b75f4816",
        "name": "delay",
        "func": "msg.payload_origin = msg.payload;\nmsg.delay = msg.delay;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 200,
        "wires": [
            [
                "12d2c89ae0d58df4"
            ]
        ]
    },
    {
        "id": "286561c968878f31",
        "type": "trigger",
        "z": "1d388786f4cb0d39",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "3000",
        "extend": true,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 400,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "c257f17fadd2e941",
        "type": "function",
        "z": "08030ae535e94d33",
        "name": "Prepare Request",
        "func": "const configuration = global.get('configuration');\nconst port_node_red = configuration.ports.nodeRed;\n\nvar endpoint = \"v1/json\";\n\nlet element = msg.element;\n\n/* Only try to connect to the local API when EcoTracker is connected to the cloud. \n   This is to ensure that the local IP address has been synchronized correctly. */\nif (element.states.connected){\n    msg.instance_active = true;\n    const ip_address = element[\"ip-wifi\"];\n    let url = `http://${ip_address}/${endpoint}`;\n    const url_simulation = `http://${ip_address}:${port_node_red}/endpoint/${endpoint}`;\n\n    if (global.get(\"add_simu_devices\")) {\n        msg.url = url_simulation;\n    }else{\n        msg.url = url;\n    }\n    return msg;\n}    \n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 140,
        "wires": [
            [
                "bd001a6d85ebe586"
            ]
        ]
    },
    {
        "id": "bd001a6d85ebe586",
        "type": "http request",
        "z": "08030ae535e94d33",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 140,
        "wires": [
            [
                "3a2d3f294c170f7d",
                "7fb21347cad2b4ef"
            ]
        ]
    },
    {
        "id": "f9a03f5475f0ed8c",
        "type": "delay",
        "z": "08030ae535e94d33",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 320,
        "wires": [
            [
                "c257f17fadd2e941"
            ]
        ]
    },
    {
        "id": "3a2d3f294c170f7d",
        "type": "function",
        "z": "08030ae535e94d33",
        "name": "scan_interval",
        "func": "function getValueFromConfig(valuesArray, defaultValue, deviceId) {\n    for (let i = 0; i < valuesArray.length; i++) {\n        if (valuesArray[i].id === deviceId) {\n            return valuesArray[i].value;\n        }\n    }\n    return defaultValue;\n}\n\nconst FACTOR = 1000;\nconst configuration = global.get('configuration');\n\nlet valuesArray = configuration.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id;\nlet defaultValue = configuration.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.default_value;\nlet deviceId = msg.element.id;\n\nconst scan_interval = getValueFromConfig(valuesArray, defaultValue, deviceId);\n\nif (msg.statusCode !== 200) {\n    msg.delay = scan_interval * FACTOR * msg.counter;\n    msg.counter ++;\n    node.log(`Server Error: ${msg.url} - Status: ${msg.statusCode}. Next try in ${msg.delay / 1000} seconds`);\n}else{\n    msg.counter = 1;\n    msg.delay = scan_interval * FACTOR;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 200,
        "wires": [
            [
                "f9a03f5475f0ed8c"
            ]
        ]
    },
    {
        "id": "7fb21347cad2b4ef",
        "type": "function",
        "z": "08030ae535e94d33",
        "name": "Prepare Response Data",
        "func": "let states = {};\n\nif (msg.statusCode === 200){\n    var element_data = JSON.parse(msg.payload);\n    states[\"energyCounterIn\"] = parseFloat(element_data.energyCounterIn).toFixed(2); \n    states[\"energyCounterOut\"] = parseFloat(element_data.energyCounterOut).toFixed(2); \n    states[\"power\"] = element_data.power;\n    states[\"local_api_connected\"] = true;\n}else{\n    states[\"local_api_connected\"] = false;\n}\n\nmsg.element.local_api_connected = states[\"local_api_connected\"];\nlet obj = {\n    \"states\": states,\n    \"id\": msg.element.id,\n    \"type\": msg.element.type\n};\n\nmsg.data = obj;\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "0e9ec3f609ce7215",
        "type": "function",
        "z": "08030ae535e94d33",
        "name": "Init",
        "func": "msg.counter = 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 140,
        "wires": [
            [
                "f30241221aa67b14"
            ]
        ]
    },
    {
        "id": "f30241221aa67b14",
        "type": "switch",
        "z": "08030ae535e94d33",
        "name": "",
        "property": "instance_active",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 140,
        "wires": [
            [
                "c257f17fadd2e941",
                "bbca354a2f68c3d1"
            ],
            [
                "4cbe7bfdccfd4fad"
            ]
        ]
    },
    {
        "id": "4cbe7bfdccfd4fad",
        "type": "function",
        "z": "08030ae535e94d33",
        "name": "function 1",
        "func": "let element = msg.element\nnode.warn(`instance device id ${element.id} already running. `)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 240,
        "wires": [
            [
                "3451a9d0937d57a1"
            ]
        ]
    },
    {
        "id": "3451a9d0937d57a1",
        "type": "debug",
        "z": "08030ae535e94d33",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 240,
        "wires": []
    },
    {
        "id": "bbca354a2f68c3d1",
        "type": "debug",
        "z": "08030ae535e94d33",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 80,
        "wires": []
    },
    {
        "id": "cdb07e37ceb0802e",
        "type": "function",
        "z": "0f37da256ecf693a",
        "name": "Prepare Request",
        "func": "const configuration = global.get('configuration');\nconst port_node_red = configuration.ports.nodeRed;\nvar endpoint = \"v1/json\";\n\nlet element = msg.element;\n\n/* Only try to connect to the local API when EcoTracker is connected to the cloud. \n   This is to ensure that the local IP address has been synchronized correctly. */\nif (element.states.connected){\n    const ip_address = element[\"ip-wifi\"];\n    let url = `http://${ip_address}/${endpoint}`;\n    const url_simulation = `http://${ip_address}:${port_node_red}/endpoint/${endpoint}`;\n\n    if (global.get(\"add_simu_devices\")) {\n        msg.url = url_simulation;\n    }else{\n        msg.url = url;\n    }\n    return msg;\n}    \n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 40,
        "wires": [
            [
                "51c608063581501d"
            ]
        ]
    },
    {
        "id": "51c608063581501d",
        "type": "http request",
        "z": "0f37da256ecf693a",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 40,
        "wires": [
            [
                "6bb433f423f2902c",
                "c8f08a42b73c44e2",
                "56d7588a765d5979"
            ]
        ]
    },
    {
        "id": "647ead0a1509abbc",
        "type": "delay",
        "z": "0f37da256ecf693a",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 220,
        "wires": [
            [
                "cdb07e37ceb0802e"
            ]
        ]
    },
    {
        "id": "6bb433f423f2902c",
        "type": "function",
        "z": "0f37da256ecf693a",
        "name": "scan_interval",
        "func": "function getValueFromConfig(valuesArray, defaultValue, deviceId) {\n    for (let i = 0; i < valuesArray.length; i++) {\n        if (valuesArray[i].id === deviceId) {\n            return valuesArray[i].value;\n        }\n    }\n    return defaultValue;\n}\nconst FACTOR = 1000;\nconst configuration = global.get('configuration');\n\nlet valuesArray = configuration.devices.subtype.electricitymeter.ecotracker.scan_interval.device_id;\nlet defaultValue = configuration.devices.subtype.electricitymeter.ecotracker.scan_interval.default_value;\nlet deviceId = msg.element.id;\n\nconst scan_interval = getValueFromConfig(valuesArray, defaultValue, deviceId);\n\nnode.warn(scan_interval);\n\nif (msg.statusCode !== 200) {\n    msg.delay = scan_interval * FACTOR * msg.counter;\n    msg.counter ++;\n    node.warn(`Server Error: ${msg.url} - Status: ${msg.statusCode}. Next try in ${msg.delay / 1000} seconds`);\n}else{\n    msg.counter = 1;\n    msg.delay = scan_interval * FACTOR;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 100,
        "wires": [
            [
                "647ead0a1509abbc"
            ]
        ]
    },
    {
        "id": "c8f08a42b73c44e2",
        "type": "function",
        "z": "0f37da256ecf693a",
        "name": "Prepare Response Data",
        "func": "let states = {};\n\nif (msg.statusCode === 200){\n    var element_data = JSON.parse(msg.payload);\n    states[\"energyCounterIn\"] = parseFloat(element_data.energyCounterIn).toFixed(2); \n    states[\"energyCounterOut\"] = parseFloat(element_data.energyCounterOut).toFixed(2); \n    states[\"power\"] = element_data.power;\n    states[\"local_api_connected\"] = true;\n}else{\n    states[\"local_api_connected\"] = false;\n}\n\nmsg.element.local_api_connected = states[\"local_api_connected\"];\nlet obj = {\n    \"states\": states,\n    \"id\": msg.element.id,\n    \"type\": msg.element.type\n};\n\nmsg.data = obj;\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "36bd34a3ae353f4c",
        "type": "function",
        "z": "0f37da256ecf693a",
        "name": "Init",
        "func": "msg.counter = 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 40,
        "wires": [
            [
                "cdb07e37ceb0802e"
            ]
        ]
    },
    {
        "id": "56d7588a765d5979",
        "type": "debug",
        "z": "0f37da256ecf693a",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 120,
        "wires": []
    },
    {
        "id": "9dd0e31db6c4842f",
        "type": "function",
        "z": "147d74e1a76a9fac",
        "name": "Prepare Request",
        "func": "const configuration = global.get('configuration');\nconst port_node_red = configuration.ports.nodeRed;\nvar endpoint = \"v1/json\";\n\nlet element = msg.element;\n\n/* Only try to connect to the local API when EcoTracker is connected to the cloud. \n   This is to ensure that the local IP address has been synchronized correctly. */\nif (element.states.connected){\n    const ip_address = element[\"ip-wifi\"];\n    let url = `http://${ip_address}/${endpoint}`;\n    const url_simulation = `http://${ip_address}:${port_node_red}/endpoint/${endpoint}`;\n\n    if (global.get(\"add_simu_devices\")) {\n        msg.url = url_simulation;\n    }else{\n        msg.url = url;\n    }\n    return msg;\n}    \n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 40,
        "wires": [
            [
                "d21a3d62e68df2a8"
            ]
        ]
    },
    {
        "id": "d21a3d62e68df2a8",
        "type": "http request",
        "z": "147d74e1a76a9fac",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 40,
        "wires": [
            [
                "c85cf2abc15915b3",
                "dda60fc3b4218c26"
            ]
        ]
    },
    {
        "id": "124009b1e8f0ce1e",
        "type": "delay",
        "z": "147d74e1a76a9fac",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 220,
        "wires": [
            [
                "9dd0e31db6c4842f"
            ]
        ]
    },
    {
        "id": "c85cf2abc15915b3",
        "type": "function",
        "z": "147d74e1a76a9fac",
        "name": "scan_interval",
        "func": "function getValueFromConfig(valuesArray, defaultValue, deviceId) {\n    for (let i = 0; i < valuesArray.length; i++) {\n        if (valuesArray[i].id === deviceId) {\n            return valuesArray[i].value;\n        }\n    }\n    return defaultValue;\n}\n\nconst FACTOR = 1000;\nconst configuration = global.get('configuration');\n\nlet valuesArray = configuration.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id;\nlet defaultValue = configuration.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.default_value;\nlet deviceId = msg.element.id;\n\nconst scan_interval = getValueFromConfig(valuesArray, defaultValue, deviceId);\n\nif (msg.statusCode !== 200) {\n    msg.delay = scan_interval * FACTOR * msg.counter;\n    msg.counter ++;\n    node.log(`Server Error: ${msg.url} - Status: ${msg.statusCode}. Next try in ${msg.delay / 1000} seconds`);\n}else{\n    msg.counter = 1;\n    msg.delay = scan_interval * FACTOR;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 100,
        "wires": [
            [
                "124009b1e8f0ce1e"
            ]
        ]
    },
    {
        "id": "dda60fc3b4218c26",
        "type": "function",
        "z": "147d74e1a76a9fac",
        "name": "Prepare Response Data",
        "func": "let states = {};\n\nif (msg.statusCode === 200){\n    var element_data = JSON.parse(msg.payload);\n    states[\"energyCounterIn\"] = parseFloat(element_data.energyCounterIn).toFixed(2); \n    states[\"energyCounterOut\"] = parseFloat(element_data.energyCounterOut).toFixed(2); \n    states[\"power\"] = element_data.power;\n    states[\"local_api_connected\"] = true;\n}else{\n    states[\"local_api_connected\"] = false;\n}\n\nmsg.element.local_api_connected = states[\"local_api_connected\"];\nlet obj = {\n    \"states\": states,\n    \"id\": msg.element.id,\n    \"type\": msg.element.type\n};\n\nmsg.data = obj;\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "400e92ae33e396aa",
        "type": "function",
        "z": "147d74e1a76a9fac",
        "name": "Init",
        "func": "msg.counter = 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 40,
        "wires": [
            [
                "9dd0e31db6c4842f"
            ]
        ]
    },
    {
        "id": "71c5a5fce5b6269f",
        "type": "function",
        "z": "592abed23db1ce8d",
        "name": "Prepare Request",
        "func": "var endpoint = \"v1/json\";\n\nlet element = msg.element;\n\n/* Only try to connect to the local API when EcoTracker is connected to the cloud. \n   This is to ensure that the local IP address has been synchronized correctly. */\nif (element.states.connected){\n    const ip_address = element[\"ip-wifi\"];\n    let url = `http://${ip_address}/${endpoint}`;\n    const url_simulation = `http://${ip_address}:1880/endpoint/${endpoint}`;\n\n    if (global.get(\"add_simu_devices\")) {\n        msg.url = url_simulation;\n    }else{\n        msg.url = url;\n    }\n    return msg;\n}    \n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 40,
        "wires": [
            [
                "94d7971c413dfdf0"
            ]
        ]
    },
    {
        "id": "94d7971c413dfdf0",
        "type": "http request",
        "z": "592abed23db1ce8d",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 40,
        "wires": [
            [
                "e3555010d136eb5c",
                "8ee9569a023b4c97"
            ]
        ]
    },
    {
        "id": "2f2ff99a3626b52b",
        "type": "delay",
        "z": "592abed23db1ce8d",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 220,
        "wires": [
            [
                "71c5a5fce5b6269f"
            ]
        ]
    },
    {
        "id": "e3555010d136eb5c",
        "type": "function",
        "z": "592abed23db1ce8d",
        "name": "scan_interval",
        "func": "function getValueFromConfig(valuesArray, defaultValue, deviceId) {\n    for (let i = 0; i < valuesArray.length; i++) {\n        if (valuesArray[i].id === deviceId) {\n            return valuesArray[i].value;\n        }\n    }\n    return defaultValue;\n}\nconst FACTOR = 1000;\nconst configuration = global.get('configuration');\n\nlet valuesArray = configuration.devices.subtype.electricitymeter.ecotracker.scan_interval.device_id;\nlet defaultValue = configuration.devices.subtype.electricitymeter.ecotracker.scan_interval.default_value;\nlet deviceId = msg.element.id;\n\nconst scan_interval = getValueFromConfig(valuesArray, defaultValue, deviceId);\n\nnode.warn(scan_interval);\n\nif (msg.statusCode !== 200) {\n    msg.delay = scan_interval * FACTOR * msg.counter;\n    msg.counter ++;\n    node.warn(`Server Error: ${msg.url} - Status: ${msg.statusCode}. Next try in ${msg.delay / 1000} seconds`);\n}else{\n    msg.counter = 1;\n    msg.delay = scan_interval * FACTOR;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 100,
        "wires": [
            [
                "2f2ff99a3626b52b"
            ]
        ]
    },
    {
        "id": "8ee9569a023b4c97",
        "type": "function",
        "z": "592abed23db1ce8d",
        "name": "Prepare Response Data",
        "func": "let states = {};\n\nif (msg.statusCode === 200){\n    var element_data = JSON.parse(msg.payload);\n    states[\"energyCounterIn\"] = parseFloat(element_data.energyCounterIn).toFixed(2); \n    states[\"energyCounterOut\"] = parseFloat(element_data.energyCounterOut).toFixed(2); \n    states[\"power\"] = element_data.power;\n    states[\"local_api_connected\"] = true;\n}else{\n    states[\"local_api_connected\"] = false;\n}\n\nmsg.element.local_api_connected = states[\"local_api_connected\"];\nlet obj = {\n    \"states\": states,\n    \"id\": msg.element.id,\n    \"type\": msg.element.type\n};\n\nmsg.data = obj;\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "3b2c02e7aa418d33",
        "type": "function",
        "z": "592abed23db1ce8d",
        "name": "Init",
        "func": "msg.counter = 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 40,
        "wires": [
            [
                "71c5a5fce5b6269f"
            ]
        ]
    },
    {
        "id": "5cde46d420970fb9",
        "type": "function",
        "z": "6e5434adebb6a0c3",
        "name": "Prepare Request",
        "func": "var endpoint = \"v1/json\";\n\nlet element = msg.element;\n\n/* Only try to connect to the local API when EcoTracker is connected to the cloud. \n   This is to ensure that the local IP address has been synchronized correctly. */\nif (element.states.connected){\n    const ip_address = element[\"ip-wifi\"];\n    let url = `http://${ip_address}/${endpoint}`;\n    const url_simulation = `http://${ip_address}:1880/endpoint/${endpoint}`;\n\n    if (global.get(\"add_simu_devices\")) {\n        msg.url = url_simulation;\n    }else{\n        msg.url = url;\n    }\n    return msg;\n}    \n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 40,
        "wires": [
            [
                "dd4024eacfe6148c"
            ]
        ]
    },
    {
        "id": "dd4024eacfe6148c",
        "type": "http request",
        "z": "6e5434adebb6a0c3",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 40,
        "wires": [
            [
                "c9307ba4abcc124c",
                "552faa324f5336d5"
            ]
        ]
    },
    {
        "id": "9b3ec0c63701c45a",
        "type": "delay",
        "z": "6e5434adebb6a0c3",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 220,
        "wires": [
            [
                "5cde46d420970fb9"
            ]
        ]
    },
    {
        "id": "c9307ba4abcc124c",
        "type": "function",
        "z": "6e5434adebb6a0c3",
        "name": "scan_interval",
        "func": "function getValueFromConfig(valuesArray, defaultValue, deviceId) {\n    for (let i = 0; i < valuesArray.length; i++) {\n        if (valuesArray[i].id === deviceId) {\n            return valuesArray[i].value;\n        }\n    }\n    return defaultValue;\n}\nconst FACTOR = 1000;\nconst configuration = global.get('configuration');\n\nlet valuesArray = configuration.devices.subtype.electricitymeter.ecotracker.scan_interval.device_id;\nlet defaultValue = configuration.devices.subtype.electricitymeter.ecotracker.scan_interval.default_value;\nlet deviceId = msg.element.id;\n\nconst scan_interval = getValueFromConfig(valuesArray, defaultValue, deviceId);\n\nnode.warn(scan_interval);\n\nif (msg.statusCode !== 200) {\n    msg.delay = scan_interval * FACTOR * msg.counter;\n    msg.counter ++;\n    node.warn(`Server Error: ${msg.url} - Status: ${msg.statusCode}. Next try in ${msg.delay / 1000} seconds`);\n}else{\n    msg.counter = 1;\n    msg.delay = scan_interval * FACTOR;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 100,
        "wires": [
            [
                "9b3ec0c63701c45a"
            ]
        ]
    },
    {
        "id": "552faa324f5336d5",
        "type": "function",
        "z": "6e5434adebb6a0c3",
        "name": "Prepare Response Data",
        "func": "let states = {};\n\nif (msg.statusCode === 200){\n    var element_data = JSON.parse(msg.payload);\n    states[\"energyCounterIn\"] = parseFloat(element_data.energyCounterIn).toFixed(2); \n    states[\"energyCounterOut\"] = parseFloat(element_data.energyCounterOut).toFixed(2); \n    states[\"power\"] = element_data.power;\n    states[\"local_api_connected\"] = true;\n}else{\n    states[\"local_api_connected\"] = false;\n}\n\nmsg.element.local_api_connected = states[\"local_api_connected\"];\nlet obj = {\n    \"states\": states,\n    \"id\": msg.element.id,\n    \"type\": msg.element.type\n};\n\nmsg.data = obj;\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "80d3c4da6a7b249d",
        "type": "function",
        "z": "6e5434adebb6a0c3",
        "name": "Init",
        "func": "msg.counter = 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 40,
        "wires": [
            [
                "5cde46d420970fb9"
            ]
        ]
    },
    {
        "id": "ad59265f9e512926",
        "type": "function",
        "z": "ae999fab3333ab46",
        "name": "extractEntities",
        "func": "const groups = msg.groups;\n\nfunction findGroupByDeviceID(groupList, deviceID) {\n    return groupList.find(group => group.id === deviceID) || null;\n}\n\nfunction extractEntities(groupList, groupID, result = []) {\n    const group = findGroupByDeviceID(groupList, groupID);\n    if (group) {\n        group.entities.forEach(entity => {\n            if (entity.groupid) {\n                extractEntities(groupList, entity.groupid, result);\n            } else {\n                result.push({ deviceid: entity.deviceid });\n            }\n        });\n    }\n    return result;\n}\n\nconst updatedEntities = [];\ngroups.forEach(function (element) {\n    if (element.entities) {\n        const newEntities = [];\n        element.entities.forEach(function (entity) {\n            if (entity.groupid) {\n                const extractedEntities = extractEntities(groups, entity.groupid);\n                newEntities.push(...extractedEntities);\n            } else {\n                newEntities.push(entity);\n            }\n        });\n        element.entities = newEntities;\n        updatedEntities.push(...newEntities.filter(entity => !entity.groupid));\n    }\n});\n\nmsg.payload = groups;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 60,
        "wires": [
            [
                "83455de706b563b7"
            ]
        ]
    },
    {
        "id": "83455de706b563b7",
        "type": "function",
        "z": "ae999fab3333ab46",
        "name": "groupBySubtype",
        "func": "function groupBySubtype(groups) {\n    const groupsBySubtype = {};\n\n    groups.forEach(group => {\n        const subtype = group.subtype;\n\n        if (groupsBySubtype[subtype]) {\n            groupsBySubtype[subtype].push(group);\n        } else {\n            groupsBySubtype[subtype] = [group];\n        }\n    });\n\n    const result = [];\n    for (const subtype in groupsBySubtype) {\n        result.push({\n            subtype: subtype,\n            group_elements: groupsBySubtype[subtype]\n        });\n    }\n\n    return result;\n}\n\nconst groups = msg.payload;\n\nconst configuration = global.get('configuration');\n// remove excluded groups\nlet groupsToRemove = [];\ngroups.forEach(function (element, index) {\n    if (configuration.devices.exclude.some(excludeItem => excludeItem.subtype === element.subtype)) {\n        groupsToRemove.push(index);\n    }\n});\ngroupsToRemove.reverse().forEach(function (index) {\n    groups.splice(index, 1);\n});\n\nconst groupsBySubtype = groupBySubtype(groups);\n\nmsg.payload = groupsBySubtype;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 60,
        "wires": [
            [
                "a2a035a53c5a7891"
            ]
        ]
    },
    {
        "id": "a2a035a53c5a7891",
        "type": "function",
        "z": "ae999fab3333ab46",
        "name": "maingroups",
        "func": "const groups = msg.payload;\nconst language = msg.language;\n\n// create availability list\n//general\nlet avty_states_connected = [];\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/websocket\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/mqtt\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\n\ngroups.forEach(function (element, index) {\n    element.type = \"group\";\n    element.group_subtype = \"maingroup\";\n    const main_name = ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(element.type, global.get(\"language\"));\n    const sub_name = ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(element.subtype, global.get(\"language\"));\n    element.device_name = `${sub_name} ${main_name}`;\n    element.language = language;\n    element.manufacturer = \"everHome2MQTT\";\n    element.model = \"Group\";\n    element.via_device = \"everhome_central\";\n    element.main_topic = \"everhome/group\";\n    element.config = {};\n    element.uniq_id_main = `everhome_maingroup_${element.subtype}`;\n    element.config.avty = avty_states_connected;\n    element.states = {};\n    element.ts = {};\n    element.id = index + 1;\n\n    element.device_id = `everhome_maingroup_${element.subtype}_${element.id}`;\n});\n\nmsg.payload = groups;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 60,
        "wires": [
            [
                "b99187b9c095c7a2"
            ]
        ]
    },
    {
        "id": "b99187b9c095c7a2",
        "type": "function",
        "z": "ae999fab3333ab46",
        "name": "availability",
        "func": "function findGatewayId(devices, deviceid) {\n    for (let i = 0; i < devices.length; i++) {\n        if (devices[i].id === deviceid) {\n            return devices[i].gatewayid;\n        }\n    }\n    return null;\n}\n\nconst groups = msg.payload;\nconst devices = msg.devices;\n\n// create availability list\n//general\nlet avty_states_connected = [];\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/websocket\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/mqtt\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\n\n// Search for the corresponding gateway of each device from the group\ngroups.forEach(function (element) {\n    element.group_elements.forEach(function (element) {\n        element.config = {};\n        const avty = [...avty_states_connected];\n        if (element.entities) {\n            element.entities.forEach(function (entity) {\n                const gatewayid = findGatewayId(devices, entity.deviceid);\n                const newEntry = {\n                    \"t\": `everhome/device/${gatewayid}/states/connected`,\n                    \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n                };\n                if (!avty.some(item => item.t === newEntry.t && item.val_tpl === newEntry.val_tpl)) {\n                    if (gatewayid !== undefined) {\n                        avty.push(newEntry);\n                    }\n                }\n            });\n        }\n        element.config.avty = avty;\n    });\n\n});\n\nmsg.payload = groups;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 60,
        "wires": [
            [
                "ade6a5cf30fa04b6"
            ]
        ]
    },
    {
        "id": "ade6a5cf30fa04b6",
        "type": "function",
        "z": "ae999fab3333ab46",
        "name": "group_elements",
        "func": "function findeNameById(array, id) {\n    for (let i = 0; i < array.length; i++) {\n        if (array[i].id === id) {\n            return array[i].name;\n        }\n    }\n    return '';\n}\nfunction formatString(inputString, variables) {\n    var regex = /<([^>]+)>/g;\n    var result = inputString.replace(regex, function (match, placeholder) {\n        return variables[placeholder] !== undefined ? variables[placeholder] : '';\n    });\n    return result;\n}\n\nconst language = msg.language;\nlet rooms = msg.rooms;\nconst groups = msg.payload;\nconst configuration = msg.configuration;\n\nconst set_object_id = configuration.devices.set_object_id;\n\ngroups.forEach(function (element) {\n    element.group_elements.forEach(function (group_element) {\n\n        group_element.group_subtype = \"groupelement\";\n        group_element.set_object_id = set_object_id;\n        group_element.device_id = `everhome_maingroup_${group_element.subtype}_${element.id}`;\n        group_element.uniq_id_main = `everhome_${group_element.type}_id_${group_element.id}`;\n        group_element.room_name = findeNameById(rooms, group_element.roomid);\n\n        var variables = {\n            room_name: group_element.room_name,\n            device_name: group_element.name\n        };\n\n        const inputString = configuration.devices?.naming ?? group_element.room_name + \" - \" + group_element.name;\n        group_element.device_name = formatString(inputString, variables);\n\n    });\n\n});\n\nmsg.payload = groups;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "d789ecd5078e3528",
        "type": "trigger",
        "z": "12f23899f58e7385",
        "name": "",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "1",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 640,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "421c55999a902dbf",
        "type": "function",
        "z": "12f23899f58e7385",
        "name": "delay",
        "func": "msg.payload_origin = msg.payload;\nmsg.delay = msg.delay;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 200,
        "wires": [
            [
                "d789ecd5078e3528"
            ]
        ]
    },
    {
        "id": "03f0d0716579a2f9",
        "type": "trigger",
        "z": "ee30fd7f1736160b",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "3000",
        "extend": true,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 400,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "fa06b79a0db0ece9",
        "type": "function",
        "z": "f0cb8267013ae146",
        "name": "Prepare Request",
        "func": "const configuration = global.get('configuration');\nconst port_node_red = configuration.ports.nodeRed;\n\nvar endpoint = \"v1/json\";\n\nlet element = msg.element;\n\n/* Only try to connect to the local API when EcoTracker is connected to the cloud. \n   This is to ensure that the local IP address has been synchronized correctly. */\nif (element.states.connected){\n    msg.instance_active = true;\n    const ip_address = element[\"ip-wifi\"];\n    let url = `http://${ip_address}/${endpoint}`;\n    const url_simulation = `http://${ip_address}:${port_node_red}/endpoint/${endpoint}`;\n\n    if (global.get(\"add_simu_devices\")) {\n        msg.url = url_simulation;\n    }else{\n        msg.url = url;\n    }\n    return msg;\n}    \n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 140,
        "wires": [
            [
                "c95e6166e86565f0"
            ]
        ]
    },
    {
        "id": "c95e6166e86565f0",
        "type": "http request",
        "z": "f0cb8267013ae146",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 140,
        "wires": [
            [
                "8f6143976df8ccc1",
                "b336fb155ec50412"
            ]
        ]
    },
    {
        "id": "3f95674dc6130986",
        "type": "delay",
        "z": "f0cb8267013ae146",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 320,
        "wires": [
            [
                "fa06b79a0db0ece9"
            ]
        ]
    },
    {
        "id": "8f6143976df8ccc1",
        "type": "function",
        "z": "f0cb8267013ae146",
        "name": "scan_interval",
        "func": "function getValueFromConfig(valuesArray, defaultValue, deviceId) {\n    for (let i = 0; i < valuesArray.length; i++) {\n        if (valuesArray[i].id === deviceId) {\n            return valuesArray[i].value;\n        }\n    }\n    return defaultValue;\n}\n\nconst FACTOR = 1000;\nconst configuration = global.get('configuration');\n\nlet valuesArray = configuration.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id;\nlet defaultValue = configuration.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.default_value;\nlet deviceId = msg.element.id;\n\nconst scan_interval = getValueFromConfig(valuesArray, defaultValue, deviceId);\n\nif (msg.statusCode !== 200) {\n    msg.delay = scan_interval * FACTOR * msg.counter;\n    msg.counter ++;\n    node.log(`Server Error: ${msg.url} - Status: ${msg.statusCode}. Next try in ${msg.delay / 1000} seconds`);\n}else{\n    msg.counter = 1;\n    msg.delay = scan_interval * FACTOR;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 200,
        "wires": [
            [
                "3f95674dc6130986"
            ]
        ]
    },
    {
        "id": "b336fb155ec50412",
        "type": "function",
        "z": "f0cb8267013ae146",
        "name": "Prepare Response Data",
        "func": "let states = {};\n\nif (msg.statusCode === 200){\n    var element_data = JSON.parse(msg.payload);\n    states[\"energyCounterIn\"] = parseFloat(element_data.energyCounterIn).toFixed(2); \n    states[\"energyCounterOut\"] = parseFloat(element_data.energyCounterOut).toFixed(2); \n    states[\"power\"] = element_data.power;\n    states[\"local_api_connected\"] = true;\n}else{\n    states[\"local_api_connected\"] = false;\n}\n\nmsg.element.local_api_connected = states[\"local_api_connected\"];\nlet obj = {\n    \"states\": states,\n    \"id\": msg.element.id,\n    \"type\": msg.element.type\n};\n\nmsg.data = obj;\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "0d5d3027b713e940",
        "type": "function",
        "z": "f0cb8267013ae146",
        "name": "Init",
        "func": "msg.counter = 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 140,
        "wires": [
            [
                "dbd536991a69d47d"
            ]
        ]
    },
    {
        "id": "dbd536991a69d47d",
        "type": "switch",
        "z": "f0cb8267013ae146",
        "name": "",
        "property": "instance_active",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 140,
        "wires": [
            [
                "fa06b79a0db0ece9",
                "7b620548787d65d5"
            ],
            [
                "4c0d0a08bb0db78b"
            ]
        ]
    },
    {
        "id": "4c0d0a08bb0db78b",
        "type": "function",
        "z": "f0cb8267013ae146",
        "name": "function 1",
        "func": "let element = msg.element\nnode.warn(`instance device id ${element.id} already running. `)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 240,
        "wires": [
            [
                "e5d7ddab0cdef08b"
            ]
        ]
    },
    {
        "id": "e5d7ddab0cdef08b",
        "type": "debug",
        "z": "f0cb8267013ae146",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 240,
        "wires": []
    },
    {
        "id": "7b620548787d65d5",
        "type": "debug",
        "z": "f0cb8267013ae146",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 80,
        "wires": []
    },
    {
        "id": "f5e09c29369fdac9",
        "type": "function",
        "z": "15f6f72abf148ca1",
        "name": "Prepare Request",
        "func": "const configuration = global.get('configuration');\nconst port_node_red = configuration.ports.nodeRed;\nvar endpoint = \"v1/json\";\n\nlet element = msg.element;\n\n/* Only try to connect to the local API when EcoTracker is connected to the cloud. \n   This is to ensure that the local IP address has been synchronized correctly. */\nif (element.states.connected){\n    const ip_address = element[\"ip-wifi\"];\n    let url = `http://${ip_address}/${endpoint}`;\n    const url_simulation = `http://${ip_address}:${port_node_red}/endpoint/${endpoint}`;\n\n    if (global.get(\"add_simu_devices\")) {\n        msg.url = url_simulation;\n    }else{\n        msg.url = url;\n    }\n    return msg;\n}    \n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 40,
        "wires": [
            [
                "f460e26486257e68"
            ]
        ]
    },
    {
        "id": "f460e26486257e68",
        "type": "http request",
        "z": "15f6f72abf148ca1",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 40,
        "wires": [
            [
                "67bfefa2bf32814a",
                "72be23b31e2519af"
            ]
        ]
    },
    {
        "id": "b83f1a3be95fc4a5",
        "type": "delay",
        "z": "15f6f72abf148ca1",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 220,
        "wires": [
            [
                "f5e09c29369fdac9"
            ]
        ]
    },
    {
        "id": "67bfefa2bf32814a",
        "type": "function",
        "z": "15f6f72abf148ca1",
        "name": "scan_interval",
        "func": "function getValueFromConfig(valuesArray, defaultValue, deviceId) {\n    for (let i = 0; i < valuesArray.length; i++) {\n        if (valuesArray[i].id === deviceId) {\n            return valuesArray[i].value;\n        }\n    }\n    return defaultValue;\n}\nconst FACTOR = 1000;\nconst configuration = global.get('configuration');\n\nlet valuesArray = configuration.devices.subtype.electricitymeter.ecotracker.scan_interval.device_id;\nlet defaultValue = configuration.devices.subtype.electricitymeter.ecotracker.scan_interval.default_value;\nlet deviceId = msg.element.id;\n\nconst scan_interval = getValueFromConfig(valuesArray, defaultValue, deviceId);\n\nnode.warn(scan_interval);\n\nif (msg.statusCode !== 200) {\n    msg.delay = scan_interval * FACTOR * msg.counter;\n    msg.counter ++;\n    node.warn(`Server Error: ${msg.url} - Status: ${msg.statusCode}. Next try in ${msg.delay / 1000} seconds`);\n}else{\n    msg.counter = 1;\n    msg.delay = scan_interval * FACTOR;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 100,
        "wires": [
            [
                "b83f1a3be95fc4a5"
            ]
        ]
    },
    {
        "id": "72be23b31e2519af",
        "type": "function",
        "z": "15f6f72abf148ca1",
        "name": "Prepare Response Data",
        "func": "let states = {};\n\nif (msg.statusCode === 200){\n    var element_data = JSON.parse(msg.payload);\n    states[\"energyCounterIn\"] = parseFloat(element_data.energyCounterIn).toFixed(2); \n    states[\"energyCounterOut\"] = parseFloat(element_data.energyCounterOut).toFixed(2); \n    states[\"power\"] = element_data.power;\n    states[\"local_api_connected\"] = true;\n}else{\n    states[\"local_api_connected\"] = false;\n}\n\nmsg.element.local_api_connected = states[\"local_api_connected\"];\nlet obj = {\n    \"states\": states,\n    \"id\": msg.element.id,\n    \"type\": msg.element.type\n};\n\nmsg.data = obj;\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "354b7a32b7323be7",
        "type": "function",
        "z": "15f6f72abf148ca1",
        "name": "Init",
        "func": "msg.counter = 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 40,
        "wires": [
            [
                "f5e09c29369fdac9"
            ]
        ]
    },
    {
        "id": "6fd80f778d8793a7",
        "type": "function",
        "z": "09a811f5aab51c4f",
        "name": "Prepare Request",
        "func": "const configuration = global.get('configuration');\nconst port_node_red = configuration.ports.nodeRed;\nvar endpoint = \"v1/json\";\n\nlet element = msg.element;\n\n/* Only try to connect to the local API when EcoTracker is connected to the cloud. \n   This is to ensure that the local IP address has been synchronized correctly. */\nif (element.states.connected){\n    const ip_address = element[\"ip-wifi\"];\n    let url = `http://${ip_address}/${endpoint}`;\n    const url_simulation = `http://${ip_address}:${port_node_red}/endpoint/${endpoint}`;\n\n    if (global.get(\"add_simu_devices\")) {\n        msg.url = url_simulation;\n    }else{\n        msg.url = url;\n    }\n    return msg;\n}    \n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 40,
        "wires": [
            [
                "8d27cf4b947dd7d1"
            ]
        ]
    },
    {
        "id": "8d27cf4b947dd7d1",
        "type": "http request",
        "z": "09a811f5aab51c4f",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 40,
        "wires": [
            [
                "6f110e2e73683d44",
                "ebcf49b3dec8a1a4"
            ]
        ]
    },
    {
        "id": "f1d89e5972d13ba4",
        "type": "delay",
        "z": "09a811f5aab51c4f",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 220,
        "wires": [
            [
                "6fd80f778d8793a7"
            ]
        ]
    },
    {
        "id": "6f110e2e73683d44",
        "type": "function",
        "z": "09a811f5aab51c4f",
        "name": "scan_interval",
        "func": "function getValueFromConfig(valuesArray, defaultValue, deviceId) {\n    for (let i = 0; i < valuesArray.length; i++) {\n        if (valuesArray[i].id === deviceId) {\n            return valuesArray[i].value;\n        }\n    }\n    return defaultValue;\n}\n\nconst FACTOR = 1000;\nconst configuration = global.get('configuration');\n\nlet valuesArray = configuration.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id;\nlet defaultValue = configuration.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.default_value;\nlet deviceId = msg.element.id;\n\nconst scan_interval = getValueFromConfig(valuesArray, defaultValue, deviceId);\n\nif (msg.statusCode !== 200) {\n    msg.delay = scan_interval * FACTOR * msg.counter;\n    msg.counter ++;\n    node.log(`Server Error: ${msg.url} - Status: ${msg.statusCode}. Next try in ${msg.delay / 1000} seconds`);\n}else{\n    msg.counter = 1;\n    msg.delay = scan_interval * FACTOR;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 100,
        "wires": [
            [
                "f1d89e5972d13ba4"
            ]
        ]
    },
    {
        "id": "ebcf49b3dec8a1a4",
        "type": "function",
        "z": "09a811f5aab51c4f",
        "name": "Prepare Response Data",
        "func": "let states = {};\n\nif (msg.statusCode === 200){\n    var element_data = JSON.parse(msg.payload);\n    states[\"energyCounterIn\"] = parseFloat(element_data.energyCounterIn).toFixed(2); \n    states[\"energyCounterOut\"] = parseFloat(element_data.energyCounterOut).toFixed(2); \n    states[\"power\"] = element_data.power;\n    states[\"local_api_connected\"] = true;\n}else{\n    states[\"local_api_connected\"] = false;\n}\n\nmsg.element.local_api_connected = states[\"local_api_connected\"];\nlet obj = {\n    \"states\": states,\n    \"id\": msg.element.id,\n    \"type\": msg.element.type\n};\n\nmsg.data = obj;\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "18657d7374a24d16",
        "type": "function",
        "z": "09a811f5aab51c4f",
        "name": "Init",
        "func": "msg.counter = 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 40,
        "wires": [
            [
                "6fd80f778d8793a7"
            ]
        ]
    },
    {
        "id": "9919c09e02b212fa",
        "type": "function",
        "z": "8c67da6509104312",
        "name": "Prepare Request",
        "func": "const configuration = global.get('configuration');\nconst port_node_red = configuration.ports.nodeRed;\nvar endpoint = \"v1/json\";\n\nlet element = msg.element;\n\n/* Only try to connect to the local API when EcoTracker is connected to the cloud. \n   This is to ensure that the local IP address has been synchronized correctly. */\nif (element.states.connected){\n    const ip_address = element[\"ip-wifi\"];\n    let url = `http://${ip_address}/${endpoint}`;\n    const url_simulation = `http://${ip_address}:${port_node_red}/endpoint/${endpoint}`;\n\n    if (global.get(\"add_simu_devices\")) {\n        msg.url = url_simulation;\n    }else{\n        msg.url = url;\n    }\n    return msg;\n}    \n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 40,
        "wires": [
            [
                "3e82deee1a65a6fb"
            ]
        ]
    },
    {
        "id": "3e82deee1a65a6fb",
        "type": "http request",
        "z": "8c67da6509104312",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 40,
        "wires": [
            [
                "beb11623af9b7c87",
                "2fd696539dbdcc5f",
                "0a45e17ffbfda618"
            ]
        ]
    },
    {
        "id": "0498d32e748c7620",
        "type": "delay",
        "z": "8c67da6509104312",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 220,
        "wires": [
            [
                "9919c09e02b212fa"
            ]
        ]
    },
    {
        "id": "beb11623af9b7c87",
        "type": "function",
        "z": "8c67da6509104312",
        "name": "scan_interval",
        "func": "function getValueFromConfig(valuesArray, defaultValue, deviceId) {\n    for (let i = 0; i < valuesArray.length; i++) {\n        if (valuesArray[i].id === deviceId) {\n            return valuesArray[i].value;\n        }\n    }\n    return defaultValue;\n}\nconst FACTOR = 1000;\nconst configuration = global.get('configuration');\n\nlet valuesArray = configuration.devices.subtype.electricitymeter.ecotracker.scan_interval.device_id;\nlet defaultValue = configuration.devices.subtype.electricitymeter.ecotracker.scan_interval.default_value;\nlet deviceId = msg.element.id;\n\nconst scan_interval = getValueFromConfig(valuesArray, defaultValue, deviceId);\n\nnode.warn(scan_interval);\n\nif (msg.statusCode !== 200) {\n    msg.delay = scan_interval * FACTOR * msg.counter;\n    msg.counter ++;\n    node.warn(`Server Error: ${msg.url} - Status: ${msg.statusCode}. Next try in ${msg.delay / 1000} seconds`);\n}else{\n    msg.counter = 1;\n    msg.delay = scan_interval * FACTOR;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 100,
        "wires": [
            [
                "0498d32e748c7620"
            ]
        ]
    },
    {
        "id": "2fd696539dbdcc5f",
        "type": "function",
        "z": "8c67da6509104312",
        "name": "Prepare Response Data",
        "func": "let states = {};\n\nif (msg.statusCode === 200){\n    var element_data = JSON.parse(msg.payload);\n    states[\"energyCounterIn\"] = parseFloat(element_data.energyCounterIn).toFixed(2); \n    states[\"energyCounterOut\"] = parseFloat(element_data.energyCounterOut).toFixed(2); \n    states[\"power\"] = element_data.power;\n    states[\"local_api_connected\"] = true;\n}else{\n    states[\"local_api_connected\"] = false;\n}\n\nmsg.element.local_api_connected = states[\"local_api_connected\"];\nlet obj = {\n    \"states\": states,\n    \"id\": msg.element.id,\n    \"type\": msg.element.type\n};\n\nmsg.data = obj;\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "e379b4844bf8c5c4",
        "type": "function",
        "z": "8c67da6509104312",
        "name": "Init",
        "func": "msg.counter = 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 40,
        "wires": [
            [
                "9919c09e02b212fa"
            ]
        ]
    },
    {
        "id": "0a45e17ffbfda618",
        "type": "debug",
        "z": "8c67da6509104312",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 120,
        "wires": []
    },
    {
        "id": "b4a0d7496d6b19ce",
        "type": "function",
        "z": "f7478cbf8c5b3a5a",
        "name": "Prepare Request",
        "func": "var endpoint = \"v1/json\";\n\nlet element = msg.element;\n\n/* Only try to connect to the local API when EcoTracker is connected to the cloud. \n   This is to ensure that the local IP address has been synchronized correctly. */\nif (element.states.connected){\n    const ip_address = element[\"ip-wifi\"];\n    let url = `http://${ip_address}/${endpoint}`;\n    const url_simulation = `http://${ip_address}:1880/endpoint/${endpoint}`;\n\n    if (global.get(\"add_simu_devices\")) {\n        msg.url = url_simulation;\n    }else{\n        msg.url = url;\n    }\n    return msg;\n}    \n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 40,
        "wires": [
            [
                "fdb01e817806f36b"
            ]
        ]
    },
    {
        "id": "fdb01e817806f36b",
        "type": "http request",
        "z": "f7478cbf8c5b3a5a",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 40,
        "wires": [
            [
                "576d2906cc9c18f0",
                "9d7542b6b8d4aa7a"
            ]
        ]
    },
    {
        "id": "30860c78412a6f21",
        "type": "delay",
        "z": "f7478cbf8c5b3a5a",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 220,
        "wires": [
            [
                "b4a0d7496d6b19ce"
            ]
        ]
    },
    {
        "id": "576d2906cc9c18f0",
        "type": "function",
        "z": "f7478cbf8c5b3a5a",
        "name": "scan_interval",
        "func": "function getValueFromConfig(valuesArray, defaultValue, deviceId) {\n    for (let i = 0; i < valuesArray.length; i++) {\n        if (valuesArray[i].id === deviceId) {\n            return valuesArray[i].value;\n        }\n    }\n    return defaultValue;\n}\nconst FACTOR = 1000;\nconst configuration = global.get('configuration');\n\nlet valuesArray = configuration.devices.subtype.electricitymeter.ecotracker.scan_interval.device_id;\nlet defaultValue = configuration.devices.subtype.electricitymeter.ecotracker.scan_interval.default_value;\nlet deviceId = msg.element.id;\n\nconst scan_interval = getValueFromConfig(valuesArray, defaultValue, deviceId);\n\nnode.warn(scan_interval);\n\nif (msg.statusCode !== 200) {\n    msg.delay = scan_interval * FACTOR * msg.counter;\n    msg.counter ++;\n    node.warn(`Server Error: ${msg.url} - Status: ${msg.statusCode}. Next try in ${msg.delay / 1000} seconds`);\n}else{\n    msg.counter = 1;\n    msg.delay = scan_interval * FACTOR;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 100,
        "wires": [
            [
                "30860c78412a6f21"
            ]
        ]
    },
    {
        "id": "9d7542b6b8d4aa7a",
        "type": "function",
        "z": "f7478cbf8c5b3a5a",
        "name": "Prepare Response Data",
        "func": "let states = {};\n\nif (msg.statusCode === 200){\n    var element_data = JSON.parse(msg.payload);\n    states[\"energyCounterIn\"] = parseFloat(element_data.energyCounterIn).toFixed(2); \n    states[\"energyCounterOut\"] = parseFloat(element_data.energyCounterOut).toFixed(2); \n    states[\"power\"] = element_data.power;\n    states[\"local_api_connected\"] = true;\n}else{\n    states[\"local_api_connected\"] = false;\n}\n\nmsg.element.local_api_connected = states[\"local_api_connected\"];\nlet obj = {\n    \"states\": states,\n    \"id\": msg.element.id,\n    \"type\": msg.element.type\n};\n\nmsg.data = obj;\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "338f95eafc9db208",
        "type": "function",
        "z": "f7478cbf8c5b3a5a",
        "name": "Init",
        "func": "msg.counter = 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 40,
        "wires": [
            [
                "b4a0d7496d6b19ce"
            ]
        ]
    },
    {
        "id": "8c7b9c32f0228166",
        "type": "function",
        "z": "6c976fce6ecbc4d5",
        "name": "Prepare Request",
        "func": "var endpoint = \"v1/json\";\n\nlet element = msg.element;\n\n/* Only try to connect to the local API when EcoTracker is connected to the cloud. \n   This is to ensure that the local IP address has been synchronized correctly. */\nif (element.states.connected){\n    const ip_address = element[\"ip-wifi\"];\n    let url = `http://${ip_address}/${endpoint}`;\n    const url_simulation = `http://${ip_address}:1880/endpoint/${endpoint}`;\n\n    if (global.get(\"add_simu_devices\")) {\n        msg.url = url_simulation;\n    }else{\n        msg.url = url;\n    }\n    return msg;\n}    \n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 40,
        "wires": [
            [
                "5da109f7d0b949c6"
            ]
        ]
    },
    {
        "id": "5da109f7d0b949c6",
        "type": "http request",
        "z": "6c976fce6ecbc4d5",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 40,
        "wires": [
            [
                "c1c26532a1dcafa7",
                "6b623d0cb666579a"
            ]
        ]
    },
    {
        "id": "9e5fbbc3723a1c78",
        "type": "delay",
        "z": "6c976fce6ecbc4d5",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 220,
        "wires": [
            [
                "8c7b9c32f0228166"
            ]
        ]
    },
    {
        "id": "c1c26532a1dcafa7",
        "type": "function",
        "z": "6c976fce6ecbc4d5",
        "name": "scan_interval",
        "func": "function getValueFromConfig(valuesArray, defaultValue, deviceId) {\n    for (let i = 0; i < valuesArray.length; i++) {\n        if (valuesArray[i].id === deviceId) {\n            return valuesArray[i].value;\n        }\n    }\n    return defaultValue;\n}\nconst FACTOR = 1000;\nconst configuration = global.get('configuration');\n\nlet valuesArray = configuration.devices.subtype.electricitymeter.ecotracker.scan_interval.device_id;\nlet defaultValue = configuration.devices.subtype.electricitymeter.ecotracker.scan_interval.default_value;\nlet deviceId = msg.element.id;\n\nconst scan_interval = getValueFromConfig(valuesArray, defaultValue, deviceId);\n\nnode.warn(scan_interval);\n\nif (msg.statusCode !== 200) {\n    msg.delay = scan_interval * FACTOR * msg.counter;\n    msg.counter ++;\n    node.warn(`Server Error: ${msg.url} - Status: ${msg.statusCode}. Next try in ${msg.delay / 1000} seconds`);\n}else{\n    msg.counter = 1;\n    msg.delay = scan_interval * FACTOR;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 100,
        "wires": [
            [
                "9e5fbbc3723a1c78"
            ]
        ]
    },
    {
        "id": "6b623d0cb666579a",
        "type": "function",
        "z": "6c976fce6ecbc4d5",
        "name": "Prepare Response Data",
        "func": "let states = {};\n\nif (msg.statusCode === 200){\n    var element_data = JSON.parse(msg.payload);\n    states[\"energyCounterIn\"] = parseFloat(element_data.energyCounterIn).toFixed(2); \n    states[\"energyCounterOut\"] = parseFloat(element_data.energyCounterOut).toFixed(2); \n    states[\"power\"] = element_data.power;\n    states[\"local_api_connected\"] = true;\n}else{\n    states[\"local_api_connected\"] = false;\n}\n\nmsg.element.local_api_connected = states[\"local_api_connected\"];\nlet obj = {\n    \"states\": states,\n    \"id\": msg.element.id,\n    \"type\": msg.element.type\n};\n\nmsg.data = obj;\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "0f752f2fa34c413f",
        "type": "function",
        "z": "6c976fce6ecbc4d5",
        "name": "Init",
        "func": "msg.counter = 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 40,
        "wires": [
            [
                "8c7b9c32f0228166"
            ]
        ]
    },
    {
        "id": "3cc761dbf7e5ff6c",
        "type": "function",
        "z": "998ea21aa8546658",
        "name": "extractEntities",
        "func": "const groups = msg.groups;\n\nfunction findGroupByDeviceID(groupList, deviceID) {\n    return groupList.find(group => group.id === deviceID) || null;\n}\n\nfunction extractEntities(groupList, groupID, result = []) {\n    const group = findGroupByDeviceID(groupList, groupID);\n    if (group) {\n        group.entities.forEach(entity => {\n            if (entity.groupid) {\n                extractEntities(groupList, entity.groupid, result);\n            } else {\n                result.push({ deviceid: entity.deviceid });\n            }\n        });\n    }\n    return result;\n}\n\nconst updatedEntities = [];\ngroups.forEach(function (element) {\n    if (element.entities) {\n        const newEntities = [];\n        element.entities.forEach(function (entity) {\n            if (entity.groupid) {\n                const extractedEntities = extractEntities(groups, entity.groupid);\n                newEntities.push(...extractedEntities);\n            } else {\n                newEntities.push(entity);\n            }\n        });\n        element.entities = newEntities;\n        updatedEntities.push(...newEntities.filter(entity => !entity.groupid));\n    }\n});\n\nmsg.payload = groups;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 60,
        "wires": [
            [
                "0e3949e744012008"
            ]
        ]
    },
    {
        "id": "0e3949e744012008",
        "type": "function",
        "z": "998ea21aa8546658",
        "name": "groupBySubtype",
        "func": "function groupBySubtype(groups) {\n    const groupsBySubtype = {};\n\n    groups.forEach(group => {\n        const subtype = group.subtype;\n\n        if (groupsBySubtype[subtype]) {\n            groupsBySubtype[subtype].push(group);\n        } else {\n            groupsBySubtype[subtype] = [group];\n        }\n    });\n\n    const result = [];\n    for (const subtype in groupsBySubtype) {\n        result.push({\n            subtype: subtype,\n            group_elements: groupsBySubtype[subtype]\n        });\n    }\n\n    return result;\n}\n\nconst groups = msg.payload;\n\nconst configuration = global.get('configuration');\n// remove excluded groups\nlet groupsToRemove = [];\ngroups.forEach(function (element, index) {\n    if (configuration.devices.exclude.some(excludeItem => excludeItem.subtype === element.subtype)) {\n        groupsToRemove.push(index);\n    }\n});\ngroupsToRemove.reverse().forEach(function (index) {\n    groups.splice(index, 1);\n});\n\nconst groupsBySubtype = groupBySubtype(groups);\n\nmsg.payload = groupsBySubtype;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 60,
        "wires": [
            [
                "8dd0321bacc1a137"
            ]
        ]
    },
    {
        "id": "8dd0321bacc1a137",
        "type": "function",
        "z": "998ea21aa8546658",
        "name": "maingroups",
        "func": "const groups = msg.payload;\nconst language = msg.language;\n\n// create availability list\n//general\nlet avty_states_connected = [];\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/websocket\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/mqtt\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\n\ngroups.forEach(function (element, index) {\n    element.type = \"group\";\n    element.group_subtype = \"maingroup\";\n    const main_name = ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(element.type, global.get(\"language\"));\n    const sub_name = ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(element.subtype, global.get(\"language\"));\n    element.device_name = `${sub_name} ${main_name}`;\n    element.language = language;\n    element.manufacturer = \"everHome2MQTT\";\n    element.model = \"Group\";\n    element.via_device = \"everhome_central\";\n    element.main_topic = \"everhome/group\";\n    element.config = {};\n    element.uniq_id_main = `everhome_maingroup_${element.subtype}`;\n    element.config.avty = avty_states_connected;\n    element.states = {};\n    element.ts = {};\n    element.id = index + 1;\n\n    element.device_id = `everhome_maingroup_${element.subtype}_${element.id}`;\n});\n\nmsg.payload = groups;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 60,
        "wires": [
            [
                "917d33b1e9c1ad32"
            ]
        ]
    },
    {
        "id": "917d33b1e9c1ad32",
        "type": "function",
        "z": "998ea21aa8546658",
        "name": "availability",
        "func": "function findGatewayId(devices, deviceid) {\n    for (let i = 0; i < devices.length; i++) {\n        if (devices[i].id === deviceid) {\n            return devices[i].gatewayid;\n        }\n    }\n    return null;\n}\n\nconst groups = msg.payload;\nconst devices = msg.devices;\n\n// create availability list\n//general\nlet avty_states_connected = [];\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/websocket\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/mqtt\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\n\n// Search for the corresponding gateway of each device from the group\ngroups.forEach(function (element) {\n    element.group_elements.forEach(function (element) {\n        element.config = {};\n        const avty = [...avty_states_connected];\n        if (element.entities) {\n            element.entities.forEach(function (entity) {\n                const gatewayid = findGatewayId(devices, entity.deviceid);\n                const newEntry = {\n                    \"t\": `everhome/device/${gatewayid}/states/connected`,\n                    \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n                };\n                if (!avty.some(item => item.t === newEntry.t && item.val_tpl === newEntry.val_tpl)) {\n                    if (gatewayid !== undefined) {\n                        avty.push(newEntry);\n                    }\n                }\n            });\n        }\n        element.config.avty = avty;\n    });\n\n});\n\nmsg.payload = groups;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 60,
        "wires": [
            [
                "e5c0c55910e403a8"
            ]
        ]
    },
    {
        "id": "e5c0c55910e403a8",
        "type": "function",
        "z": "998ea21aa8546658",
        "name": "group_elements",
        "func": "function findeNameById(array, id) {\n    for (let i = 0; i < array.length; i++) {\n        if (array[i].id === id) {\n            return array[i].name;\n        }\n    }\n    return '';\n}\nfunction formatString(inputString, variables) {\n    var regex = /<([^>]+)>/g;\n    var result = inputString.replace(regex, function (match, placeholder) {\n        return variables[placeholder] !== undefined ? variables[placeholder] : '';\n    });\n    return result;\n}\n\nconst language = msg.language;\nlet rooms = msg.rooms;\nconst groups = msg.payload;\nconst configuration = msg.configuration;\n\nconst set_object_id = configuration.devices.set_object_id;\n\ngroups.forEach(function (element) {\n    element.group_elements.forEach(function (group_element) {\n\n        group_element.group_subtype = \"groupelement\";\n        group_element.set_object_id = set_object_id;\n        group_element.device_id = `everhome_maingroup_${group_element.subtype}_${element.id}`;\n        group_element.uniq_id_main = `everhome_${group_element.type}_id_${group_element.id}`;\n        group_element.room_name = findeNameById(rooms, group_element.roomid);\n\n        var variables = {\n            room_name: group_element.room_name,\n            device_name: group_element.name\n        };\n\n        const inputString = configuration.devices?.naming ?? group_element.room_name + \" - \" + group_element.name;\n        group_element.device_name = formatString(inputString, variables);\n\n    });\n\n});\n\nmsg.payload = groups;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "4be60172f36d36f3",
        "type": "function",
        "z": "515d7dc53c88348e",
        "name": "Prepare Request",
        "func": "const configuration = global.get('configuration');\nconst port_node_red = configuration.ports.nodeRed;\nvar endpoint = \"v1/json\";\n\nlet element = msg.element;\n\n/* Only try to connect to the local API when EcoTracker is connected to the cloud. \n   This is to ensure that the local IP address has been synchronized correctly. */\nif (element.states.connected){\n    const ip_address = element[\"ip-wifi\"];\n    let url = `http://${ip_address}/${endpoint}`;\n    const url_simulation = `http://${ip_address}:${port_node_red}/endpoint/${endpoint}`;\n\n    if (global.get(\"add_simu_devices\")) {\n        msg.url = url_simulation;\n    }else{\n        msg.url = url;\n    }\n    return msg;\n}    \n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 40,
        "wires": [
            [
                "6a055717539d8594"
            ]
        ]
    },
    {
        "id": "6a055717539d8594",
        "type": "http request",
        "z": "515d7dc53c88348e",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 40,
        "wires": [
            [
                "fecc94092cb543fe",
                "f38d69d205410f7a",
                "76089d53a2edc04b"
            ]
        ]
    },
    {
        "id": "6c029189a16d9f5f",
        "type": "delay",
        "z": "515d7dc53c88348e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 220,
        "wires": [
            [
                "4be60172f36d36f3"
            ]
        ]
    },
    {
        "id": "fecc94092cb543fe",
        "type": "function",
        "z": "515d7dc53c88348e",
        "name": "scan_interval",
        "func": "function getValueFromConfig(valuesArray, defaultValue, deviceId) {\n    for (let i = 0; i < valuesArray.length; i++) {\n        if (valuesArray[i].id === deviceId) {\n            return valuesArray[i].value;\n        }\n    }\n    return defaultValue;\n}\nconst FACTOR = 1000;\nconst configuration = global.get('configuration');\n\nlet valuesArray = configuration.devices.subtype.electricitymeter.ecotracker.scan_interval.device_id;\nlet defaultValue = configuration.devices.subtype.electricitymeter.ecotracker.scan_interval.default_value;\nlet deviceId = msg.element.id;\n\nconst scan_interval = getValueFromConfig(valuesArray, defaultValue, deviceId);\n\nnode.warn(scan_interval);\n\nif (msg.statusCode !== 200) {\n    msg.delay = scan_interval * FACTOR * msg.counter;\n    msg.counter ++;\n    node.warn(`Server Error: ${msg.url} - Status: ${msg.statusCode}. Next try in ${msg.delay / 1000} seconds`);\n}else{\n    msg.counter = 1;\n    msg.delay = scan_interval * FACTOR;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 100,
        "wires": [
            [
                "6c029189a16d9f5f"
            ]
        ]
    },
    {
        "id": "f38d69d205410f7a",
        "type": "function",
        "z": "515d7dc53c88348e",
        "name": "Prepare Response Data",
        "func": "let states = {};\n\nif (msg.statusCode === 200){\n    var element_data = JSON.parse(msg.payload);\n    states[\"energyCounterIn\"] = parseFloat(element_data.energyCounterIn).toFixed(2); \n    states[\"energyCounterOut\"] = parseFloat(element_data.energyCounterOut).toFixed(2); \n    states[\"power\"] = element_data.power;\n    states[\"local_api_connected\"] = true;\n}else{\n    states[\"local_api_connected\"] = false;\n}\n\nmsg.element.local_api_connected = states[\"local_api_connected\"];\nlet obj = {\n    \"states\": states,\n    \"id\": msg.element.id,\n    \"type\": msg.element.type\n};\n\nmsg.data = obj;\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "9ec1180e9db51a39",
        "type": "function",
        "z": "515d7dc53c88348e",
        "name": "Init",
        "func": "msg.counter = 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 40,
        "wires": [
            [
                "4be60172f36d36f3"
            ]
        ]
    },
    {
        "id": "76089d53a2edc04b",
        "type": "debug",
        "z": "515d7dc53c88348e",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 120,
        "wires": []
    },
    {
        "id": "bf867abc47d31e25",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "url",
        "func": "msg.url = \"https://everhome.cloud/device?include=properties\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1280,
        "wires": [
            [
                "1983d617fc5113d8"
            ]
        ]
    },
    {
        "id": "793e3443707a4160",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "url",
        "func": "msg.url = \"https://everhome.cloud/room?include=states.temperature,states.temperaturetarget\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1140,
        "wires": [
            [
                "1480899ffd47901b"
            ]
        ]
    },
    {
        "id": "d04a2eea4aaf4f4e",
        "type": "link in",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "link in - Init",
        "links": [
            "a3ea0b2a99f1cfbe"
        ],
        "x": 275,
        "y": 260,
        "wires": [
            [
                "4258efe53ed8d019"
            ]
        ]
    },
    {
        "id": "342314729ff35403",
        "type": "inject",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 160,
        "wires": [
            [
                "e34ce1c4ca23f6a8"
            ]
        ]
    },
    {
        "id": "de72a50521fb415e",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "wait for mqtt connection",
        "func": "node.log(\"wait for mqtt connection\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1820,
        "wires": [
            [
                "0c02ba2c513add9d"
            ]
        ]
    },
    {
        "id": "d0789705000c11aa",
        "type": "debug",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 680,
        "wires": []
    },
    {
        "id": "1162d0539431a93a",
        "type": "switch",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "mqtt_state",
        "property": "mqtt_state",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "online",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "offline",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 1640,
        "wires": [
            [
                "c4d8dcc2c7889573",
                "1e0796d8e5cd68e4"
            ],
            [
                "de72a50521fb415e"
            ]
        ]
    },
    {
        "id": "a1abd9b783de3a99",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "Central",
        "func": "function joinTopics(...topics) {\n    return topics.join('/');\n}\nif (!msg.central) {\n    msg.central = {};\n}\n\nmsg.central.device_name = global.get(\"device_main_name\");\nmsg.central.sw_version = global.get(\"sw_version\");\n\nconst subtypeName = \"central\";\nconst init_config_done = \"config.central_done\";\nmsg.init_config_done = init_config_done;\nmsg.central.uniq_id = \"everhome\" + \"_\" + \"central\";\nmsg.main_state_topic = joinTopics(\"everhome\", subtypeName);\n      \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1640,
        "wires": [
            [
                "36d70bfe397ec698"
            ]
        ]
    },
    {
        "id": "36d70bfe397ec698",
        "type": "link out",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "link out - Central",
        "mode": "link",
        "links": [
            "5999576fec1bf251"
        ],
        "x": 1535,
        "y": 1640,
        "wires": []
    },
    {
        "id": "f07ba875c965c51c",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Token still valid",
        "func": "msg.payload = 'Token still valid';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 940,
        "wires": [
            [
                "a1861f3938782cd2",
                "b089ce80eead2b08",
                "b4622b2ab077c11f"
            ]
        ]
    },
    {
        "id": "325cb81e1547f3a6",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Token expired",
        "func": "msg.payload = 'Token expired';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 880,
        "wires": [
            [
                "c0f541b9f5a5e0df"
            ]
        ]
    },
    {
        "id": "afa7590f7a5eee98",
        "type": "switch",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "property": "refresh_token",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 900,
        "wires": [
            [
                "325cb81e1547f3a6"
            ],
            [
                "f07ba875c965c51c"
            ]
        ]
    },
    {
        "id": "fe9833dbbdadf349",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Check token - startup",
        "func": "let currentTime = new Date();\nlet expiresTime = global.get('expires_at');\n\nlet timeDiff = Math.abs(expiresTime.getTime() - currentTime.getTime());\n\nlet seconds = Math.floor(timeDiff / 1000);\nlet minutes = Math.floor(seconds / 60);\nlet hours = Math.floor(minutes / 60);\nseconds = seconds % 60;\nminutes = minutes % 60;\n\nlet timeDiffString = hours + \" Stunden \" + minutes + \" Minuten \" + seconds + \" Sekunden\";\n\nconst token_ok = global.get('tokenok');\n\nif (currentTime > expiresTime || token_ok === false){\n    if (token_ok === false){\n        node.log(\"token not ok\");\n    }\n    if (currentTime > expiresTime) {\n        node.log(`Token expired: currentTime: ${currentTime}; expiresTime: ${expiresTime}`);\n    }\n    msg.refresh_token = true;\n}else{\n    msg.refresh_token = false;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 900,
        "wires": [
            [
                "afa7590f7a5eee98"
            ]
        ]
    },
    {
        "id": "c0f541b9f5a5e0df",
        "type": "switch",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "yaml_config_loaded?",
        "property": "yaml_config_loaded",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 400,
        "y": 660,
        "wires": [
            [
                "800f163431dd79b4"
            ]
        ]
    },
    {
        "id": "1e16984fcddff6e3",
        "type": "comment",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "V2.0.3",
        "info": "",
        "x": 130,
        "y": 100,
        "wires": []
    },
    {
        "id": "eb59a6655b4c0b30",
        "type": "inject",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "x": 150,
        "y": 900,
        "wires": [
            [
                "fe9833dbbdadf349"
            ]
        ]
    },
    {
        "id": "7b40798b72bdb20e",
        "type": "inject",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "c0f541b9f5a5e0df"
            ]
        ]
    },
    {
        "id": "8c6ad13090ef2da3",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "set msg.oauth2Request",
        "func": "msg.oauth2Request = {\n    \"access_token_url\": \"https://everhome.cloud/oauth2/token\",\n    \"credentials\": {\n        \"grant_type\": \"refresh_token\",\n        \"client_id\": msg.client_id,\n        \"client_secret\": msg.client_secret,\n        \"scope\": \"read_write\",\n        \"refresh_token\": msg.refresh_token\n    },\n};\nnode.log(\"request access token\")\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 720,
        "wires": [
            [
                "861ed2f6aaa6aa75"
            ]
        ]
    },
    {
        "id": "7a69df272c1dd0bb",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Set access Token",
        "func": "var currentTime = new Date();\nvar curTime = currentTime.getTime();\nvar expires_at = new Date(curTime + parseInt(msg.oauth2Response.expires_in) * 1000);\n\nif (msg.oauth2Response.access_token) {\n    global.set('accessToken', msg.oauth2Response.access_token);\n    global.set('expires_at', expires_at);\n    global.set('tokenok', true);\n}else{\n    global.set('tokenok', false);\n}\n\nif (msg && msg.oauth2Response) {\n    if (msg.oauth2Response.status) {\n        node.log(\"Status: \" + msg.oauth2Response.status);\n    }\n    if (msg.oauth2Response.status && msg.oauth2Response.status.Text) {\n        node.log(\"Status Text: \" + msg.oauth2Response.status.Text);\n    }\n    if (msg.oauth2Response.access_token) {\n        node.log(\"Access Token: \" + msg.oauth2Response.access_token);\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 800,
        "wires": [
            [
                "d0789705000c11aa",
                "ea43ba0a08935eb3",
                "fe9833dbbdadf349"
            ]
        ]
    },
    {
        "id": "b4622b2ab077c11f",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Add Bearer Token",
        "func": "const token = global.get('accessToken');\n\nif (token) {\n    msg.headers = {\n        'Authorization': `Bearer ${token}`,\n        'User-Agent': 'everHome2MQTT'\n    };\n    return msg;\n} else {\n    node.error('Token not found');\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1140,
        "wires": [
            [
                "793e3443707a4160"
            ]
        ]
    },
    {
        "id": "8023b8eb245702ba",
        "type": "inject",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1140,
        "wires": [
            [
                "b4622b2ab077c11f"
            ]
        ]
    },
    {
        "id": "a4a99283e864ee6d",
        "type": "comment",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Refresh Token",
        "info": "",
        "x": 150,
        "y": 600,
        "wires": []
    },
    {
        "id": "f1467554a02ac615",
        "type": "comment",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Request Rooms",
        "info": "",
        "x": 160,
        "y": 1080,
        "wires": []
    },
    {
        "id": "c48a2a38a107d973",
        "type": "comment",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Start Sequence",
        "info": "",
        "x": 160,
        "y": 840,
        "wires": []
    },
    {
        "id": "1480899ffd47901b",
        "type": "http request",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "room",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 970,
        "y": 1140,
        "wires": [
            [
                "6fb4bb42b70dcb73"
            ]
        ]
    },
    {
        "id": "1799d4477a50f3fe",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "global.set:rooms",
        "func": "global.set('rooms', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 1140,
        "wires": [
            [
                "60d5001a4aa999ac",
                "f979137ad08b5745"
            ]
        ]
    },
    {
        "id": "13b5156f1cdba658",
        "type": "inject",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1640,
        "wires": [
            [
                "1162d0539431a93a"
            ]
        ]
    },
    {
        "id": "c4d8dcc2c7889573",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "Prepare Device Data",
        "func": "function findeNameById(array, id) {\n    for (let i = 0; i < array.length; i++) {\n        if (array[i].id === id) {\n            return array[i].name;\n        }\n    }\n    return ''; \n}\nfunction formatString(inputString, variables) {\n  var regex = /<([^>]+)>/g;\n  var result = inputString.replace(regex, function(match, placeholder) {\n    return variables[placeholder] !== undefined ? variables[placeholder] : '';\n  });\n  return result;\n}\n\nfunction findGatewayId(devices, deviceid) {\n    for (let i = 0; i < devices.length; i++) {\n        if (devices[i].id === deviceid) {\n            return devices[i].gatewayid;\n        }\n    }\n    return null;\n}\nconst findValueByKey = (properties, keyToFind, defaultValue) => {\n    if (properties === undefined || properties === null) {\n        return defaultValue !== undefined ? defaultValue : 'unknown value - no default';\n    }\n    const foundObject = properties.find(item => item.key === keyToFind);\n    return foundObject ? foundObject.value : (defaultValue !== undefined ? defaultValue : 'unknown value - no default');\n};\n\nlet rooms = global.get('rooms');\nconst configuration = global.get('configuration');\n\n// add simu devices\nif (global.get(\"add_simu_devices\")) {\n    const merged_devices = global.get(\"devices\").concat(global.get(\"simu_devices\"));\n    global.set('devices', merged_devices);\n}\nlet devices = global.get('devices');\n\n// create availability list\ndevices = global.get('devices');\nlet avty_states_connected = [];\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/websocket\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/mqtt\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\n\n// add availability list to devices \ndevices.forEach(function(element) {\n    element.config = {};\n    const avty = [...avty_states_connected];\n\n    // add availability for gateway - device\n    // Sometimes the EcoTracker (product ID 414) has a gateway ID. This is a bug that needs to be ignored.\n    if (!element.entities && element.gatewayid && element.productid !== 414 ) {\n        const newEntry = {\n            \"t\": `everhome/device/${element.gatewayid}/states/connected`,\n            \"val_tpl\": `{{'online' if value_json.value == true else 'offline'}}`\n        };\n        if (!avty.some(item => item.t === newEntry.t && item.val_tpl === newEntry.val_tpl)) {\n            avty.push(newEntry);\n        }\n    }\n\n    // add availability for Ecotracker - device\n    if (element.productid === 414) {\n        const newEntry = {\n            \"t\": `everhome/device/${element.id}/states/connected`,\n            \"val_tpl\": `{{'online' if value_json.value == true else 'offline'}}`\n        };\n        if (!avty.some(item => item.t === newEntry.t && item.val_tpl === newEntry.val_tpl)) {\n            avty.push(newEntry);\n        }\n    }\n    element.config.avty = avty;\n});\n\n// add manufacturer & model\ndevices.forEach(function(element) {\n    const set_object_id = configuration.devices.set_object_id;\n    const language = global.get('language');\n    element.set_object_id = set_object_id;\n\n    element.device_id = `everhome_${element.type}_${element.id}`;\n    element.uniq_id_main = `everhome_${element.type}_id_${element.id}`;\n\n    element.room_name = findeNameById(rooms, element.roomid);\n    \n    var variables = {\n        room_name: element.room_name,\n        device_name: element.name\n    };\n    const inputString = configuration.devices?.naming ?? element.room_name + \" - \" + element.name;\n    element.device_name = formatString(inputString, variables);\n    \n    element.language = language;\n    \n    if (element.type === 'device'){\n        element.manufacturer = findValueByKey(element.properties, 'manufacturername', 'unknow manufacturername');\n        element.model = findValueByKey(element.properties, 'productname', 'unknow productname');\n\n        if (element.subtype === \"gateway\" || element.productid === 414) { // gateway or EcoTracker \n            const central_device_id = \"everhome_central\";\n            element.via_device = central_device_id;\n        }else{\n            element.via_device = `everhome_device_${element.gatewayid}`;\n        }        \n        element.main_topic = \"everhome/device\";\n    }  \n\n    if (element.subtype === 'motiondetector' ){\n        element.states.motion = false;\n    }\n\n    if (element.subtype === 'sender') {\n        element.states.action = null;    \n    }\n});\n\n// remove excluded devices\nlet deviceToRemove = [];\ndevices.forEach(function (element, index) {\n    if (configuration.devices.exclude.some(excludeItem => excludeItem.subtype === element.subtype)) {\n        deviceToRemove.push(index);\n    }\n});\ndeviceToRemove.reverse().forEach(function (index) {\n    devices.splice(index, 1);\n});\n\nglobal.set('devices', devices);\n\nmsg.payload = devices;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1640,
        "wires": [
            [
                "a1abd9b783de3a99",
                "4b6f7edcc6414f85"
            ]
        ]
    },
    {
        "id": "4258efe53ed8d019",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Init",
        "func": "global.set(\"config\", {\n    central_done: false,\n    gateways_done: false,\n    all_other_devices_done: false,\n});\n\nglobal.set(\"init_running\", false);\nglobal.set(\"all_configs_done\",false);\n\nglobal.set(\"electricitymeter_first_init_done\", false);\nglobal.set(\"yaml_config_loaded\", false);\nglobal.set(\"tokenok\", false);\nglobal.set(\"expires_at\",new Date());\nglobal.set(\"configuration\", \"\");\nglobal.set(\"first\",false);\n\nglobal.set(\"push_counter\", 0);\nglobal.set(\"subscription_successful\", false);\nglobal.set(\"subscription_running\", false);\n\nglobal.set(\"mqtt_state\",\"offline\");\nglobal.set(\"rest_api_state\",\"offline\");\n\nglobal.set(\"last_ecotracker_local_api_heartbeat\", {});\n\nglobal.set('hvac_states', []);\n\nglobal.set(\"device_main_name\", \"everHome2MQTT\")\nglobal.set(\"sw_version\", \"2.0.3\")\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 220,
        "wires": [
            [
                "d7aad541baeb73aa"
            ]
        ]
    },
    {
        "id": "e02295f64a2c9029",
        "type": "inject",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "4258efe53ed8d019"
            ]
        ]
    },
    {
        "id": "10445f5b24b04d9d",
        "type": "comment",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Init",
        "info": "",
        "x": 130,
        "y": 160,
        "wires": []
    },
    {
        "id": "f4627a01d246653f",
        "type": "inject",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1280,
        "wires": [
            [
                "f979137ad08b5745"
            ]
        ]
    },
    {
        "id": "f979137ad08b5745",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Add Bearer Token",
        "func": "const token = global.get('accessToken');\n\nif (token) {\n    msg.headers = {\n        'Authorization': `Bearer ${token}`,\n        'User-Agent': 'everHome2MQTT'\n    };    \n    return msg;\n} else {\n    node.error('Token not found');\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1280,
        "wires": [
            [
                "bf867abc47d31e25"
            ]
        ]
    },
    {
        "id": "1983d617fc5113d8",
        "type": "http request",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "device",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 970,
        "y": 1280,
        "wires": [
            [
                "1b605a836740b894"
            ]
        ]
    },
    {
        "id": "fe08da3e7093e838",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "global.set:devices",
        "func": "global.set('devices', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1280,
        "wires": [
            [
                "97313cbe6e36e2fd",
                "9306234cda912d58"
            ]
        ]
    },
    {
        "id": "ae3beeec5aa607cf",
        "type": "comment",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Request Devices",
        "info": "",
        "x": 160,
        "y": 1220,
        "wires": []
    },
    {
        "id": "97313cbe6e36e2fd",
        "type": "debug",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1280,
        "wires": []
    },
    {
        "id": "60d5001a4aa999ac",
        "type": "debug",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1140,
        "wires": []
    },
    {
        "id": "6323ad5943a4a538",
        "type": "link in",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "link in - Get Subtypes",
        "links": [
            "cc76ee9e2b84b5d9"
        ],
        "x": 195,
        "y": 1680,
        "wires": [
            [
                "1162d0539431a93a"
            ]
        ]
    },
    {
        "id": "e34ce1c4ca23f6a8",
        "type": "file",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "filename": "/homeassistant/everHome2MQTT/topics.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 670,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "d7aad541baeb73aa",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Settings",
        "func": "const language = 'de';// de,en,fr,it\nglobal.set('test',false);\nglobal.set(\"add_simu_devices\", false);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 220,
        "wires": [
            [
                "ae940d48f0775e5a"
            ]
        ]
    },
    {
        "id": "edad0a7c981c024c",
        "type": "file in",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "filename": "/homeassistant/everHome2MQTT/config.yaml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 800,
        "y": 340,
        "wires": [
            [
                "4737b8f3facbdff9"
            ]
        ]
    },
    {
        "id": "4737b8f3facbdff9",
        "type": "yaml",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "property": "payload",
        "name": "",
        "x": 1110,
        "y": 300,
        "wires": [
            [
                "c63f7420338ed62d"
            ]
        ]
    },
    {
        "id": "1f370df7dded8d0d",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "global.set('configuration', msg.payload);",
        "func": "global.set('configuration', msg.payload);\nglobal.set('language', msg.payload.language);\nglobal.set('yaml_config_loaded', true);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "6fb4bb42b70dcb73",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "check statusCode",
        "func": "if (msg.statusCode === 200){\n    return msg;\n}else{\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1140,
        "wires": [
            [
                "1799d4477a50f3fe"
            ]
        ]
    },
    {
        "id": "ea43ba0a08935eb3",
        "type": "link out",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "link out - Connect(Refresh Websocket)",
        "mode": "link",
        "links": [
            "b595bc23a32bd2af"
        ],
        "x": 1995,
        "y": 740,
        "wires": []
    },
    {
        "id": "d49769c6a79c5c96",
        "type": "link in",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "link in - restart",
        "links": [
            "fab294fcd252736a",
            "b3b32bd5417396de",
            "6a98eb05e3436cd0"
        ],
        "x": 265,
        "y": 960,
        "wires": [
            [
                "fe9833dbbdadf349",
                "0812757ef641465c"
            ]
        ]
    },
    {
        "id": "1b605a836740b894",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "check statusCode",
        "func": "if (msg.statusCode === 200){\n    return msg;\n}else{\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1280,
        "wires": [
            [
                "fe08da3e7093e838"
            ]
        ]
    },
    {
        "id": "a1861f3938782cd2",
        "type": "link out",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "link out - Start Heartbeat",
        "mode": "link",
        "links": [
            "1f6146b7bd3a1b34",
            "3fc93b54ac53c6cf",
            "90dab40f588294ce"
        ],
        "x": 1135,
        "y": 940,
        "wires": []
    },
    {
        "id": "0c02ba2c513add9d",
        "type": "delay",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 1820,
        "wires": [
            [
                "1162d0539431a93a"
            ]
        ]
    },
    {
        "id": "b089ce80eead2b08",
        "type": "delay",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1020,
        "wires": [
            [
                "56536bc20d42155c"
            ]
        ]
    },
    {
        "id": "56536bc20d42155c",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Check token - cyclic",
        "func": "let currentTime = new Date();\nlet expiresTime = global.get('expires_at');\n\nlet timeDiff = Math.abs(expiresTime.getTime() - currentTime.getTime());\n\nlet seconds = Math.floor(timeDiff / 1000);\nlet minutes = Math.floor(seconds / 60);\nlet hours = Math.floor(minutes / 60);\nseconds = seconds % 60;\nminutes = minutes % 60;\n\nlet timeDiffString = hours + \" Stunden \" + minutes + \" Minuten \" + seconds + \" Sekunden\";\n\nconst token_ok = global.get('tokenok');\n\nif (currentTime > expiresTime || token_ok === false){\n    if (token_ok === false){\n        node.log(\"token not ok\");\n    }\n    if (currentTime > expiresTime) {\n        node.log(`Token expired: currentTime: ${currentTime}; expiresTime: ${expiresTime}`);\n    }\n    msg.refresh_token = true;\n}else{\n    msg.refresh_token = false;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1020,
        "wires": [
            [
                "3ec81652c5faeea1"
            ]
        ]
    },
    {
        "id": "3ec81652c5faeea1",
        "type": "switch",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "property": "refresh_token",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 1020,
        "wires": [
            [
                "afa7590f7a5eee98",
                "ed283429a698138f"
            ],
            [
                "b089ce80eead2b08",
                "83e0939569fa4e94"
            ]
        ]
    },
    {
        "id": "593f3d1b2213a2b3",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "url",
        "func": "msg.url = \"https://everhome.cloud/group?include=properties\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1400,
        "wires": [
            [
                "df36c817baf4123d"
            ]
        ]
    },
    {
        "id": "1c645c33763fab40",
        "type": "inject",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1400,
        "wires": [
            [
                "9306234cda912d58"
            ]
        ]
    },
    {
        "id": "9306234cda912d58",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Add Bearer Token",
        "func": "const token = global.get('accessToken');\n\nif (token) {\n    msg.headers = {\n        'Authorization': `Bearer ${token}`,\n        'User-Agent': 'everHome2MQTT'\n    };\n    return msg;\n} else {\n    node.error('Token not found');\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1400,
        "wires": [
            [
                "593f3d1b2213a2b3"
            ]
        ]
    },
    {
        "id": "df36c817baf4123d",
        "type": "http request",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "group",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 970,
        "y": 1400,
        "wires": [
            [
                "97aa4a96423da545"
            ]
        ]
    },
    {
        "id": "bd51bdc18c6b80c6",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "global.set:groups",
        "func": "global.set('groups', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1400,
        "wires": [
            [
                "2ac1db1ca066ba7a",
                "2662322312b0e379"
            ]
        ]
    },
    {
        "id": "65bd60ba01a0277f",
        "type": "comment",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Request Groups",
        "info": "",
        "x": 160,
        "y": 1340,
        "wires": []
    },
    {
        "id": "2ac1db1ca066ba7a",
        "type": "debug",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1400,
        "wires": []
    },
    {
        "id": "97aa4a96423da545",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "check statusCode",
        "func": "if (msg.statusCode === 200){\n    return msg;\n}else{\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1400,
        "wires": [
            [
                "bd51bdc18c6b80c6"
            ]
        ]
    },
    {
        "id": "861ed2f6aaa6aa75",
        "type": "oauth2",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Set by msg.oauth2Request",
        "container": "oauth2Response",
        "grant_type": "set_by_credentials",
        "access_token_url": "http://localhost:3000/oauth/token ",
        "authorization_endpoint": "",
        "open_authentication": "",
        "username": "pedroet",
        "password": "",
        "client_id": "confidentialApplication",
        "client_secret": "topSecret",
        "scope": "*",
        "resource": "",
        "proxy": "",
        "senderr": false,
        "client_credentials_in_body": true,
        "rejectUnauthorized": true,
        "headers": {},
        "x": 1560,
        "y": 720,
        "wires": [
            [
                "7a69df272c1dd0bb"
            ]
        ]
    },
    {
        "id": "1e0796d8e5cd68e4",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "Prepare Room Data",
        "func": "function filterObjects(objArray) {\n    const filteredList = objArray.filter(obj =>\n        typeof obj.states !== 'undefined' &&\n        typeof obj.states.temperature !== 'undefined' &&\n        typeof obj.states.temperaturetarget !== 'undefined'\n    );\n    return filteredList;\n}\n\nlet rooms = global.get('rooms');\n\n// create availability list\nlet avty_states_connected = [];\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/websocket\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/mqtt\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\n\nrooms.forEach(function(element) {\n    element.config = {};\n    const avty = [...avty_states_connected];\n    \n    const configuration = global.get('configuration');\n    const set_object_id = configuration.devices.set_object_id;\n    element.set_object_id = set_object_id;\n    element.device_id = `everhome_${element.type}_${element.id}`;\n    element.uniq_id_main = `everhome_${element.type}_id_${element.id}`;  \n    element.config.avty = avty;  \n});\n\nmsg.room_overrides = filterObjects(rooms);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1720,
        "wires": [
            [
                "951449e6169ec919"
            ]
        ]
    },
    {
        "id": "bb5ddb07bdf0b155",
        "type": "http request",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 660,
        "wires": [
            [
                "d3e7197d8fafcc05"
            ]
        ]
    },
    {
        "id": "800f163431dd79b4",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "url",
        "func": "const configuration = global.get('configuration');\nconst port_everHome2MQTT = configuration.ports.everHome2MQTT;\nlet ip = global.get(\"internalIPvX\");\n\n//ip = \"192.168.178.34\";\nmsg.requestTimeout = 5000;\nmsg.url = `http://${ip}:${port_everHome2MQTT}/tokendata`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 660,
        "wires": [
            [
                "bb5ddb07bdf0b155"
            ]
        ]
    },
    {
        "id": "20f8aaeba6690ac5",
        "type": "json",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1070,
        "y": 660,
        "wires": [
            [
                "757ff4850050a702"
            ]
        ]
    },
    {
        "id": "757ff4850050a702",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "oAuth Parameters",
        "func": "msg.client_id = msg.payload.client_id;\nmsg.client_secret = msg.payload.client_secret;\nmsg.refresh_token = msg.payload.refresh_token;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 660,
        "wires": [
            [
                "8c6ad13090ef2da3"
            ]
        ]
    },
    {
        "id": "d3e7197d8fafcc05",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "check statusCode",
        "func": "if (msg.statusCode === 200){\n    return msg;\n}else{\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 660,
        "wires": [
            [
                "20f8aaeba6690ac5"
            ]
        ]
    },
    {
        "id": "0812757ef641465c",
        "type": "debug",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 960,
        "wires": []
    },
    {
        "id": "c63f7420338ed62d",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "validate",
        "func": "function isInRange(num, min, max) {\n    return num >= min && num <= max;\n}\nfunction convertToBoolean(input) {\n    if (!isNaN(parseInt(input))) {\n        return parseInt(input) === 1 ? true : (parseInt(input) === 0 ? false : null);\n    }\n    input = input.trim();\n    if (input === \"true\") {\n        return true;\n    } else if (input === \"false\") {\n        return false;\n    } else {\n        return null;\n    }\n}\nfunction isEmptyObject(obj) {\n    for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst MIN_PORT = 0;\nconst MAX_PORT = 65535;\nconst MIN_SCAN_INTERVAL = 1;\nconst MAX_SCAN_INTERVAL = 600;\nconst MIN_RESET_AFTER = 1;\nconst MAX_RESET_AFTER = 600;\nconst MIN_STOP_TIME = 5;\nconst MAX_STOP_TIME = 30;\n\nlet boolean_value = \"\";\nlet struct = \"\";\n\nfunction validateYAML(config, defaultConfig) {\n\n    // config.language\n    if (!config.language) {\n        config.language = defaultConfig.language;\n        node.log(\"config.language not found, setting default configuration.\");\n    }\n\n    // config.language - check if valide\n    if (![\"en\", \"de\", \"fr\"].includes(config.language)) {\n        config.language = defaultConfig.language;\n        node.log(\"language not valide (allowed: en | de | fr), setting default configuration.\");\n    }\n\n    // ports\n    if (typeof config.ports !== 'object') {\n        config.ports = defaultConfig.ports;\n        node.log(\"ports is not an object, setting default configuration.\");\n    }\n\n    // ports.everHome2MQTT\n    if (!config.ports.everHome2MQTT) {\n        config.ports.everHome2MQTT = defaultConfig.ports.everHome2MQTT;\n        node.log(\"ports.everHome2MQTT not found, setting default configuration.\");\n    }\n\n    // ports.everHome2MQTT - isInteger\n    if (!Number.isInteger(config.ports.everHome2MQTT)) {\n\n        let value = parseInt(config.ports.everHome2MQTT);\n        if (!isNaN(value)) {\n            config.ports.everHome2MQTT = value;\n        } else {\n            config.ports.everHome2MQTT = defaultConfig.ports.everHome2MQTT;\n            node.log(`ports.everHome2MQTT is not Integer (allowed example: 10 | \"10\" | \"10abc\"), setting default configuration.`);\n        }\n    }\n\n    // ports.everHome2MQTT - isInRange\n    if (!isInRange(config.ports.everHome2MQTT, MIN_PORT, MAX_PORT)) {\n        config.ports.everHome2MQTT = defaultConfig.ports.everHome2MQTT;\n        node.log(`ports.everHome2MQTT is out of range. Min = ${MIN_PORT} | Max = ${MAX_PORT}. Value was set to default configuration.`);\n    }\n\n    // ports.nodeRed\n    if (!config.ports.nodeRed) {\n        config.ports.nodeRed = defaultConfig.ports.nodeRed;\n        node.log(\"ports.nodeRed not found, setting default configuration.\");\n    }\n\n    // ports.nodeRed - isInteger\n    if (!Number.isInteger(config.ports.nodeRed)) {\n\n        let value = parseInt(config.ports.nodeRed);\n        if (!isNaN(value)) {\n            config.ports.nodeRed = value;\n        } else {\n            config.ports.nodeRed = defaultConfig.ports.nodeRed;\n            node.log(`ports.nodeRed is not Integer (allowed example: 10 | \"10\" | \"10abc\"), setting default configuration.`);\n        }\n    }\n\n    // ports.nodeRed - isInRange\n    if (!isInRange(config.ports.nodeRed, MIN_PORT, MAX_PORT)) {\n        config.ports.nodeRed = defaultConfig.ports.nodeRed;\n        node.log(`ports.nodeRed is out of range. Min = ${MIN_PORT} | Max = ${MAX_PORT}. Value was set to default configuration.`);\n    }\n\n    // websocket\n    if (typeof config.websocket !== 'object') {\n        config.websocket = defaultConfig.websocket;\n        node.log(\"websocket is not an object, setting default configuration.\");\n    }\n\n    // websocket.scan_interval\n    if (!config.websocket.scan_interval) {\n        config.websocket.scan_interval = defaultConfig.websocket.scan_interval;\n        node.log(\"websocket.scan_interval not found, setting default configuration.\");\n    }\n\n    // websocket.scan_interval - isInteger\n    if (!Number.isInteger(config.websocket.scan_interval)) {\n\n        let value = parseInt(config.websocket.scan_interval);\n        if (!isNaN(value)) {\n            config.websocket.scan_interval = value;\n        } else {\n            config.websocket.scan_interval = defaultConfig.websocket.scan_interval;\n            node.log(`websocket.scan_interval is not Integer (allowed example: 10 | \"10\" | \"10abc\"), setting default configuration.`);\n        }\n    }\n\n    // websocket.scan_interval - isInRange\n    if (!isInRange(config.websocket.scan_interval, MIN_SCAN_INTERVAL, MAX_SCAN_INTERVAL)) {\n        config.websocket.scan_interval = defaultConfig.websocket.scan_interval;\n        node.log(`websocket.scan_interval is out of range. Min = ${MIN_SCAN_INTERVAL} | Max = ${MAX_SCAN_INTERVAL}. Value was set to default configuration.`);\n    }\n\n    // mqtt\n    if (typeof config.mqtt !== 'object') {\n        config.mqtt = defaultConfig.mqtt;\n        node.log(\"mqtt is not an object, setting default configuration.\");\n    }\n\n    // mqtt.scan_interval\n    if (!config.mqtt.scan_interval) {\n        config.mqtt.scan_interval = defaultConfig.mqtt.scan_interval;\n        node.log(\"mqtt.scan_interval not found, setting default configuration.\");\n    }\n\n    // mqtt.scan_interval - isInteger\n    if (!Number.isInteger(config.mqtt.scan_interval)) {\n\n        let value = parseInt(config.mqtt.scan_interval);\n        if (!isNaN(value)) {\n            config.mqtt.scan_interval = value;\n        } else {\n            config.mqtt.scan_interval = defaultConfig.mqtt.scan_interval;\n            node.log(`mqtt.scan_interval is not Integer (allowed example: 10 | \"10\" | \"10abc\"), setting default configuration.`);\n        }\n    }\n\n    // mqtt.scan_interval - isInRange\n    if (!isInRange(config.mqtt.scan_interval, MIN_SCAN_INTERVAL, MAX_SCAN_INTERVAL)) {\n        config.mqtt.scan_interval = defaultConfig.mqtt.scan_interval;\n        node.log(`mqtt.scan_interval is out of range. Min = ${MIN_SCAN_INTERVAL} | Max = ${MAX_SCAN_INTERVAL}. Value was set to default configuration.`);\n    }\n\n    // mqtt.retain\n    if (typeof config.mqtt.retain !== 'object') {\n        config.mqtt.retain = defaultConfig.mqtt.retain;\n        node.log(\"mqtt.retain is not an object, setting default configuration.\");\n    }\n\n    // mqtt.retain.topics\n    if (typeof config.mqtt.retain.topics !== 'object') {\n        config.mqtt.retain.topics = defaultConfig.mqtt.retain.topics;\n        node.log(\"mqtt.retain.topics is not an object, setting default configuration.\");\n    }\n\n    // mqtt.retain.topics.config\n    boolean_value = \"config\";\n    if (config.mqtt.retain.topics[boolean_value] === undefined) {\n        config.mqtt.retain.topics[boolean_value] = defaultConfig.mqtt.retain.topics[boolean_value];\n        node.log(`mqtt.retain.topics.${boolean_value} is undefined, setting default configuration.`);\n    }\n\n    // mqtt.retain.topics.config\n    if (typeof config.mqtt.retain.topics[boolean_value] !== 'boolean') {\n        const test_boolean = convertToBoolean(config.mqtt.retain.topics[boolean_value]);\n        if (test_boolean !== null) {\n            config.mqtt.retain.topics[boolean_value] = test_boolean;\n        } else {\n            config.mqtt.retain.topics[boolean_value] = defaultConfig.mqtt.retain.topics[boolean_value];\n            node.log(`mqtt.retain.topics.${boolean_value} not valid boolean value (allowed: true/false | \"true\"/\"false\" | 1/0), setting default configuration.`);\n        }\n    }\n\n    // mqtt.retain.topics.state\n    boolean_value = \"state\";\n    if (config.mqtt.retain.topics[boolean_value] === undefined) {\n        config.mqtt.retain.topics[boolean_value] = defaultConfig.mqtt.retain.topics[boolean_value];\n        node.log(`mqtt.retain.topics.${boolean_value} is undefined, setting default configuration.`);\n    }\n\n    // mqtt.retain.topics.state\n    if (typeof config.mqtt.retain.topics[boolean_value] !== 'boolean') {\n        const test_boolean = convertToBoolean(config.mqtt.retain.topics[boolean_value]);\n        if (test_boolean !== null) {\n            config.mqtt.retain.topics[boolean_value] = test_boolean;\n        } else {\n            config.mqtt.retain.topics[boolean_value] = defaultConfig.mqtt.retain.topics[boolean_value];\n            node.log(`mqtt.retain.topics.${boolean_value} not valid boolean value (allowed: true/false | \"true\"/\"false\" | 1/0), setting default configuration.`);\n        }\n    }\n\n    // mqtt.retain.topics.command\n    boolean_value = \"command\";\n    if (config.mqtt.retain.topics[boolean_value] === undefined) {\n        config.mqtt.retain.topics[boolean_value] = defaultConfig.mqtt.retain.topics[boolean_value];\n        node.log(`mqtt.retain.topics.${boolean_value} is undefined, setting default configuration.`);\n    }\n\n    // mqtt.retain.topics.command\n    if (typeof config.mqtt.retain.topics[boolean_value] !== 'boolean') {\n        const test_boolean = convertToBoolean(config.mqtt.retain.topics[boolean_value]);\n        if (test_boolean !== null) {\n            config.mqtt.retain.topics[boolean_value] = test_boolean;\n        } else {\n            config.mqtt.retain.topics[boolean_value] = defaultConfig.mqtt.retain.topics[boolean_value];\n            node.log(`mqtt.retain.topics.${boolean_value} not valid boolean value (allowed: true/false | \"true\"/\"false\" | 1/0), setting default configuration.`);\n        }\n    }\n\n    // devices\n    if (typeof config.devices !== 'object') {\n        config.devices = defaultConfig.devices;\n        node.log(\"devices is not an object, setting default configuration.\");\n    }\n\n    // devices.naming\n    if (config.devices.naming === undefined) {\n        config.devices.naming = defaultConfig.devices.naming;\n        node.log(\"devices.naming is undefined, setting default configuration.\");\n    }\n\n    // devices.naming\n    if (typeof config.devices.naming !== 'string') {\n        config.devices.naming = defaultConfig.devices.naming;\n        node.log(\"devices.naming is not an String, setting default configuration.\");\n    }\n\n    // devices.set_object_id\n    boolean_value = \"set_object_id\";\n    if (config.devices[boolean_value] === undefined) {\n        config.devices[boolean_value] = defaultConfig.devices[boolean_value];\n        node.log(`config.devices.${boolean_value} is undefined, setting default configuration.`);\n    }\n\n    // devices.set_object_id\n    if (typeof config.devices[boolean_value] !== 'boolean') {\n        const test_boolean = convertToBoolean(config.devices[boolean_value]);\n        if (test_boolean !== null) {\n            config.devices[boolean_value] = test_boolean;\n        } else {\n            config.devices[boolean_value] = defaultConfig.devices[boolean_value];\n            node.log(`config.devices.${boolean_value} not valid boolean value (allowed: true/false | \"true\"/\"false\" | 1/0), setting default configuration.`);\n        }\n    }\n\n    // devices.subtype\n    if (typeof config.devices.subtype !== 'object') {\n        config.devices.subtype = defaultConfig.devices.subtype;\n        node.log(\"devices.subtype is not an object, setting default configuration.\");\n    }\n\n    // devices.subtype.cover\n    if (typeof config.devices.subtype.cover !== 'object') {\n        config.devices.subtype.cover = defaultConfig.devices.subtype.cover;\n        node.log(\"devices.subtype.cover is not an object, setting default configuration.\");\n    }\n\n    // devices.subtype.cover.toggle_stop_time\n    if (!config.devices.subtype.cover.toggle_stop_time) {\n        config.devices.subtype.cover.toggle_stop_time = defaultConfig.devices.subtype.cover.toggle_stop_time;\n        node.log(\"devices.subtype.cover.toggle_stop_time not found, setting default configuration.\");\n    }\n\n    // devices.subtype.cover.toggle_stop_time - isInteger\n    if (!Number.isInteger(config.devices.subtype.cover.toggle_stop_time)) {\n\n        let value = parseInt(config.devices.subtype.cover.toggle_stop_time);\n        if (!isNaN(value)) {\n            config.devices.subtype.cover.toggle_stop_time = value;\n        } else {\n            config.devices.subtype.cover.toggle_stop_time = defaultConfig.devices.subtype.cover.toggle_stop_time;\n            node.log(`devices.subtype.cover.toggle_stop_time is not Integer (allowed example: 10 | \"10\" | \"10abc\"), setting default configuration.`);\n        }\n    }\n\n    // devices.subtype.cover.toggle_stop_time - isInRange\n    if (!isInRange(config.devices.subtype.cover.toggle_stop_time, MIN_STOP_TIME, MAX_STOP_TIME)) {\n        config.devices.subtype.cover.toggle_stop_time = defaultConfig.devices.subtype.cover.toggle_stop_time;\n        node.log(`devices.subtype.cover.toggle_stop_time is out of range. Min = ${MIN_STOP_TIME} | Max = ${MAX_STOP_TIME}. Value was set to default configuration.`);\n    }    \n\n    // devices.subtype.motiondetector\n    if (typeof config.devices.subtype.motiondetector !== 'object') {\n        config.devices.subtype.motiondetector = defaultConfig.devices.subtype.motiondetector;\n        node.log(\"devices.subtype.motiondetector is not an object, setting default configuration.\");\n    }\n\n    // devices.subtype.motiondetector.reset_after\n    if (typeof config.devices.subtype.motiondetector.reset_after !== 'object') {\n        config.devices.subtype.motiondetector.reset_after = defaultConfig.devices.subtype.motiondetector.reset_after;\n        node.log(\"devices.subtype.motiondetector.reset_after is not an object, setting default configuration.\");\n    }\n\n    // devices.subtype.motiondetector.reset_after.device_id    \n    if (!Array.isArray(config.devices.subtype.motiondetector.reset_after.device_id)) {\n        config.devices.subtype.motiondetector.reset_after.device_id = defaultConfig.devices.subtype.motiondetector.reset_after.device_id;\n        node.log(\"devices.subtype.motiondetector.reset_after.device_id is not an array, setting default configuration.\");\n    }\n\n    // devices.subtype.motiondetector.reset_after.device_id  - Array - id isInteger\n    config.devices.subtype.motiondetector.reset_after.device_id.forEach(function (element, index) {\n        if (!Number.isInteger(element.id)) {\n            let value = parseInt(element.id);\n            if (!isNaN(value)) {\n                element.id = value;\n            } else {\n                config.devices.subtype.motiondetector.reset_after.device_id.splice(index, 1);\n                node.log(`motiondetector.reset_after.device_id[${index}].id ${element.id} is not an Integer(allowed example: 10 | \"10\" | \"10abc\"), Index has been removed from the configuration.`);\n            }\n        }\n    });\n\n    // devices.subtype.motiondetector.reset_after.device_id  - Array - value isInteger\n    config.devices.subtype.motiondetector.reset_after.device_id.forEach(function (element, index) {\n        if (!Number.isInteger(element.value)) {\n            let value = parseInt(element.value);\n            if (!isNaN(value)) {\n                element.value = value;\n            } else {\n                node.log(`devices.subtype.motiondetector.reset_after.device_id[${index}].value ${element.value} of id ${element.id} is not Integer (allowed example: 10 | \"10\" | \"10abc\"), setting default configuration.`);\n                element.value = defaultConfig.devices.subtype.motiondetector.reset_after.default_value;\n            }\n        }\n    });\n\n    // devices.subtype.motiondetector.reset_after.device_id  - Array - value out of range\n    config.devices.subtype.motiondetector.reset_after.device_id.forEach(function (element, index) {\n        if (!isInRange(element.value, MIN_RESET_AFTER, MAX_RESET_AFTER)) {\n            node.log(`motiondetector.reset_after.device_id[${index}].value ${element.value} of id ${element.id} is out of range. Min = ${MIN_RESET_AFTER} | Max = ${MAX_RESET_AFTER}. Value was set to default value.`);\n            element.value = defaultConfig.devices.subtype.motiondetector.reset_after.default_value;\n        }\n    });\n\n    // devices.subtype.electricitymeter\n    if (typeof config.devices.subtype.electricitymeter !== 'object') {\n        config.devices.subtype.electricitymeter = defaultConfig.devices.subtype.electricitymeter;\n        node.log(\"devices.subtype.electricitymeter is not an object, setting default configuration.\");\n    }\n\n    // devices.subtype.electricitymeter.ecotracker\n    if (typeof config.devices.subtype.electricitymeter.ecotracker !== 'object') {\n        config.devices.subtype.electricitymeter.ecotracker = defaultConfig.devices.subtype.electricitymeter.ecotracker;\n        node.log(\"devices.subtype.electricitymeter.ecotracker is not an object, setting default configuration.\");\n    }\n\n    // devices.subtype.electricitymeter.ecotracker\n    if (isEmptyObject(config.devices.subtype.electricitymeter.ecotracker)) {\n        config.devices.subtype.electricitymeter.ecotracker = defaultConfig.devices.subtype.electricitymeter.ecotracker;\n        node.log(\"devices.subtype.electricitymeter.ecotracker is empty, setting default configuration.\");\n    }\n\n    // devices.subtype.electricitymeter.ecotracker.local_api\n    if (typeof config.devices.subtype.electricitymeter.ecotracker.local_api !== 'object') {\n        config.devices.subtype.electricitymeter.ecotracker.local_api = defaultConfig.devices.subtype.electricitymeter.ecotracker.local_api;\n        node.log(\"devices.subtype.electricitymeter.ecotracker.local_api is not an object, setting default configuration.\");\n    }\n\n    // devices.subtype.electricitymeter.ecotracker.local_api\n    if (isEmptyObject(config.devices.subtype.electricitymeter.ecotracker.local_api)) {\n        config.devices.subtype.electricitymeter.ecotracker.local_api = defaultConfig.devices.subtype.electricitymeter.ecotracker.local_api;\n        node.log(\"devices.subtype.electricitymeter.ecotracker.local_api is empty, setting default configuration.\");\n    }\n\n    // devices.subtype.electricitymeter.ecotracker.local_api.activated\n    if (typeof config.devices.subtype.electricitymeter.ecotracker.local_api.activated !== 'object') {\n        config.devices.subtype.electricitymeter.ecotracker.local_api.activated = defaultConfig.devices.subtype.electricitymeter.ecotracker.local_api.activated;\n        node.log(\"devices.subtype.electricitymeter.ecotracker.local_api.activated is not an object, setting default configuration.\");\n    }\n\n    // devices.subtype.electricitymeter.ecotracker.local_api.activated\n    if (isEmptyObject(config.devices.subtype.electricitymeter.ecotracker.local_api.activated)) {\n        config.devices.subtype.electricitymeter.ecotracker.local_api.activated = defaultConfig.devices.subtype.electricitymeter.ecotracker.local_api.activated;\n        node.log(\"devices.subtype.electricitymeter.ecotracker.local_api.activated is empty, setting default configuration.\");\n    }\n\n    // devices.subtype.electricitymeter.ecotracker.local_api.activated.device_id\n    if (!Array.isArray(config.devices.subtype.electricitymeter.ecotracker.local_api.activated.device_id)) {\n        config.devices.subtype.electricitymeter.ecotracker.local_api.activated.device_id = defaultConfig.devices.subtype.electricitymeter.ecotracker.local_api.activated.device_id;\n        node.log(\"devices.subtype.electricitymeter.ecotracker.local_api.activated.device_id is not an array, setting default configuration.\");\n    }\n\n    // devices.subtype.electricitymeter.ecotracker.local_api.activated.device_id  - Array - id isInteger\n    config.devices.subtype.electricitymeter.ecotracker.local_api.activated.device_id.forEach(function (element, index) {\n        if (!Number.isInteger(element.id)) {\n            let value = parseInt(element.id);\n            if (!isNaN(value)) {\n                element.id = value;\n            } else {\n                config.devices.subtype.electricitymeter.ecotracker.local_api.activated.device_id.splice(index, 1);\n                node.log(`devices.subtype.electricitymeter.ecotracker.local_api.activated.device_id[${index}].id ${element.id} is not an Integer(allowed example: 10 | \"10\" | \"10abc\"), Index has been removed from the configuration.`);\n            }\n        }\n    });\n\n    // devices.subtype.electricitymeter.ecotracker.local_api.activated.device_id  - Array - value not valid boolean\n    config.devices.subtype.electricitymeter.ecotracker.local_api.activated.device_id.forEach(function (element, index) {\n        if (typeof element.value !== 'boolean') {\n            const test_boolean = convertToBoolean(element.value);\n            if (test_boolean !== null) {\n                element.value = test_boolean;\n            } else {\n                element.value = defaultConfig.devices.subtype.electricitymeter.ecotracker.local_api.activated.default_value;\n                node.log(`devices.subtype.electricitymeter.ecotracker.local_api.activated.device_id[${index}].value is not valid boolean value (allowed: true/false | \"true\"/\"false\" | 1/0), setting default configuration.`);\n            }\n        }\n    });\n\n    // mqtt.retain.topics.config\n    boolean_value = \"default_value\";\n    if (config.devices.subtype.electricitymeter.ecotracker.local_api.activated[boolean_value] === undefined) {\n        config.devices.subtype.electricitymeter.ecotracker.local_api.activated[boolean_value] = defaultConfig.devices.subtype.electricitymeter.ecotracker.local_api.activated[boolean_value];\n        node.log(`config.devices.subtype.electricitymeter.ecotracker.local_api.activated.${boolean_value} is undefined, setting default configuration.`);\n    }\n\n    boolean_value = \"default_value\";\n    // devices.subtype.electricitymeter.ecotracker.local_api.activated.default_value\n    if (typeof config.devices.subtype.electricitymeter.ecotracker.local_api.activated[boolean_value] !== 'boolean') {\n        const test_boolean = convertToBoolean(config.devices.subtype.electricitymeter.ecotracker.local_api.activated[boolean_value]);\n        if (test_boolean !== null) {\n            config.devices.subtype.electricitymeter.ecotracker.local_api.activated[boolean_value] = test_boolean;\n        } else {\n            config.devices.subtype.electricitymeter.ecotracker.local_api.activated[boolean_value] = defaultConfig.devices.subtype.electricitymeter.ecotracker.local_api.activated[boolean_value];\n            node.log(`devices.subtype.electricitymeter.ecotracker.local_api.activated.${boolean_value} not valid boolean value (allowed: true/false | \"true\"/\"false\" | 1/0), setting default configuration.`);\n        }\n    }\n\n    // devices.subtype.electricitymeter.ecotracker.local_api.scan_interval\n    if (typeof config.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval !== 'object') {\n        config.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval = defaultConfig.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval;\n        node.log(\"devices.subtype.electricitymeter.ecotracker.local_api.scan_interval is not an object, setting default configuration.\");\n    }\n\n    // devices.subtype.electricitymeter.ecotracker.local_api.scan_interval\n    if (isEmptyObject(config.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval)) {\n        config.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval = defaultConfig.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval;\n        node.log(\"devices.subtype.electricitymeter.ecotracker.local_api.scan_interval is empty, setting default configuration.\");\n    }\n\n    // devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id\n    if (!Array.isArray(config.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id)) {\n        config.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id = defaultConfig.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id;\n        node.log(\"devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id is not an array, setting default configuration.\");\n    }\n\n    // devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id  - Array - id isInteger\n    config.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id.forEach(function (element, index) {\n        if (!Number.isInteger(element.id)) {\n            let value = parseInt(element.id);\n            if (!isNaN(value)) {\n                element.id = value;\n            } else {\n                config.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id.splice(index, 1);\n                node.log(`devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id[${index}].id ${element.id} is not an Integer(allowed example: 10 | \"10\" | \"10abc\"), Index has been removed from the configuration.`);\n            }\n        }\n    });\n\n    // devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id  - Array - value isInteger\n    config.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id.forEach(function (element, index) {\n        if (!Number.isInteger(element.value)) {\n            let value = parseInt(element.value);\n            if (!isNaN(value)) {\n                element.value = value;\n            } else {\n                node.log(`devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id[${index}].value ${element.value} of id ${element.id} is not Integer (allowed example: 10 | \"10\" | \"10abc\"), setting default configuration.`);\n                element.value = defaultConfig.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.default_value;\n            }\n        }\n    });\n\n    // devices.subtype.motiondetector.reset_after.device_id  - Array - value out of range\n    config.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id.forEach(function (element, index) {\n        if (!isInRange(element.value, MIN_SCAN_INTERVAL, MAX_SCAN_INTERVAL)) {\n            node.log(`devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.device_id[${index}].value ${element.value} of id ${element.id} is out of range. Min = ${MIN_SCAN_INTERVAL} | Max = ${MAX_SCAN_INTERVAL}. Value was set to default value.`);\n            element.value = defaultConfig.devices.subtype.electricitymeter.ecotracker.local_api.scan_interval.default_value;\n        }\n    });\n\n    // devices.exclude   \n    if (!Array.isArray(config.devices.exclude)) {\n        config.devices.exclude = [];\n        node.log(\"devices.exclude is not an array, setting empty configuration.\");\n    }\n\n    return config;\n}\n\nconst config_input = msg.payload;\nconst config_input_stringify = (JSON.stringify(config_input));\n\nconst defaultConfig = global.get(\"defaultConfig\");\nconst config_output = validateYAML(config_input, defaultConfig);\nconst config_output_stringify = (JSON.stringify(config_input));\n\nif (config_input_stringify === config_output_stringify) {\n    msg.config_changed = false;\n    //node.log(\"The Configuration has not been changed.\");\n} else {\n    msg.config_changed = true;\n    node.log(\"The Configuration has been changed.\");\n}\n\nmsg.payload = config_output;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 300,
        "wires": [
            [
                "1f370df7dded8d0d",
                "229268c16cb00c83",
                "c7b37b53485f900c"
            ]
        ]
    },
    {
        "id": "229268c16cb00c83",
        "type": "debug",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 360,
        "wires": []
    },
    {
        "id": "c9841c25ab3c24fd",
        "type": "catch",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Error: ENOENT",
        "scope": [
            "edad0a7c981c024c"
        ],
        "uncaught": false,
        "x": 160,
        "y": 520,
        "wires": [
            [
                "7a3ad09392484477",
                "85fd09512cf3486c"
            ]
        ]
    },
    {
        "id": "3223bc5da99bcbed",
        "type": "file",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "filename": "/homeassistant/everHome2MQTT/config.yaml",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 840,
        "y": 520,
        "wires": [
            [
                "88660bd4c74eb21b"
            ]
        ]
    },
    {
        "id": "7a3ad09392484477",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "defaultConfig",
        "func": "const defaultConfig = global.get(\"defaultConfig\");\nmsg.payload = defaultConfig;\n\n// Function node to check if the error message contains a specific string\nif (msg.error && msg.error.message.includes(\"Error: ENOENT: no such file or directory\")) {\n    // If the string is included, continue the flow\n    return msg;\n} else {\n    // If the string is not included, stop the flow\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 520,
        "wires": [
            [
                "ff9195da3bfd38dc"
            ]
        ]
    },
    {
        "id": "ff9195da3bfd38dc",
        "type": "yaml",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "property": "payload",
        "name": "",
        "x": 550,
        "y": 520,
        "wires": [
            [
                "3223bc5da99bcbed"
            ]
        ]
    },
    {
        "id": "85fd09512cf3486c",
        "type": "debug",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 560,
        "wires": []
    },
    {
        "id": "fd8e1a4f45b7705c",
        "type": "comment",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Create config file",
        "info": "",
        "x": 160,
        "y": 480,
        "wires": []
    },
    {
        "id": "ae940d48f0775e5a",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "default config",
        "func": "let defaultConfig = {\n    language: \"de\", \n    ports: {\n        everHome2MQTT: 3000, \n        nodeRed: 1880 \n    },\n    websocket: {\n        scan_interval: 10\n    },\n    mqtt: {\n        scan_interval: 10,\n        retain: {\n            topics: {\n                config: true,\n                state: true,\n                command: false\n            }\n        }\n    },\n    devices: {\n        naming: \"<device_name> <room_name>\",\n        set_object_id: true,\n        subtype: {\n            cover: {\n                toggle_stop_time: 20\n            },\n            motiondetector: {\n                reset_after: {\n                    device_id: [\n                        { id: 0, value: 120 }\n                    ],\n                    default_value: 120\n                }\n            },\n            electricitymeter: {\n                ecotracker: {\n                    local_api: {\n                        activated: {\n                            device_id: [\n                                { id: 0, value: true }\n                            ],\n                            default_value: false\n                        },\n                        scan_interval: {\n                            device_id: [\n                                { id: 0, value: 5 }\n                            ],\n                            default_value: 5\n                        }\n                    }\n                }\n            }\n        },\n        exclude: [\n            { subtype: \"mobile\" }\n        ]\n    }\n};\nglobal.set(\"defaultConfig\", defaultConfig);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 220,
        "wires": [
            [
                "d62f64f7503865b2"
            ]
        ]
    },
    {
        "id": "d62f64f7503865b2",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "translations",
        "func": "const translations = {\n    \"lastexecute\": {\n        \"en\": \"Last execute\",\n        \"fr\": \"Dernière exécution\",\n        \"de\": \"Letzte Ausführung\"\n    },\n    \"lastreceive\": {\n        \"en\": \"Last transmission\",\n        \"fr\": \"Dernière diffusion\",\n        \"de\": \"Letzte Übertragung\"\n    },    \n    \"subtype\": {\n    \"en\": \"Device type\",\n    \"fr\": \"Type d'appareil\",\n    \"de\": \"Gerätetyp\"\n    },\n    \"shutter\": {\n        \"en\": \"Roller shutter\",\n        \"fr\": \"Volet roulant\",\n        \"de\": \"Rollladen\"\n    },   \n    \"window\": {\n        \"en\": \"Window\",\n        \"fr\": \"Fenêtre\",\n        \"de\": \"Fenster\"\n    },       \n    \"door\": {\n        \"en\": \"Door\",\n        \"fr\": \"Porte\",\n        \"de\": \"Tür\"\n    },\n    \"light\": {\n        \"en\": \"Light\",\n        \"fr\": \"Lumière\",\n        \"de\": \"Licht\"\n    },  \n    \"socket\": {\n        \"en\": \"Power outlet\",\n        \"fr\": \"Prise de courant\",\n        \"de\": \"Steckdose\"\n    },   \n    \"brightness\": {\n        \"en\": \"Brightness\",\n        \"fr\": \"Luminosité\",\n        \"de\": \"Helligkeit\"\n    }, \n    \"heating\": {\n        \"en\": \"Heating\",\n        \"fr\": \"Chauffe-eau\",\n        \"de\": \"Heizung\"\n    },\n    \"impulse\": {\n        \"en\": \"Impulse\",\n        \"fr\": \"Impulsion\",\n        \"de\": \"Impuls\"\n    },\n    \"sender\": {\n        \"en\": \"Transmitter\",\n        \"fr\": \"Canaliser\",\n        \"de\": \"Sender\"\n    },\n    \"gateway\": {\n        \"en\": \"Gateway\",\n        \"fr\": \"Gateway\",\n        \"de\": \"Gateway\"\n    },\n    \"batteryboolean\": {\n        \"en\": \"Battery status\",\n        \"fr\": \"État de la batterie\",\n        \"de\": \"Batteriestatus\"\n    },\n    \"serial\": {\n        \"en\": \"Serial number\",\n        \"fr\": \"Numéro de série\",\n        \"de\": \"Seriennummer\"\n    },    \n    \"batterypercentage\": {\n        \"en\": \"Battery\",\n        \"fr\": \"Batterie\",\n        \"de\": \"Batterie\"\n    },\n    \"batteryvoltage\": {\n        \"en\": \"Battery voltage\",\n        \"fr\": \"Tension de la batterie\",\n        \"de\": \"Batteriespannung\"\n    }, \n    \"valve\": {\n        \"en\": \"Valve position\",\n        \"fr\": \"Position de la vanne\",\n        \"de\": \"Ventilstellung\"\n    },\n    \"temperature\": {\n        \"en\": \"Temperature\",\n        \"fr\": \"Température\",\n        \"de\": \"Temperatur\"\n    },\n    \"temperaturetarget\": {\n        \"en\": \"Target temperature\",\n        \"fr\": \"Température cible\",\n        \"de\": \"Soll Temperatur\"\n    },\n    \"mobile\": {\n        \"en\": \"Mobile devices\",\n        \"fr\": \"Appareils mobiles\",\n        \"de\": \"Mobilgeräte\"\n    }, \n    \"electricitymeter\": {\n        \"en\": \"Electricity meter\",\n        \"fr\": \"Compteur d'électricité\",\n        \"de\": \"Stromzähler\" \n    },\n    \"connected\": {\n        \"en\": \"Connection state\",\n        \"fr\": \"État de la connexion\",\n        \"de\": \"Verbindungsstatus\"\n    },\n    \"ip-wifi\": {\n        \"en\": \"Wifi IP address\",\n        \"fr\": \"Adresse IP Wifi\",\n        \"de\": \"WLAN IP-Adresse\"\n    },   \n    \"localip\": {\n        \"en\": \"IP address in the home network\",\n        \"fr\": \"Adresse IP dans le réseau domestique\",\n        \"de\": \"IP Adresse im Heimnetzwerk\"\n    },   \n    \"wanip\": {\n        \"en\": \"Public IP address\",\n        \"fr\": \"Adresse IP publique\",\n        \"de\": \"Öffentliche IP-Adresse\"\n    },\n    \"humidity\": {\n        \"en\": \"Humidity\",\n        \"fr\": \"Humidité de l'air\",\n        \"de\": \"Luftfeuchtigkeit\"\n    },\n    \"local_api_connected\": {\n        \"en\": \"Local interface\",\n        \"fr\": \"Interface locale\",\n        \"de\": \"Lokale Schnittstelle\"        \n    },   \n    \"motion\": {\n        \"en\": \"Motion\",\n        \"fr\": \"Mouvement\",\n        \"de\": \"Bewegung\"        \n    }, \n    \"motiondetector\": {\n        \"en\": \"Motion detectorn\",\n        \"fr\": \"Détecteur de mouvement\",\n        \"de\": \"Bewegungsmelder\"\n    },                                                                                                               \n    \"action\": {\n        \"en\": \"Action\",\n        \"fr\": \"Action\",\n        \"de\": \"Aktion\"\n    }, \n    \"blind\": {\n        \"en\": \"Blind\",\n        \"fr\": \"Stores vénitiens\",\n        \"de\": \"Raffstore\"\n    },\n    \"group\": {\n        \"en\": \"Group\",\n        \"fr\": \"Groupe\",\n        \"de\": \"Gruppe\"\n    },  \n    \"groups\": {\n        \"en\": \"Groups\",\n        \"fr\": \"Groupes\",\n        \"de\": \"Gruppen\"\n    }, \n    \"home\": {\n        \"en\": \"Home\",\n        \"fr\": \"Maison\",\n        \"de\": \"Heim\"\n    }, \n    \"present\": {\n        \"en\": \"Present\",\n        \"fr\": \"Présent\",\n        \"de\": \"Anwesend\"\n    },\n    \"away\": {\n        \"en\": \"Away\",\n        \"fr\": \"Absent\",\n        \"de\": \"Abwesend\"\n    },\n    \"holiday\": {\n        \"en\": \"Holiday\",\n        \"fr\": \"Vacances\",\n        \"de\": \"Urlaub\"\n    },    \n    \"presence\": {\n        \"en\": \"Presence\",\n        \"fr\": \"Présence\",\n        \"de\": \"Anwesenheit\"\n    },\n    \"luminance\": {\n        \"en\": \"Luminance\",\n        \"fr\": \"Luminance\",\n        \"de\": \"Lichtstärke\"\n    },   \n    \"lightsensor\": {\n        \"en\": \"Lightsensor\",\n        \"fr\": \"Capteur de lumière\",\n        \"de\": \"Lichtsensor\"\n    },   \n    \"awning\": {\n        \"en\": \"Awning\",\n        \"fr\": \"auvent\",\n        \"de\": \"Markise\"\n    },          \n};\nglobal.set(\"translations\", translations);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 220,
        "wires": [
            [
                "88660bd4c74eb21b"
            ]
        ]
    },
    {
        "id": "9fefe8e3edd4c70c",
        "type": "yaml",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "property": "payload",
        "name": "",
        "x": 1650,
        "y": 200,
        "wires": [
            [
                "8e544892bb2bc628"
            ]
        ]
    },
    {
        "id": "8e544892bb2bc628",
        "type": "file",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "filename": "/homeassistant/everHome2MQTT/config.yaml",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1920,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "c7b37b53485f900c",
        "type": "switch",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "config_changed",
        "property": "config_changed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1480,
        "y": 200,
        "wires": [
            [
                "9fefe8e3edd4c70c"
            ]
        ]
    },
    {
        "id": "83e0939569fa4e94",
        "type": "debug",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1040,
        "wires": []
    },
    {
        "id": "951449e6169ec919",
        "type": "link out",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "link out - Room Overrides",
        "mode": "link",
        "links": [
            "86fd5f35c0588851"
        ],
        "x": 965,
        "y": 1720,
        "wires": []
    },
    {
        "id": "4b6f7edcc6414f85",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "Devices",
        "func": "msg.devices = msg.payload;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1680,
        "wires": [
            [
                "d01a83e2f270f12e"
            ]
        ]
    },
    {
        "id": "2fdc460f34229a36",
        "type": "link out",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "link out - Devices",
        "mode": "link",
        "links": [
            "d8509b92dc59f7c9"
        ],
        "x": 1535,
        "y": 1700,
        "wires": []
    },
    {
        "id": "ed283429a698138f",
        "type": "debug",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 1000,
        "wires": []
    },
    {
        "id": "d01a83e2f270f12e",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "Groups",
        "func": "msg.configuration = global.get('configuration');\nmsg.language = global.get('language');\nmsg.rooms = global.get('rooms');\nmsg.devices = global.get('devices');\nmsg.groups = global.get('groups');\nmsg.translations = global.get(\"translations\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1740,
        "wires": [
            [
                "82aa2dc3f3889e67"
            ]
        ]
    },
    {
        "id": "82aa2dc3f3889e67",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "Extract Group Entities",
        "func": "const groups = msg.groups;\n\nfunction findGroupByDeviceID(groupList, deviceID) {\n    return groupList.find(group => group.id === deviceID) || null;\n}\n\nfunction extractEntities(groupList, groupID, result = []) {\n    const group = findGroupByDeviceID(groupList, groupID);\n    if (group) {\n        group.entities.forEach(entity => {\n            if (entity.groupid) {\n                extractEntities(groupList, entity.groupid, result);\n            } else {\n                result.push({ deviceid: entity.deviceid });\n            }\n        });\n    }\n    return result;\n}\n\nconst updatedEntities = [];\ngroups.forEach(function(element) {\n    if (element.entities) {\n        const newEntities = [];\n        element.entities.forEach(function(entity) {\n            if (entity.groupid) {\n                const extractedEntities = extractEntities(groups, entity.groupid);\n                newEntities.push(...extractedEntities);\n            } else {\n                newEntities.push(entity);\n            }\n        });\n        element.entities = newEntities;\n        updatedEntities.push(...newEntities.filter(entity => !entity.groupid));\n    }\n});\n\nmsg.payload = groups;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1800,
        "wires": [
            [
                "1e4a35d08639b358"
            ]
        ]
    },
    {
        "id": "1e4a35d08639b358",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "Group the groups",
        "func": "function groupBySubtype(groups) {\n    const groupsBySubtype = {};\n\n    groups.forEach(group => {\n        const subtype = group.subtype;\n\n        if (groupsBySubtype[subtype]) {\n            groupsBySubtype[subtype].push(group);\n        } else {\n            groupsBySubtype[subtype] = [group];\n        }\n    });\n\n    const result = [];\n    for (const subtype in groupsBySubtype) {\n        result.push({\n            subtype: subtype,\n            group_elements: groupsBySubtype[subtype]\n        });\n    }\n\n    return result;\n}\n\nconst groups = msg.payload;\n\nconst configuration = msg.configuration;\n// remove excluded groups\nlet groupsToRemove = [];\ngroups.forEach(function (element, index) {\n    if (configuration.devices.exclude.some(excludeItem => excludeItem.subtype === element.subtype)) {\n        groupsToRemove.push(index);\n    }\n});\ngroupsToRemove.reverse().forEach(function (index) {\n    groups.splice(index, 1);\n});\n\nconst groupsBySubtype = groupBySubtype(groups);\n\nmsg.payload = groupsBySubtype;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1860,
        "wires": [
            [
                "57bf8fdb5b3a50b8"
            ]
        ]
    },
    {
        "id": "57bf8fdb5b3a50b8",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "Maingroups",
        "func": "const groups = msg.payload;\nconst language = msg.language;\n\n// create availability list\n//general\nlet avty_states_connected = [];\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/websocket\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/mqtt\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\n\ngroups.forEach(function (element, index) {\n    element.type = \"group\";\n    element.group_subtype = \"maingroup\";\n    const sub_name = ((text, targetLanguage) => msg.translations[text]?.[targetLanguage] || msg.translations[text]?.en || text)(element.subtype, msg.language);\n    const main_name = ((text, targetLanguage) => msg.translations[text]?.[targetLanguage] || msg.translations[text]?.en || text)('groups', msg.language);\n    element.device_name = `${sub_name} ${main_name}`;\n    element.language = language;\n    element.manufacturer = \"everHome2MQTT\";\n    element.model = \"Group\";\n    element.via_device = \"everhome_central\";\n    element.main_topic = \"everhome/maingroup\";\n    element.config = {};\n    element.uniq_id_main = `everhome_maingroup_${element.subtype}`;\n    element.config.avty = avty_states_connected;\n    element.states = {};\n    element.ts = {};\n    element.id = index + 1;\n\n    element.device_id = `everhome_maingroup_${element.subtype}_${element.id}`;\n});\n\nmsg.payload = groups;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1920,
        "wires": [
            [
                "b43ae4d54053f3bb"
            ]
        ]
    },
    {
        "id": "b43ae4d54053f3bb",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "Availability",
        "func": "function findGatewayId(devices, deviceid) {\n    for (let i = 0; i < devices.length; i++) {\n        if (devices[i].id === deviceid) {\n            return devices[i].gatewayid;\n        }\n    }\n    return null;\n}\n\nconst groups = msg.payload;\nconst devices = msg.devices;\n\n// create availability list\n//general\nlet avty_states_connected = [];\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/websocket\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/mqtt\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\n\n// Search for the corresponding gateway of each device from the group\ngroups.forEach(function(element) {\n    element.group_elements.forEach(function (element) {\n        element.config = {};\n        const avty = [...avty_states_connected];\n        if (element.entities) {\n            element.entities.forEach(function (entity) {\n                const gatewayid = findGatewayId(devices, entity.deviceid);\n                const newEntry = {\n                    \"t\": `everhome/device/${gatewayid}/states/connected`,\n                    \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n                };\n                if (!avty.some(item => item.t === newEntry.t && item.val_tpl === newEntry.val_tpl)) {\n                    if (gatewayid !== undefined) {\n                        avty.push(newEntry);\n                    }\n                }\n            });\n        }\n        element.config.avty = avty;\n    });\n    \n});\n\nmsg.payload = groups;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1980,
        "wires": [
            [
                "acb64e29354b9928"
            ]
        ]
    },
    {
        "id": "acb64e29354b9928",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "Group Elements",
        "func": "function findeNameById(array, id) {\n    for (let i = 0; i < array.length; i++) {\n        if (array[i].id === id) {\n            return array[i].name;\n        }\n    }\n    return '';\n}\nfunction formatString(inputString, variables) {\n    var regex = /<([^>]+)>/g;\n    var result = inputString.replace(regex, function (match, placeholder) {\n        return variables[placeholder] !== undefined ? variables[placeholder] : '';\n    });\n    return result;\n}\n\nconst language = msg.language;\nlet rooms = msg.rooms;\nconst groups = msg.payload;\nconst configuration = msg.configuration;\nconst set_object_id = configuration.devices.set_object_id;\n\ngroups.forEach(function (element) {\n    element.group_elements.forEach(function (group_element) {\n\n        group_element.group_subtype = \"groupelement\";\n        group_element.set_object_id = set_object_id;\n        group_element.device_id = `everhome_maingroup_${group_element.subtype}_${element.id}`;\n        group_element.uniq_id_main = `everhome_${group_element.type}_id_${group_element.id}`;\n        group_element.room_name = findeNameById(rooms, group_element.roomid);\n\n        var variables = {\n            room_name: group_element.room_name,\n            device_name: group_element.name\n        };\n\n        const inputString = configuration.devices?.naming ?? group_element.room_name + \" - \" + group_element.name;\n        group_element.device_name = formatString(inputString, variables);\n\n    });\n\n});\n\nmsg.groups = groups;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 2040,
        "wires": [
            [
                "7d6a5e28d09ab625"
            ]
        ]
    },
    {
        "id": "b761942c5c363566",
        "type": "comment",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Request Groups",
        "info": "",
        "x": 160,
        "y": 1460,
        "wires": []
    },
    {
        "id": "fe1fa53e84cc285b",
        "type": "inject",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1520,
        "wires": [
            [
                "2662322312b0e379"
            ]
        ]
    },
    {
        "id": "2662322312b0e379",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "Add Bearer Token",
        "func": "const token = global.get('accessToken');\n\nif (token) {\n    msg.headers = {\n        'Authorization': `Bearer ${token}`,\n        'User-Agent': 'everHome2MQTT'\n    };\n    return msg;\n} else {\n    node.error('Token not found');\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1520,
        "wires": [
            [
                "b6b1e9b8fc37bd5f"
            ]
        ]
    },
    {
        "id": "b6b1e9b8fc37bd5f",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "url",
        "func": "msg.url = \"https://everhome.cloud/home?include=properties\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1520,
        "wires": [
            [
                "fdc5088bc12c56a7"
            ]
        ]
    },
    {
        "id": "fdc5088bc12c56a7",
        "type": "http request",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "home",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 970,
        "y": 1520,
        "wires": [
            [
                "53e18d77df572801"
            ]
        ]
    },
    {
        "id": "53e18d77df572801",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "check statusCode",
        "func": "if (msg.statusCode === 200){\n    return msg;\n}else{\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1520,
        "wires": [
            [
                "046850a87a658ff4"
            ]
        ]
    },
    {
        "id": "046850a87a658ff4",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "global.set:homes",
        "func": "global.set('homes', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1520,
        "wires": [
            [
                "f6a3fb8528998ec2",
                "cc76ee9e2b84b5d9"
            ]
        ]
    },
    {
        "id": "f6a3fb8528998ec2",
        "type": "debug",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1520,
        "wires": []
    },
    {
        "id": "cc76ee9e2b84b5d9",
        "type": "link out",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "name": "link out - Get Subtypes",
        "mode": "link",
        "links": [
            "6323ad5943a4a538"
        ],
        "x": 1735,
        "y": 1460,
        "wires": []
    },
    {
        "id": "7d6a5e28d09ab625",
        "type": "function",
        "z": "cf02ad9c7e091fb3",
        "g": "523ad0dd6fd4a780",
        "name": "Homes",
        "func": "let homes = global.get('homes');\nconst language = msg.language;\n\n// create availability list\n//general\nlet avty_states_connected = [];\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/websocket\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\navty_states_connected.push(\n    {\n        \"t\": \"everhome/central/state_connected/mqtt\",\n        \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n    }\n)\n\nvar optionsObject = {\n    \"general\": {\n        \"key\": \"general\",\n        \"type\": \"options\",\n        \"options\": [\"1\", \"0\", \"h\"]\n    }\n};\n\n\n\nhomes.forEach(function(element,index) {\n\n    // Causes problems in connection with the MQTT node\n    if (element.action !== undefined) {\n        delete element.action;\n    }    \n    element.subtype = element.type;  \n    element.device_name = `${element.name}`;\n    element.language = language;\n    element.manufacturer = \"everHome2MQTT\";\n    element.model = \"Home\";\n    element.via_device = \"everhome_central\";\n    element.main_topic = \"everhome/home\";\n    element.config = {};\n    element.uniq_id_main = `everhome_${element.subtype}_id_${element.id}`;\n    element.config.avty = avty_states_connected;\n    element.states = {};\n    element.ts = {};\n    element.id = index + 1;\n    element.device_id = `everhome_${element.subtype}_${element.id}`;\n    element.statedefinitions = optionsObject; \n\n    if (element.presence && element.presence.state !== undefined) {\n        switch (element.presence.state) {\n            case \"1\":\n                element.states.state = \"on\";\n                element.presence = \"present\";\n                break;\n            case \"0\":\n                element.states.state = \"off\";\n                element.presence = \"away\";\n                break;\n            case \"h\":\n                element.states.state = \"off\";\n                element.presence = \"holiday\";\n                break;\n            default:\n                element.states.state = \"off\";\n                element.presence = \"away\";\n        }\n    }\n});\n\nmsg.homes = homes;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 2100,
        "wires": [
            [
                "2fdc460f34229a36"
            ]
        ]
    },
    {
        "id": "88660bd4c74eb21b",
        "type": "exec",
        "z": "cf02ad9c7e091fb3",
        "g": "efea786323ebcbac",
        "command": "mkdir -p /homeassistant/everHome2MQTT",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 310,
        "y": 340,
        "wires": [
            [
                "edad0a7c981c024c"
            ],
            [],
            []
        ]
    },
    {
        "id": "a6dfbbf3121bfa9b",
        "type": "http request",
        "z": "882084c144462778",
        "g": "7092612d54be0bf4",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1150,
        "y": 940,
        "wires": [
            [
                "0613c85297b00ff7",
                "4cc9d949e0831faa",
                "7659297c38265b4e"
            ]
        ]
    },
    {
        "id": "195b4e0a0a73475d",
        "type": "function",
        "z": "882084c144462778",
        "g": "7092612d54be0bf4",
        "name": "Subscripe ws topic",
        "func": "const configuration = global.get('configuration');\nconst ip = global.get(\"internalIPvX\");\nconst port_node_red = configuration.ports.nodeRed;\n\nlet token = global.get('accessToken');\n\nlet ws_url = \"everhome.cloud/websocket\";\nlet postback_url = `http://${ip}:${port_node_red}/endpoint/wsdata`;\nlet payload =\n{\n    \"ws_url\": ws_url,\n    \"postback_url\": postback_url,\n    \"ip_node-red\": ip,\n    \"token\": token,\n    \"method\": \"subscribe\",\n    \"topics\": [\n        \"device/*/name,roomid,subtype,favorite,states,imageurl,isnow,plancounts,actions,ts\",\n        \"room/*/name,override,states\",\n        \"group/*/name,favorite,states\",\n        \"log\",\n        \"home/*/name,presence\"\n    ]\n}\n\n\nconst port_everHome2MQTT = configuration.ports.everHome2MQTT;\n//ip = \"192.168.178.34\";\nmsg = {};\nmsg.requestTimeout = 5000;\nmsg.url = `http://${ip}:${port_everHome2MQTT}/ws`;\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 940,
        "wires": [
            [
                "9665e366dbf07480",
                "a6dfbbf3121bfa9b"
            ]
        ]
    },
    {
        "id": "9e710d4f5156be14",
        "type": "debug",
        "z": "882084c144462778",
        "g": "7092612d54be0bf4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2450,
        "y": 940,
        "wires": []
    },
    {
        "id": "32db9532c95c1fb0",
        "type": "inject",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "f30a2e293187e4bd"
            ]
        ]
    },
    {
        "id": "c83a54f4887aa514",
        "type": "exec",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "command": "node /homeassistant/everHome2MQTT/server/everHome2MQTT.js /homeassistant/everHome2MQTT/server/data/",
        "addpay": "append",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1150,
        "y": 160,
        "wires": [
            [
                "bd497c76fb3c9e75",
                "18bf953f6b85c405"
            ],
            [
                "bd497c76fb3c9e75"
            ],
            [
                "bd497c76fb3c9e75"
            ]
        ]
    },
    {
        "id": "bd497c76fb3c9e75",
        "type": "debug",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 320,
        "wires": []
    },
    {
        "id": "31fd627743ae487b",
        "type": "comment",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "Start Server",
        "info": "",
        "x": 150,
        "y": 100,
        "wires": []
    },
    {
        "id": "b2ba17c385c9e312",
        "type": "comment",
        "z": "882084c144462778",
        "g": "7092612d54be0bf4",
        "name": "Connect Server",
        "info": "",
        "x": 160,
        "y": 880,
        "wires": []
    },
    {
        "id": "f951f65c0abf9db4",
        "type": "function",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "global.set:internalIPvX + restart_url",
        "func": "const configuration = global.get('configuration');\nconst port_everHome2MQTT = configuration.ports.everHome2MQTT;\nconst port_node_red = configuration.ports.nodeRed;\n\n\nlet ip;\nif (msg.payload.internalIPv4 !== undefined) {\n    ip = msg.payload.internalIPv4;\n}\nelse if (msg.payload.internalIPv6 !== undefined) {\n    ip = msg.payload.internalIPv6;\n}\nelse {\n    ip = \"no IP addresses were found\";\n}\n\nconst restart_url = `http://${ip}:${port_node_red}/endpoint/restart`;\n\nmsg.append = `${restart_url} ${port_everHome2MQTT}`;\n\nglobal.set(\"internalIPvX\", ip);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 300,
        "wires": [
            [
                "3a270afb8239ea4d"
            ]
        ]
    },
    {
        "id": "9665e366dbf07480",
        "type": "debug",
        "z": "882084c144462778",
        "g": "7092612d54be0bf4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 1020,
        "wires": []
    },
    {
        "id": "cf271fa3f9c3a0d8",
        "type": "switch",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "property": "payload.server_is_running",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1850,
        "y": 220,
        "wires": [
            [
                "735a0d29df7e53a8",
                "e4c41794e8715859"
            ]
        ]
    },
    {
        "id": "54f3443f99f70a9c",
        "type": "debug",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 100,
        "wires": []
    },
    {
        "id": "735a0d29df7e53a8",
        "type": "change",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ws_server_is_running",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2220,
        "y": 220,
        "wires": [
            [
                "77d396a6949cdb6f",
                "7e9709686d1e6900",
                "b3b32bd5417396de"
            ]
        ]
    },
    {
        "id": "77d396a6949cdb6f",
        "type": "function",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "node.log: ws gateway server is running.",
        "func": "node.log(\"ws gateway server is running.\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "0613c85297b00ff7",
        "type": "function",
        "z": "882084c144462778",
        "g": "7092612d54be0bf4",
        "name": "node.log: msg.payload",
        "func": "node.log(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "b93506ed060e64d0",
        "type": "switch",
        "z": "882084c144462778",
        "g": "7092612d54be0bf4",
        "name": "ws_server_is_running",
        "property": "ws_server_is_running",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 940,
        "wires": [
            [
                "195b4e0a0a73475d"
            ],
            [
                "0a47e5012007759d",
                "80bcd5b0dbff6cb3"
            ]
        ]
    },
    {
        "id": "b595bc23a32bd2af",
        "type": "link in",
        "z": "882084c144462778",
        "g": "7092612d54be0bf4",
        "name": "link in - Connect/Refresh Websocket",
        "links": [
            "ea43ba0a08935eb3",
            "e28344a502208811"
        ],
        "x": 95,
        "y": 940,
        "wires": [
            [
                "181fe872542ffe6a"
            ]
        ]
    },
    {
        "id": "0a47e5012007759d",
        "type": "delay",
        "z": "882084c144462778",
        "g": "7092612d54be0bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 1000,
        "wires": [
            [
                "b93506ed060e64d0"
            ]
        ]
    },
    {
        "id": "80bcd5b0dbff6cb3",
        "type": "function",
        "z": "882084c144462778",
        "g": "7092612d54be0bf4",
        "name": "node.log: ws gateway wait for server is running.",
        "func": "node.log(\"ws gateway wait for server is running.\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "4cc9d949e0831faa",
        "type": "function",
        "z": "882084c144462778",
        "g": "7092612d54be0bf4",
        "name": "check statusCode",
        "func": "if (msg.statusCode === 200){\n    global.set(\"subscription_successful\", true);\n}else{\n    global.set(\"subscription_successful\", false);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 940,
        "wires": [
            [
                "9e710d4f5156be14"
            ]
        ]
    },
    {
        "id": "6003f7b19473dc92",
        "type": "inject",
        "z": "882084c144462778",
        "g": "7092612d54be0bf4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 680,
        "y": 1060,
        "wires": [
            [
                "195b4e0a0a73475d"
            ]
        ]
    },
    {
        "id": "181fe872542ffe6a",
        "type": "change",
        "z": "882084c144462778",
        "g": "7092612d54be0bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "subscription_running",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 940,
        "wires": [
            [
                "b93506ed060e64d0"
            ]
        ]
    },
    {
        "id": "474f9d0eb283f99c",
        "type": "change",
        "z": "882084c144462778",
        "g": "7092612d54be0bf4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "subscription_running",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1660,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "454e5d6f133ee857",
        "type": "inject",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1960,
        "y": 160,
        "wires": [
            [
                "735a0d29df7e53a8"
            ]
        ]
    },
    {
        "id": "7659297c38265b4e",
        "type": "delay",
        "z": "882084c144462778",
        "g": "7092612d54be0bf4",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1380,
        "y": 880,
        "wires": [
            [
                "474f9d0eb283f99c"
            ]
        ]
    },
    {
        "id": "f30a2e293187e4bd",
        "type": "ip",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "ip",
        "https": false,
        "timeout": "5000",
        "internalIPv4": true,
        "internalIPv6": true,
        "publicIPv4": false,
        "publicIPv6": false,
        "x": 170,
        "y": 300,
        "wires": [
            [
                "e358f8a5c7ae27d9"
            ]
        ]
    },
    {
        "id": "e4c41794e8715859",
        "type": "debug",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 340,
        "wires": []
    },
    {
        "id": "7e9709686d1e6900",
        "type": "debug",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2470,
        "y": 220,
        "wires": []
    },
    {
        "id": "d9d5b294029608cc",
        "type": "exec",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "command": "npm install simple-oauth2",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1270,
        "y": 360,
        "wires": [
            [],
            [],
            [
                "a8eb0edc8ff85b20"
            ]
        ]
    },
    {
        "id": "a8eb0edc8ff85b20",
        "type": "switch",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 670,
        "y": 160,
        "wires": [
            [
                "c83a54f4887aa514"
            ]
        ]
    },
    {
        "id": "b3b32bd5417396de",
        "type": "link out",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "d49769c6a79c5c96"
        ],
        "x": 2365,
        "y": 120,
        "wires": []
    },
    {
        "id": "ba7dac02229b4902",
        "type": "delay",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 380,
        "wires": [
            [
                "e358f8a5c7ae27d9"
            ]
        ]
    },
    {
        "id": "e358f8a5c7ae27d9",
        "type": "switch",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "yaml_config_loaded?",
        "property": "yaml_config_loaded",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 400,
        "y": 300,
        "wires": [
            [
                "f951f65c0abf9db4"
            ],
            [
                "ba7dac02229b4902"
            ]
        ]
    },
    {
        "id": "18bf953f6b85c405",
        "type": "function",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "ws.js stdout",
        "func": "try {\n    let payload = JSON.parse(msg.payload);\n    msg.payload = payload;\n     return msg;\n} catch (e) {\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 100,
        "wires": [
            [
                "cf271fa3f9c3a0d8",
                "54f3443f99f70a9c"
            ]
        ]
    },
    {
        "id": "3a270afb8239ea4d",
        "type": "exec",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "command": "mkdir -p /homeassistant/everHome2MQTT/server/data",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 360,
        "y": 500,
        "wires": [
            [],
            [],
            [
                "afb4d65d8a34588f"
            ]
        ]
    },
    {
        "id": "afb4d65d8a34588f",
        "type": "exec",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "command": "[ -f /homeassistant/everHome2MQTT/server/everHome2MQTT.js ] && echo \"exists\" || echo \"not found\"",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 510,
        "y": 580,
        "wires": [
            [
                "b760852c3a6d424d"
            ],
            [],
            []
        ]
    },
    {
        "id": "b760852c3a6d424d",
        "type": "switch",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "exists",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 580,
        "wires": [
            [
                "d9d5b294029608cc"
            ],
            [
                "72ad765ee4e81754",
                "a76928d617a7c707"
            ]
        ]
    },
    {
        "id": "71b8252730bcbbe7",
        "type": "delay",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1620,
        "y": 780,
        "wires": [
            [
                "afb4d65d8a34588f"
            ]
        ]
    },
    {
        "id": "72ad765ee4e81754",
        "type": "function",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "node.log(\"server file /homeassistant/everHome2MQTT/server/everHome2MQTT.js not found\");",
        "func": "node.log(\"server file /homeassistant/everHome2MQTT/server/everHome2MQTT.js not found\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 640,
        "wires": [
            [
                "9ebe344d466ba4a9"
            ]
        ]
    },
    {
        "id": "a76928d617a7c707",
        "type": "debug",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 520,
        "wires": []
    },
    {
        "id": "9ebe344d466ba4a9",
        "type": "exec",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "command": "find /config/projects/everHome2MQTT -name \"everHome2MQTT.js\"",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1580,
        "y": 560,
        "wires": [
            [
                "34459320041cc080"
            ],
            [],
            []
        ]
    },
    {
        "id": "34459320041cc080",
        "type": "switch",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1910,
        "y": 400,
        "wires": [
            [
                "782d5dea06df6e64"
            ],
            [
                "b145726ea4117690"
            ]
        ]
    },
    {
        "id": "34b73d66f5be9796",
        "type": "exec",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "command": "",
        "addpay": "command_line",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "copy server file",
        "x": 1620,
        "y": 680,
        "wires": [
            [
                "966e50a0a7d74cb7",
                "71b8252730bcbbe7"
            ],
            [
                "247bad1427840fd6"
            ],
            [
                "2063774a9b105040",
                "40efcc54acebdeba"
            ]
        ]
    },
    {
        "id": "ca103ca3d9b006db",
        "type": "exec",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "command": "mkdir -p /homeassistant/everHome2MQTT/server/",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 2130,
        "y": 540,
        "wires": [
            [
                "34b73d66f5be9796"
            ],
            [],
            []
        ]
    },
    {
        "id": "b145726ea4117690",
        "type": "function",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "create command",
        "func": "var command = \"cp\";\nvar server_file = msg.payload = msg.payload.trim();\nvar target_folder = \"/homeassistant/everHome2MQTT/server/\";\n\nvar command_line = command + \" \" + server_file + \" \" + target_folder;\nmsg.command_line = command_line; \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 460,
        "wires": [
            [
                "ca103ca3d9b006db"
            ]
        ]
    },
    {
        "id": "782d5dea06df6e64",
        "type": "link out",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "765a7487a8e19abf"
        ],
        "x": 2065,
        "y": 400,
        "wires": []
    },
    {
        "id": "765a7487a8e19abf",
        "type": "link in",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "link in 4",
        "links": [
            "782d5dea06df6e64"
        ],
        "x": 1385,
        "y": 780,
        "wires": [
            [
                "71b8252730bcbbe7"
            ]
        ]
    },
    {
        "id": "966e50a0a7d74cb7",
        "type": "debug",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 640,
        "wires": []
    },
    {
        "id": "247bad1427840fd6",
        "type": "debug",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 680,
        "wires": []
    },
    {
        "id": "2063774a9b105040",
        "type": "debug",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 720,
        "wires": []
    },
    {
        "id": "efa6d18633bd3ccd",
        "type": "function",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "node.log(\"Server file was copied from the project directory\");",
        "func": "node.log(\"Server file was copied from the project directory\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "40efcc54acebdeba",
        "type": "switch",
        "z": "882084c144462778",
        "g": "714ee53a3861c61a",
        "name": "",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1950,
        "y": 760,
        "wires": [
            [
                "efa6d18633bd3ccd"
            ]
        ]
    },
    {
        "id": "3fe7f96c15ee6699",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "12555d2026f2b1f7",
        "name": "Last Request: REST-API diagnostic",
        "func": "function joinTopics(...topics) {\n    return topics.join('/');\n}\nconst uniq_id = msg.uniq_id;\nconst obj_id = uniq_id;\n\nconst name = \"Last Request: REST-API\";\n\nconst valueJsonVariable = \"value_json.last_request\";  \n\nconst central_device_id = \"everhome_central\";\nconst device_class = \"timestamp\";\nconst subtopic = \"api_last_request\";\n\nlet payload = {\n    \"uniq_id\": uniq_id,\n    \"obj_id\": uniq_id,\n    \"stat_t\": joinTopics(msg.main_state_topic, subtopic),\n    \"device_class\": device_class,\n    \"name\": name,\n    \"ent_cat\": \"diagnostic\",\n    \"val_tpl\": `{{${valueJsonVariable} if ${valueJsonVariable} is defined else 'false'}}`,\n    \"dev\": {\n        \"ids\": [\n            central_device_id\n        ]\n    },\n    \"avty\": [\n        {\n            \"t\": \"everhome/central/state_connected/mqtt\",\n            \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n        }\n    ],\n    \"avty_mode\": \"all\"\n };\n\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 360,
        "wires": [
            [
                "2c9e7c2c2e2a0e16",
                "07ccf8bc620e2eb5"
            ]
        ]
    },
    {
        "id": "1ea03c0fdb17c030",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "12555d2026f2b1f7",
        "name": "config topic",
        "func": "// uniq_id\nlet uniq_id = msg.central.uniq_id + \"_\" + \"api_last_request\";\nmsg.uniq_id = uniq_id;\n\n// <discovery_prefix>/<component>/[<node_id>/]<object_id>/config\nlet discovery_prefix = 'homeassistant';\nlet component = 'sensor';\nlet node_id = 'everhome';\n\nlet prefix = 'config';\nlet topic = discovery_prefix + '/' + component + '/' + node_id + '/' + uniq_id + '/' + prefix;\nmsg.topic = topic;\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 360,
        "wires": [
            [
                "3fe7f96c15ee6699"
            ]
        ]
    },
    {
        "id": "4c666029cb05a518",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "12555d2026f2b1f7",
        "name": "Restart button",
        "func": "let uniq_id = msg.uniq_id;\nlet obj_id = uniq_id;\n\nconst name = \"Restart\";\nconst valueJsonVariable = 'value_json.' + uniq_id;  \nconst cmd_t = \"everhome/control/refresh\";\n\nconst configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.command;\n\nconst central_device_id = \"everhome_central\";\n\nlet payload = {\n    \"uniq_id\": uniq_id,\n    \"obj_id\": obj_id,\n    \"cmd_t\": cmd_t,\n    \"payload_press\": \"reset\",\n    \"entity_category\": \"config\",\n    \"device_class\": \"update\",\n    //\"name\": name,\n    \"retain\": retain,  \n    \"dev\": {\n        \"ids\": [\n            central_device_id\n        ]\n    },\n    \"avty\": [\n        {\n            \"t\": \"everhome/central/state_connected/websocket\",\n            \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n        },\n        {\n            \"t\": \"everhome/central/state_connected/mqtt\",\n            \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n        }\n\n    ],\n    \"avty_mode\": \"all\"\n };\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 300,
        "wires": [
            [
                "07ccf8bc620e2eb5",
                "1ea03c0fdb17c030"
            ]
        ]
    },
    {
        "id": "098dd18a510b4a34",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "12555d2026f2b1f7",
        "name": "config topic",
        "func": "// uniq_id\nlet uniq_id = \"everhome_reset_button\";\nmsg.uniq_id = uniq_id;\n\n// <discovery_prefix>/<component>/[<node_id>/]<object_id>/config\nlet discovery_prefix ='homeassistant';\nlet component = 'button';\nlet node_id ='everhome';\n\nlet prefix = 'config';\nlet topic = discovery_prefix + '/' + component + '/' + node_id + '/' + uniq_id + '/' + prefix;\nmsg.topic = topic;\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 300,
        "wires": [
            [
                "4c666029cb05a518"
            ]
        ]
    },
    {
        "id": "5999576fec1bf251",
        "type": "link in",
        "z": "95278f532bb93da2",
        "g": "12555d2026f2b1f7",
        "name": "link in - Central",
        "links": [
            "36d70bfe397ec698"
        ],
        "x": 95,
        "y": 180,
        "wires": [
            [
                "70a5be8ee1988fb7"
            ]
        ]
    },
    {
        "id": "ff3bd0b279e1459b",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "12555d2026f2b1f7",
        "name": "config topic",
        "func": "// uniq_id\nlet uniq_id = msg.central.uniq_id + \"_\" + \"mqtt_state_connected\";\nmsg.uniq_id = uniq_id;\n\n// <discovery_prefix>/<component>/[<node_id>/]<object_id>/config\nlet discovery_prefix = 'homeassistant';\nlet component = 'binary_sensor';\nlet node_id = 'everhome';\n\nlet prefix = 'config';\nlet topic = discovery_prefix + '/' + component + '/' + node_id + '/' + uniq_id + '/' + prefix;\nmsg.topic = topic;\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 180,
        "wires": [
            [
                "d0dc83969b8c14b4"
            ]
        ]
    },
    {
        "id": "07ccf8bc620e2eb5",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "12555d2026f2b1f7",
        "name": "Retain Config",
        "func": "const configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.config;\nmsg.retain = retain;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 180,
        "wires": [
            [
                "0b35e34144c32612"
            ]
        ]
    },
    {
        "id": "294ebad6e293b090",
        "type": "comment",
        "z": "95278f532bb93da2",
        "g": "12555d2026f2b1f7",
        "name": "Central",
        "info": "",
        "x": 130,
        "y": 100,
        "wires": []
    },
    {
        "id": "70a5be8ee1988fb7",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "12555d2026f2b1f7",
        "name": "Get Central",
        "func": "const central = msg.central;\nmsg.central = central;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 180,
        "wires": [
            [
                "ff3bd0b279e1459b"
            ]
        ]
    },
    {
        "id": "d0dc83969b8c14b4",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "12555d2026f2b1f7",
        "name": "Mqtt diagnostic",
        "func": "const uniq_id = msg.uniq_id;\nconst obj_id = uniq_id;\nconst central_device_id = \"everhome_central\";\nconst device_name = msg.central.device_name;\nconst name = \"Mqtt\";\n\nlet payload = {\n    \"uniq_id\": uniq_id,\n    \"obj_id\": uniq_id,\n    \"stat_t\": \"everhome/central/state_connected/mqtt\",\n    \"name\": name,\n    \"pl_on\": \"online\",\n    \"pl_off\": \"offline\",\n    \"stat_cla\": \"measurement\",\n    \"dev_cla\": \"connectivity\",\n    \"ent_cat\": \"diagnostic\",\n    \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`,\n    \"dev\": {\n        \"name\": device_name,\n        \"mf\": \"everHome2MQTT\",\n        \"sw\": msg.central.sw_version,\n        \"mdl\": \"Control-Center\",\n        \"cu\": \"https://everhome.cloud\",\n        \"ids\": [\n            central_device_id\n        ]\n    }\n };\n\nmsg.payload = payload;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 180,
        "wires": [
            [
                "07ccf8bc620e2eb5",
                "1962364b9fa3a2db"
            ]
        ]
    },
    {
        "id": "0b35e34144c32612",
        "type": "mqtt out",
        "z": "95278f532bb93da2",
        "g": "12555d2026f2b1f7",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "010c8dcccc60a718",
        "x": 2270,
        "y": 180,
        "wires": []
    },
    {
        "id": "1962364b9fa3a2db",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "12555d2026f2b1f7",
        "name": "config topic",
        "func": "// uniq_id\nlet uniq_id = msg.central.uniq_id + \"_\" + \"websocket_state_connected\";\nmsg.uniq_id = uniq_id;\n\n// <discovery_prefix>/<component>/[<node_id>/]<object_id>/config\nlet discovery_prefix = 'homeassistant';\nlet component = 'binary_sensor';\nlet node_id = 'everhome';\n\nlet prefix = 'config';\nlet topic = discovery_prefix + '/' + component + '/' + node_id + '/' + uniq_id + '/' + prefix;\nmsg.topic = topic;\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 240,
        "wires": [
            [
                "2fe36f04f8969a4d"
            ]
        ]
    },
    {
        "id": "2fe36f04f8969a4d",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "12555d2026f2b1f7",
        "name": "Websocket diagnostic",
        "func": "function joinTopics(...topics) {\n    return topics.join('/');\n}\n\nconst uniq_id = msg.uniq_id;\nconst obj_id = uniq_id;\nconst central_device_id = \"everhome_central\";\nconst device_name = msg.central.device_name;\nconst name = \"Websocket\";\n\nlet payload = {\n    \"uniq_id\": uniq_id,\n    \"obj_id\": uniq_id,\n    \"stat_t\": \"everhome/central/state_connected/websocket\",\n    \"name\": name,\n    \"pl_on\": \"online\",\n    \"pl_off\": \"offline\",\n    \"stat_cla\": \"measurement\",\n    \"dev_cla\": \"connectivity\",\n    \"ent_cat\": \"diagnostic\",\n    \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`,\n    \"dev\": {\n        \"ids\": [\n            central_device_id\n        ]\n    },\n    \"avty\": [\n        {\n            \"t\": \"everhome/central/state_connected/mqtt\",\n            \"val_tpl\": `{{'online' if value_json.value == 'online' else 'offline'}}`\n        }\n    ],\n    \"avty_mode\": \"all\"\n};\n\nmsg.payload = payload;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 240,
        "wires": [
            [
                "098dd18a510b4a34",
                "07ccf8bc620e2eb5"
            ]
        ]
    },
    {
        "id": "9072efdb2c998ed8",
        "type": "mqtt out",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "010c8dcccc60a718",
        "x": 2270,
        "y": 940,
        "wires": []
    },
    {
        "id": "a9fe2d63f6699e90",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - lastexecute",
        "func": "const uniq_id_sub = \"lastexecute\";\nconst device_class = \"timestamp\";\n\nconst element = msg.payload;\n\nif (element.ts[uniq_id_sub] !== undefined) { \n    const stat_t = `${element.main_topic}/${element.id}/ts/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"device_class\": device_class,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"ent_cat\": \"diagnostic\",\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 740,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "c48afe39ac37f91c",
        "type": "switch",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "Check Config Central Done",
        "property": "config.central_done",
        "propertyType": "global",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 860,
        "wires": [
            [
                "88002726fa4516fa"
            ],
            [
                "ac28c9216e9323ee"
            ]
        ]
    },
    {
        "id": "4a300ee35db77eae",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "Retain Config",
        "func": "const configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.config;\nmsg.retain = retain;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 940,
        "wires": [
            [
                "9072efdb2c998ed8"
            ]
        ]
    },
    {
        "id": "88002726fa4516fa",
        "type": "delay",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "Wait Config Central Done",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 270,
        "y": 760,
        "wires": [
            [
                "c48afe39ac37f91c"
            ]
        ]
    },
    {
        "id": "eed6e24a403e9bd7",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "cover - singlemotion",
        "func": "const uniq_id_sub = \"singlemotion\";\n\nconst configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.command;\n\nconst element = msg.payload;\n\nif (element.subtype !== undefined && element.subtype === 'shutter' || element.subtype === 'blind' || element.subtype === 'awning') {     \n    let device_class;\n    let payload_open;\n    let payload_close;\n    let payload_stop;\n    switch (element.subtype) {\n        case 'shutter':\n            device_class = element.subtype;\n            payload_open = \"up\";\n            payload_close = \"down\";\n            payload_stop = \"stop\";\n            break;\n        case 'blind':\n            device_class = element.subtype;\n            payload_open = '{\"action\": \"up\",\"len\": \"long\"}';\n            payload_close ='{\"action\": \"down\",\"len\": \"long\"}';\n            payload_stop = \"stop\";\n            break;\n        case 'awning':\n            device_class = element.subtype;\n            payload_open = \"out\";\n            payload_close = \"in\";\n            payload_stop = \"stop\";\n            break;            \n\n        default:\n            device_class = 'unknown deviceclass '\n    }\n\n    let command_main_topic = \"everhome/control/cover\"\n    let position_main_topic;\n\n    let position_topic;\n    if (element.type == \"group\") {\n        position_main_topic = \"everhome/group\"\n        position_topic = null;\n    } else {\n        position_main_topic = \"everhome/device\"\n        position_topic = `${position_main_topic}/${element.id}/states/position`;\n    }\n\n    const command_topic = `${command_main_topic}/${uniq_id_sub}/${element.type}/${element.id}`;\n\n    const avty = [...element.config.avty];\n    if (position_topic !== null){\n        avty.push(\n            {\n                \"t\": position_topic,\n                \"val_tpl\": `{{'online' if value is defined else 'offline'}}`\n            }\n        )\n    }\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"name\": element.name,\n        \"device_class\": device_class,\n        \"command_topic\": command_topic,\n        \"payload_open\": payload_open,\n        \"payload_close\": payload_close,\n        \"payload_stop\": payload_stop,\n        \"position_open\": 100,\n        \"position_closed\": 0,   \n        \"retain\": retain,    \n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (position_topic !== null) {\n        payload[\"position_topic\"] = position_topic;\n    }\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    \n    // Todo topic central analog Gateway\n    let discovery_prefix = 'homeassistant'; // Todo Global\n    let component = 'cover';\n    let node_id = 'everhome'; // Todo Global\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 560,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "7389706a657683d0",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "init states devices.forEach",
        "func": "msg.devices.forEach(function (device) {\n    node.send(device);    \n});\nnode.send([null, msg]);\n\n\n\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1860,
        "wires": [
            [
                "c3d6f0bb540b7bac"
            ],
            [
                "7c4e5b59e42b2d9e"
            ]
        ]
    },
    {
        "id": "11cd37e7497d68a1",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - subtype",
        "func": "const uniq_id_sub = \"subtype\";\n\nconst configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.command;\n\nconst element = msg.payload;\n\nif (element[uniq_id_sub] !== undefined){ \n    const stat_t = `${element.main_topic}/${element.id}/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"ent_cat\": \"diagnostic\",\n        \"val_tpl\": `{{value_json.value if value_json.value is defined else 'false'}}`,        \n        \"dev\": {\n            \"name\": element.device_name,\n            \"mf\": element.manufacturer,\n            \"mdl\": element.model,\n            \"ids\": [\n                element.device_id\n            ],\n            \"via_device\": element.via_device\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    \n    // Todo topic central analog Gateway\n    let discovery_prefix = 'homeassistant'; // Todo Global\n    let component = 'sensor';\n    let node_id = 'everhome'; // Todo Global\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 500,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "d8509b92dc59f7c9",
        "type": "link in",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "link in - Devices",
        "links": [
            "2fdc460f34229a36"
        ],
        "x": 95,
        "y": 960,
        "wires": [
            [
                "c48afe39ac37f91c"
            ]
        ]
    },
    {
        "id": "8da9e83f729b52be",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - lastreceive",
        "func": "const uniq_id_sub = \"lastreceive\";\nconst device_class = \"timestamp\";\n\nconst element = msg.payload;\n\nif (element.ts[uniq_id_sub] !== undefined) { \n    const stat_t = `${element.main_topic}/${element.id}/ts/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"device_class\": device_class,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"ent_cat\": \"diagnostic\",\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 800,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "7473bc201344071b",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "switch - general",
        "func": "function checkOnOffKeysExist(actions) {\n    let onExists = false;\n    let offExists = false;\n    for (let i = 0; i < actions.length; i++) {\n        const action = actions[i];\n        if (action.key === 'on') {\n            onExists = true;\n        } else if (action.key === 'off') {\n            offExists = true;\n        }\n        if (onExists && offExists) {\n            break;\n        }\n    }\n    return onExists && offExists;\n}\n\n\nconst uniq_id_sub = \"general\";\n\nconst configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.command;\n\nconst element = msg.payload;\n\nlet OnOffKeysExist = false;\nif (element.actions && Array.isArray(element.actions)) {\n    OnOffKeysExist = checkOnOffKeysExist(element.actions);\n} \nif (element.states[uniq_id_sub] !== undefined && OnOffKeysExist && element.states.brightness === undefined) { \n    let icon;\n    let device_class;\n    switch (element.subtype) {\n        case 'socket':\n            device_class = 'outlet';\n            break;\n        case 'light':\n            device_class = 'switch';\n            break;\n        case 'heating':\n            device_class = 'switch';\n            icon = \"mdi:heating-coil\";\n            break;\n        default:\n            device_class = 'switch'\n    }\n\n    let command_main_topic = \"everhome/control/switch\";\n    let state_main_topic;\n\n    let stat_t;\n    if (element.type == \"group\") {\n        state_main_topic = \"everhome/group\"\n        stat_t = null;\n    } else {\n        state_main_topic = \"everhome/device\"\n        stat_t = `${state_main_topic}/${element.id}/states/${uniq_id_sub}`;\n    }\n\n    const command_topic = `${command_main_topic}/${element.type}/${element.id}`;\n\n    const avty = [...element.config.avty];\n    if (stat_t !== null){\n        avty.push(\n            {\n                \"t\": stat_t,\n                \"val_tpl\": `{{'online' if value is defined else 'offline'}}`\n            }\n        )\n    }\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"name\": element.name,\n        \"device_class\": device_class,\n        \"cmd_t\": command_topic,\n        \"icon\": icon,\n        \"pl_on\": \"on\",\n        \"pl_off\": \"off\", \n        \"val_tpl\": `{{value_json.value if value_json.value is defined else 'false'}}`,\n        \"retain\": retain,    \n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (stat_t !== null) {\n        payload[\"stat_t\"] = stat_t;\n    }\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    \n    // Todo topic central analog Gateway\n    let discovery_prefix = 'homeassistant'; // Todo Global\n    let component = 'switch';\n    let node_id = 'everhome'; // Todo Global\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 860,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "5102d38dcb2e96f2",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "light - brightness",
        "func": "function getBrightnessValueMax(arr) {\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].key === \"brightness\") {\n            return arr[i].value_max;\n        }\n    }\n    return 255;\n}\n\nconst uniq_id_sub = \"brightness\";\n\nconst configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.command;\n\nconst element = msg.payload;\n\nif (element.states[uniq_id_sub] !== undefined) { \n    const brightness_scale = getBrightnessValueMax(element.actions);\n\n    let command_main_topic = \"everhome/control/light\"\n    let light_main_topic;\n\n    let stat_t;\n    if (element.type === \"group\") {\n        light_main_topic = \"everhome/group\"\n        stat_t = null;\n    } else {\n        light_main_topic = \"everhome/device\"\n        stat_t = `${light_main_topic}/${element.id}/states/light`;\n    }\n\n    const command_topic = `${command_main_topic}/${element.type}/${element.id}`;\n\n    const avty = [...element.config.avty];\n    if (stat_t !== null){\n        avty.push(\n            {\n                \"t\": stat_t,\n                \"val_tpl\": `{{'online' if value is defined else 'offline'}}`\n            }\n        )\n    }\n\n    let payload = {\n        \"schema\": \"json\",  \n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"name\": element.name,\n        \"command_topic\": command_topic,\n        \"val_tpl\": `{{value_json.value if value_json.value is defined else 'false'}}`,\n        \"brightness_scale\": brightness_scale,\n        \"brightness\": true,\n        \"color_mode\": true,\n        \"supported_color_modes\": [\"brightness\"],\n        \"retain\": retain,    \n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (stat_t !== null) {\n        payload[\"stat_t\"] = stat_t;\n    }\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    \n    // Todo topic central analog Gateway\n    let discovery_prefix = 'homeassistant'; // Todo Global\n    let component = 'light';\n    let node_id = 'everhome'; // Todo Global\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 920,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "fc9b14e873544f4d",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - brightness",
        "func": "const uniq_id_sub = \"brightness\";\n\nconst element = msg.payload;\nconst isDevice = element.type !== undefined && element.type === 'device';\n\nif (element.states[uniq_id_sub] !== undefined && isDevice) { \n    const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"ent_cat\": \"diagnostic\",\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}    ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 980,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "a2cba29cf0d005cb",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "binary_sensor - state",
        "func": "const uniq_id_sub = \"state\";\n\nconst element = msg.payload;\n\nif (element.states[uniq_id_sub] !== undefined) { \n    const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let device_class;\n    let pl_on;\n    let pl_off;\n    switch (element.subtype) {\n        case 'window':\n            device_class = element.subtype;\n            pl_on = \"open\";\n            pl_off = \"closed\";\n            break;\n        case 'door':\n            device_class = element.subtype;\n            pl_on = \"open\";\n            pl_off = \"closed\";\n            break;\n        case 'home':\n            device_class = \"presence\";\n            pl_on = \"on\";\n            pl_off = \"off\";\n            break;            \n        default:\n            device_class = 'None'\n    }\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"device_class\": device_class,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(element.subtype, global.get(\"language\")),\n        \"pl_on\": pl_on,\n        \"pl_off\": pl_off,\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'binary_sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1040,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "f5be34b9324b441a",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "button- impulse",
        "func": "function checkimpulseExist(actions) {\n    let impulseExists = false;\n    for (let i = 0; i < actions.length; i++) {\n        const action = actions[i];\n        if (action.key === 'impulse') {\n            impulseExists = true;\n        }\n    }\n    return impulseExists;\n}\n\nconst uniq_id_sub = \"general\";\n\nconst configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.command;\n\nconst element = msg.payload;\n\nlet ImpulseKeysExist = false;\nif (element.actions && Array.isArray(element.actions)) {\n    ImpulseKeysExist = checkimpulseExist(element.actions);\n} \n//if (element.states[uniq_id_sub] !== undefined && ImpulseKeysExist) {  --> Not all Impuls devices has states.general attribut\nif (ImpulseKeysExist) {     \n    let command_main_topic = \"everhome/control/button\";\n\n    const command_topic = `${command_main_topic}/${element.type}/${element.id}`;\n    const avty = [...element.config.avty];\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"name\": element.name,\n        \"cmd_t\": command_topic,\n        \"payload_press\": \"impulse\",\n        \"val_tpl\": `{{value_json.value if value_json.value is defined else 'false'}}`,\n        \"retain\": retain,    \n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    \n    // Todo topic central analog Gateway\n    let discovery_prefix = 'homeassistant'; // Todo Global\n    let component = 'button';\n    let node_id = 'everhome'; // Todo Global\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1100,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "2c9e7c2c2e2a0e16",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "12555d2026f2b1f7",
        "name": "Set Config Done",
        "func": "global.set(msg.init_config_done,true);\nnode.log(msg.init_config_done);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 360,
        "wires": [
            [
                "0487a6ea15b08097"
            ]
        ]
    },
    {
        "id": "893ab7aca14f6f42",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "binary_sensor - connected",
        "func": "const uniq_id_sub = \"connected\";\n\nconst element = msg.payload;\n\nif (element.states[uniq_id_sub] !== undefined) { \n    const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"pl_on\": true,\n        \"pl_off\": false,\n        \"stat_cla\": \"measurement\",\n        \"dev_cla\": \"connectivity\",\n        \"ent_cat\": \"diagnostic\",\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'binary_sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 1160,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "985fe8b4415556d2",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "binary_sensor - batteryboolean",
        "func": "const uniq_id_sub = \"batteryboolean\";\n\nconst element = msg.payload;\n\nif (element.states[uniq_id_sub] !== undefined) { \n    const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"pl_on\": \"battery-low\",\n        \"pl_off\": \"battery-ok\",\n        \"dev_cla\": \"battery\",\n        \"ent_cat\": \"diagnostic\",\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'binary_sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 1220,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "c53bcdacaef85199",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - serial",
        "func": "const uniq_id_sub = \"serial\";\n\nconst element = msg.payload;\n\nif (element[uniq_id_sub] !== undefined) { \n    const stat_t = `${element.main_topic}/${element.id}/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"ent_cat\": \"diagnostic\",\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1280,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "a932c1be1b631683",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - batterypercentage",
        "func": "const uniq_id_sub = \"batterypercentage\";\n\nlet unitofmeasurement = '%';\nlet icon = \"mdi:percent-outline\";\n\nconst element = msg.payload;\n\nif (element.states[uniq_id_sub] !== undefined) { \n    const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"unit_of_measurement\": unitofmeasurement,\n        \"icon\": icon,\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 1340,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "d875932dc662107b",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - batteryvoltage",
        "func": "const uniq_id_sub = \"batteryvoltage\";\n\nlet deviceclass = 'voltage';\nlet unitofmeasurement = 'V';\nlet stateclass = 'measurement';\n\nconst element = msg.payload;\n\nif (element.states[uniq_id_sub] !== undefined) { \n    const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"unit_of_measurement\": unitofmeasurement,\n        \"state_class\": stateclass,\n        \"device_class\": deviceclass,\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}  ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1400,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "b88072ebfdb051ab",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - valve",
        "func": "const uniq_id_sub = \"valve\";\n\nconst element = msg.payload;\n\nif (element.states[uniq_id_sub] !== undefined) {\n\n    let unitofmeasurement = null;\n    let icon = null;\n\n    if (element.statedefinitions[uniq_id_sub] !== undefined && element.statedefinitions[uniq_id_sub].unitkey !== undefined) {\n        if (element.statedefinitions[uniq_id_sub].unitkey === 'percent') {\n            unitofmeasurement = '%';\n            icon = \"mdi:percent-outline\";\n        }\n    }\n\n    const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (unitofmeasurement !== null) {\n        payload[\"unit_of_measurement\"] = unitofmeasurement;\n    }\n\n    if (icon !== null) {\n        payload[\"icon\"] = icon;\n    }\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1460,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "9ac593ed81da1c65",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - temperature",
        "func": "const uniq_id_sub = \"temperature\";\n\nlet deviceclass = 'temperature';\nlet stateclass = 'measurement';\n\nconst element = msg.payload;\n\nif (element.states[uniq_id_sub] !== undefined) {\n\n    let unitofmeasurement = null;\n\n    if (element.statedefinitions[uniq_id_sub] !== undefined && element.statedefinitions[uniq_id_sub].unitkey !== undefined) {\n        if (element.statedefinitions[uniq_id_sub].unitkey === 'celsius') {\n            unitofmeasurement = '°C';\n        }\n    }\n\n    const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"state_class\": stateclass,\n        \"device_class\": deviceclass,\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (unitofmeasurement !== null) {\n        payload[\"unit_of_measurement\"] = unitofmeasurement;\n    }\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1520,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "dac4e379d1c58c0f",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - temperaturetarget",
        "func": "const uniq_id_sub = \"temperaturetarget\";\n\nlet deviceclass = 'temperature';\nlet stateclass = 'measurement';\n\nconst element = msg.payload;\n\nif (element.states[uniq_id_sub] !== undefined) {\n\n    let unitofmeasurement = null;\n\n    if (element.statedefinitions[uniq_id_sub] !== undefined && element.statedefinitions[uniq_id_sub].unitkey !== undefined) {\n        if (element.statedefinitions[uniq_id_sub].unitkey === 'celsius') {\n            unitofmeasurement = '°C';\n        }\n    }\n\n    const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"state_class\": stateclass,\n        \"device_class\": deviceclass,\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (unitofmeasurement !== null) {\n        payload[\"unit_of_measurement\"] = unitofmeasurement;\n    }\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 1580,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "18e71865b8985772",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "Check isGroupElement or isDevice",
        "func": "const element = msg.payload;\nconst groupElementHasEntities = element.entities;\nconst isGroupElement = element.group_subtype !== undefined && element.group_subtype === \"groupelement\";\nconst isDevice = element.type !== undefined && element.type === 'device';\nconst isHome = element.type !== undefined && element.type === 'home';\n\nif ((groupElementHasEntities && isGroupElement) || isDevice || isHome){\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1340,
        "wires": [
            [
                "eed6e24a403e9bd7",
                "a9fe2d63f6699e90",
                "8da9e83f729b52be",
                "7473bc201344071b",
                "5102d38dcb2e96f2",
                "fc9b14e873544f4d",
                "f5be34b9324b441a",
                "893ab7aca14f6f42",
                "985fe8b4415556d2",
                "c53bcdacaef85199",
                "a932c1be1b631683",
                "d875932dc662107b",
                "b88072ebfdb051ab",
                "9ac593ed81da1c65",
                "dac4e379d1c58c0f",
                "bae557adbb1ea41f",
                "a2cba29cf0d005cb",
                "006281a7dc4ee7f4",
                "8076456f237ea430",
                "5d5ce2dbea88f157",
                "6fd289415d798d18",
                "69d864aab7e4f633",
                "1a0d3ba8b059037f",
                "431c3797993676b0",
                "5bf8c0d282840685",
                "6e90fe1ffb3f1b49",
                "d27786bd27e11b64",
                "d4f417bb8fb9b016",
                "11868f5defbb3ea5",
                "8d21578953d34c91",
                "eae3d70df44ab014",
                "f9bc7cbca77a0e7c"
            ]
        ]
    },
    {
        "id": "bae557adbb1ea41f",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - humidity",
        "func": "const uniq_id_sub = \"humidity\";\n\nlet unitofmeasurement = '%';\nlet icon = \"mdi:percent-outline\";\n\nconst element = msg.payload;\n\nif (element.states[uniq_id_sub] !== undefined) { \n    const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"unit_of_measurement\": unitofmeasurement,\n        \"icon\": icon,\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1640,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "3099deb5b4d2a9a5",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "gateways",
        "func": "msg.gateways.forEach(function (element) {\n    node.send({ payload: element });\n});\n\nnode.send([null, msg]);\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1180,
        "wires": [
            [
                "7e24c5c34fdd420a"
            ],
            [
                "91f450526a3bd0ed"
            ]
        ]
    },
    {
        "id": "91f450526a3bd0ed",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "all other devices",
        "func": "msg.otherDevices.forEach(function (element) {\n    node.send({ payload: element });\n});\n\nnode.send([null, msg]);",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1240,
        "wires": [
            [
                "7e24c5c34fdd420a"
            ],
            [
                "92509327616b5dab"
            ]
        ]
    },
    {
        "id": "ac28c9216e9323ee",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "Split Devices",
        "func": "var gateways = [];\nvar otherDevices = [];\n\nfor (var i = 0; i < msg.devices.length; i++) {\n    var device = msg.devices[i];\n\n    if (device.subtype === \"gateway\") {\n        gateways.push(device);\n    } else {\n        otherDevices.push(device);\n    }\n}\n\nmsg.gateways = gateways;\nmsg.otherDevices = otherDevices;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1180,
        "wires": [
            [
                "3099deb5b4d2a9a5"
            ]
        ]
    },
    {
        "id": "006281a7dc4ee7f4",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - energyCounterIn",
        "func": "const uniq_id_sub = \"energyCounterIn\";\n\nconst element = msg.payload;\n\nif (element.states[uniq_id_sub] !== undefined) { \n    let unitofmeasurement;\n    let deviceclass;\n    let stateclass;\n\n    if (element.statedefinitions[uniq_id_sub] !== undefined && element.statedefinitions[uniq_id_sub].unitkey !== undefined) {\n        switch (element.statedefinitions[uniq_id_sub].unitkey) {\n            case 'wh':\n                unitofmeasurement = 'Wh';\n                deviceclass = 'energy';\n                stateclass = 'total_increasing';\n                break;\n            case 'kwh':\n                unitofmeasurement = 'kWh';\n                deviceclass = 'energy';\n                stateclass = 'total_increasing';\n                break;\n\n            default:\n\n                break;\n        }\n    }\n\n    const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"unit_of_measurement\": unitofmeasurement,\n        \"state_class\": stateclass,\n        \"device_class\": deviceclass,\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}  ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1700,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "8076456f237ea430",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - energyCounterOut",
        "func": "const uniq_id_sub = \"energyCounterOut\";\n\nconst element = msg.payload;\n\nif (element.states[uniq_id_sub] !== undefined) { \n    let unitofmeasurement;\n    let deviceclass;\n    let stateclass;\n\n    if (element.statedefinitions[uniq_id_sub] !== undefined && element.statedefinitions[uniq_id_sub].unitkey !== undefined) {\n        switch (element.statedefinitions[uniq_id_sub].unitkey) {\n            case 'wh':\n                unitofmeasurement = 'Wh';\n                deviceclass = 'energy';\n                stateclass = 'total_increasing';\n                break;\n            case 'kwh':\n                unitofmeasurement = 'kWh';\n                deviceclass = 'energy';\n                stateclass = 'total_increasing';\n                break;\n\n            default:\n\n                break;\n        }\n    }\n\n    const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"unit_of_measurement\": unitofmeasurement,\n        \"state_class\": stateclass,\n        \"device_class\": deviceclass,\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}  ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 1760,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "5d5ce2dbea88f157",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - power",
        "func": "const uniq_id_sub = \"power\";\n\nconst element = msg.payload;\n\nif (element.states[uniq_id_sub] !== undefined) { \n    let unitofmeasurement;\n    let deviceclass;\n    let stateclass;\n\n    if (element.statedefinitions[uniq_id_sub] !== undefined && element.statedefinitions[uniq_id_sub].unitkey !== undefined) {\n        switch (element.statedefinitions[uniq_id_sub].unitkey) {\n            case 'watt':\n                unitofmeasurement = 'W';\n                deviceclass = 'power';\n                stateclass = 'measurement';\n                break;\n\n            default:\n\n                break;\n        }\n    }\n\n    const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"unit_of_measurement\": unitofmeasurement,\n        \"state_class\": stateclass,\n        \"device_class\": deviceclass,\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}  ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1820,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "6fd289415d798d18",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - localip",
        "func": "const uniq_id_sub = \"localip\";\n\nconst element = msg.payload;\n\nif (element[uniq_id_sub] !== undefined) { \n    const stat_t = `${element.main_topic}/${element.id}/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"ent_cat\": \"diagnostic\",\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1880,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "69d864aab7e4f633",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - wanip",
        "func": "const uniq_id_sub = \"wanip\";\n\nconst element = msg.payload;\n\nif (element[uniq_id_sub] !== undefined) { \n    const stat_t = `${element.main_topic}/${element.id}/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"ent_cat\": \"diagnostic\",\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1940,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "1a0d3ba8b059037f",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - ip-wifi",
        "func": "const uniq_id_sub = \"ip-wifi\";\n\nconst element = msg.payload;\n\nif (element[uniq_id_sub] !== undefined) { \n    const stat_t = `${element.main_topic}/${element.id}/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"ent_cat\": \"diagnostic\",\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 2000,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "13294fbd1cf1d90c",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "climate",
        "func": "const uniq_id_sub = \"room_override\";\n\nconst central_device_id = \"everhome_central\";\n\nconst configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.command;\n\nconst element = msg.payload;\n\nconst value_temperature = \"temperature\";\n\nconst value_temperaturetarget = \"temperaturetarget\";\nconst value_override = \"override\";\n\nconst avty = [...element.config.avty];\n\nlet payload = {\n    \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n    \"name\": element.name,\n\n    \"current_temperature_topic\": `everhome/${element.type}/${element.id}/states/${value_temperature}`,\n    \"current_temperature_template\": `{{value_json.value if value_json.value is defined else 'false'}}`,\n\n    \"temperature_state_topic\": `everhome/${element.type}/${element.id}/states/${value_temperaturetarget}`,\n    \"temperature_state_template\": `{{value_json.value if value_json.value is defined else 'false'}}`,\n\n    \"temperature_command_topic\": `everhome/control/climate/temperature/${element.type}/${element.id}`,\n\n    \"mode_state_topic\": `everhome/${element.type}/${element.id}/${value_override}`,\n    \"mode_state_template\": `{{value_json.value if value_json.value is defined else 'off'}}`,\n\n    \"mode_command_topic\": `everhome/control/climate/mode/${element.type}/${element.id}`,\n    \"modes\": [\n        \"auto\",\n        \"off\"\n    ],\n    \"temp_unit\": \"C\",\n    \"temp_step\": 0.5,\n    \"retain\": retain,    \n    \"device\": {\n        //\"name\": element.device_name,\n        \"ids\": [\n            central_device_id\n        ]\n    },\n    \"avty\": avty,\n    \"avty_mode\": \"all\"\n};\n\nif (element.set_object_id) {\n    payload[\"obj_id\"] = payload.uniq_id;\n}\n\n// Todo topic central analog Gateway\nlet discovery_prefix = 'homeassistant'; // Todo Global\nlet component = 'climate';\nlet node_id = 'everhome'; // Todo Global\n\nlet prefix = 'config';\nlet topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\nmsg.topic = topic;\n\nmsg.payload = payload;\nmsg.data = element; \nnode.send(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 2560,
        "wires": [
            [
                "4a300ee35db77eae",
                "3cfb5b52c12a7162"
            ]
        ]
    },
    {
        "id": "26ae8609e9773ec3",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "Room Overrides",
        "func": "msg.room_overrides.forEach(function (element) {\n    node.send({ payload: element });\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 2560,
        "wires": [
            [
                "13294fbd1cf1d90c"
            ]
        ]
    },
    {
        "id": "e846570c36ad4d23",
        "type": "delay",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "Wait Config Central Done",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1150,
        "y": 2480,
        "wires": [
            [
                "9680249a2bb20205"
            ]
        ]
    },
    {
        "id": "9680249a2bb20205",
        "type": "switch",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "Check Config Central Done",
        "property": "config.central_done",
        "propertyType": "global",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1160,
        "y": 2560,
        "wires": [
            [
                "e846570c36ad4d23"
            ],
            [
                "26ae8609e9773ec3"
            ]
        ]
    },
    {
        "id": "86fd5f35c0588851",
        "type": "link in",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "link in - Room Overrides",
        "links": [
            "951449e6169ec919"
        ],
        "x": 915,
        "y": 2540,
        "wires": [
            [
                "9680249a2bb20205"
            ]
        ]
    },
    {
        "id": "aeb87f3ae70b534d",
        "type": "link out",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "link out - REST-API Room Data",
        "mode": "link",
        "links": [
            "9b27b02732ad3f57"
        ],
        "x": 2105,
        "y": 2480,
        "wires": []
    },
    {
        "id": "0487a6ea15b08097",
        "type": "link out",
        "z": "95278f532bb93da2",
        "g": "12555d2026f2b1f7",
        "name": "link out 2",
        "mode": "link",
        "links": [],
        "x": 1575,
        "y": 360,
        "wires": []
    },
    {
        "id": "03861f1917de04df",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "Set Config Done",
        "func": "global.set(\"all_configs_done\",true);\nnode.log(\"all_configs_done\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1620,
        "wires": [
            [
                "211a9284e3487795"
            ]
        ]
    },
    {
        "id": "d4f417bb8fb9b016",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "binary_sensor - local_api_connected",
        "func": "const uniq_id_sub = \"local_api_connected\";\n\nconst element = msg.payload;\n\nif (element.states[uniq_id_sub] !== undefined) { \n    const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"pl_on\": true,\n        \"pl_off\": false,\n        \"stat_cla\": \"measurement\",\n        \"dev_cla\": \"connectivity\",\n        \"ent_cat\": \"diagnostic\",\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'binary_sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 2240,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "92509327616b5dab",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "Filter Electricitymeters",
        "func": "const devices = global.get(\"devices\");\n\ndevices.forEach(function (element) {\n    if (\n        typeof element !== 'undefined' &&\n        typeof element.states !== 'undefined' &&\n        element.states.energyCounterIn !== undefined &&\n        element.states.energyCounterOut !== undefined &&\n        element.states.power !== undefined &&\n        element.states.connected !== undefined\n    ) {\n        element.states.local_api_connected = false;\n        node.send({ payload: element });\n    }\n});\n\nnode.send([null, msg]);\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1300,
        "wires": [
            [
                "7e24c5c34fdd420a"
            ],
            [
                "fd9d7d82a94f4276"
            ]
        ]
    },
    {
        "id": "431c3797993676b0",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "binary_sensor - motion",
        "func": "const uniq_id_sub = \"motion\";\n\nconst element = msg.payload;\n\nif (element.states[uniq_id_sub] !== undefined) { \n    const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"pl_on\": true,\n        \"pl_off\": false,\n        \"dev_cla\": \"motion\",\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'binary_sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 2060,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "5bf8c0d282840685",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - action",
        "func": "function findTriggers(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            const value = obj[key];\n            if (typeof value === 'object') {\n                if (key === 'triggers') {\n                    return value;\n                } else {\n                    const triggers = findTriggers(value);\n                    if (triggers) {\n                        return triggers;\n                    }\n                }\n            }\n        }\n    }\n    return null;\n}\n\nconst uniq_id_sub = \"action\";\nlet icon = \"mdi:remote\";\nconst element = msg.payload;\nconst triggers = findTriggers(element);\nlet triggersArray;\n\nif (triggers !== null) {\n        const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n        const avty = [...element.config.avty];\n        avty.push(\n            {\n                \"t\": stat_t,\n                \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n            }\n        )\n\n        let payload = {\n            \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n            \"stat_t\": stat_t,\n            \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n            \"ent_cat\": \"diagnostic\",\n            \"icon\": icon,\n            \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n            \"device\": {\n                //\"name\": element.device_name,\n                \"ids\": [\n                    element.device_id\n                ]\n            },\n            \"avty\": avty,\n            \"avty_mode\": \"all\"\n        };\n\n        if (element.set_object_id) {\n            payload[\"obj_id\"] = payload.uniq_id;\n        }\n        let discovery_prefix = 'homeassistant';\n        let component = 'sensor';\n        let node_id = 'everhome';\n\n        let prefix = 'config';\n        let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n        msg.topic = topic;\n\n        msg.payload = payload;\n        node.send(msg);\n}\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 2120,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "6e90fe1ffb3f1b49",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "cover - slat",
        "func": "const uniq_id_sub = \"slat\";\n\nconst configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.command;\n\nconst element = msg.payload;\n\nif (element.subtype !== undefined && element.subtype === 'blind') {     \n    const payload_open = \"slatup\";\n    const payload_close = \"slatdown\";\n    const payload_stop = \"stop\";\n    const device_class = element.subtype;\n\n    let command_main_topic = \"everhome/control/cover\"\n\n    const command_topic = `${command_main_topic}/${uniq_id_sub}/${element.type}/${element.id}`;\n    const avty = [...element.config.avty];\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"name\": element.name,\n        \"device_class\": device_class,\n        \"command_topic\": command_topic,\n        \"payload_open\": payload_open,\n        \"payload_close\": payload_close,\n        \"payload_stop\": payload_stop,\n        \"retain\": retain,\n        \"icon\": \"mdi:blinds-horizontal-closed\",\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    \n    // Todo topic central analog Gateway\n    let discovery_prefix = 'homeassistant'; // Todo Global\n    let component = 'cover';\n    let node_id = 'everhome'; // Todo Global\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}\n    \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 620,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "d27786bd27e11b64",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "device_automation - actions",
        "func": "function findTriggers(obj) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      const value = obj[key];\n      if (typeof value === 'object') {\n        if (key === 'triggers') {\n          return value;\n        } else {\n          const triggers = findTriggers(value);\n          if (triggers) {\n            return triggers;\n          }\n        }\n      }\n    }\n  }\n  return null;\n}\n\nconst element = msg.payload;\nconst triggers = findTriggers(element);\nlet triggersArray;\n\nif (triggers !== null) {\n  triggersArray = Object.values(triggers);\n  triggersArray.forEach(function (action) {\n\n      const uniq_id_sub = `action_${action.key}`;\n      const stat_t = `${element.main_topic}/${element.id}/actions/${uniq_id_sub}`;\n      let payload = {\n          \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n          \"stat_t\": stat_t,\n          \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n          \"automation_type\": \"trigger\",\n          \"device\": {\n              //\"name\": element.device_name,\n              \"ids\": [\n                  element.device_id\n              ]\n          },\n          \"payload\": action.key,\n          \"subtype\": action.key,\n          \"topic\": stat_t,\n          \"type\": \"action\"\n      };\n\n      if (element.set_object_id) {\n          payload[\"obj_id\"] = payload.uniq_id;\n      }\n      let discovery_prefix = 'homeassistant';\n      let component = 'device_automation';\n      let node_id = 'everhome';\n\n      let prefix = 'config';\n      let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n      msg.topic = topic;\n\n      msg.payload = payload;\n      node.send(msg);\n  });\n\n\n\n\n\n\n\n\n\n\n}\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 2180,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "34f5a994d6ce764c",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "Check isMainGroup or isDevice or isHome",
        "func": "const element = msg.payload;\nconst subtypeIsDefined = element.subtype !== \"undefined\"; \nconst isMainGroup = element.group_subtype !== undefined && element.group_subtype === \"maingroup\";\nconst isDevice = element.type !== undefined && element.type === 'device';\nconst isHome = element.type !== undefined && element.type === 'home';\n\nif (subtypeIsDefined && (isMainGroup || isDevice || isHome) ){\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1260,
        "wires": [
            [
                "11cd37e7497d68a1"
            ]
        ]
    },
    {
        "id": "7e24c5c34fdd420a",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "input",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1300,
        "wires": [
            [
                "34f5a994d6ce764c",
                "18e71865b8985772"
            ]
        ]
    },
    {
        "id": "fd9d7d82a94f4276",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "maingroups.forEach",
        "func": "msg.maingroups = msg.groups;\n\nmsg.maingroups.forEach(function(element) {\n    node.send({ payload: element });    \n});\n\nnode.send([null, msg]);\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1360,
        "wires": [
            [
                "7e24c5c34fdd420a"
            ],
            [
                "f4f4ec8d0481f7ce"
            ]
        ]
    },
    {
        "id": "f4f4ec8d0481f7ce",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "element.group_elements.forEach",
        "func": "msg.maingroups.forEach(function(element) {\n    element.group_elements.forEach(function (group_element) {\n        node.send({ payload: group_element });    \n    });    \n});\n\nnode.send([null, msg]);\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1420,
        "wires": [
            [
                "7e24c5c34fdd420a"
            ],
            [
                "3d3385e7c58703a0"
            ]
        ]
    },
    {
        "id": "211a9284e3487795",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "init maingroups.forEach",
        "func": "msg.maingroups.forEach(function (element) {\n    node.send(element);\n});\n\nnode.send([null, msg]);",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1740,
        "wires": [
            [
                "c3d6f0bb540b7bac"
            ],
            [
                "6955011acf40111c"
            ]
        ]
    },
    {
        "id": "6955011acf40111c",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "element.group_elements.forEach",
        "func": "msg.maingroups.forEach(function (element) {\n    element.group_elements.forEach(function (group_element) {\n        node.send(group_element);\n    });\n});\nnode.send([null, msg]);\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1800,
        "wires": [
            [
                "c3d6f0bb540b7bac"
            ],
            [
                "7389706a657683d0"
            ]
        ]
    },
    {
        "id": "c3d6f0bb540b7bac",
        "type": "link out",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "link out - Group Data",
        "mode": "link",
        "links": [
            "5e8def8103a3ab3f"
        ],
        "x": 745,
        "y": 1800,
        "wires": []
    },
    {
        "id": "17acee79616b0ac5",
        "type": "comment",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "Config",
        "info": "",
        "x": 370,
        "y": 1120,
        "wires": []
    },
    {
        "id": "9b26a60638ddc257",
        "type": "comment",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "Init",
        "info": "",
        "x": 370,
        "y": 1680,
        "wires": []
    },
    {
        "id": "bae1c73d625fbabc",
        "type": "delay",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 1560,
        "wires": [
            [
                "03861f1917de04df"
            ]
        ]
    },
    {
        "id": "3cfb5b52c12a7162",
        "type": "switch",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "",
        "property": "all_configs_done",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1930,
        "y": 2480,
        "wires": [
            [
                "aeb87f3ae70b534d"
            ],
            [
                "78e4f8f72d0a222b"
            ]
        ]
    },
    {
        "id": "78e4f8f72d0a222b",
        "type": "delay",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1940,
        "y": 2560,
        "wires": [
            [
                "3cfb5b52c12a7162"
            ]
        ]
    },
    {
        "id": "3d3385e7c58703a0",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "homes",
        "func": "msg.homes.forEach(function (element) {\n    node.send({ payload: element });\n});\n\nnode.send([null, msg]);",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1480,
        "wires": [
            [
                "7e24c5c34fdd420a"
            ],
            [
                "bae1c73d625fbabc"
            ]
        ]
    },
    {
        "id": "7c4e5b59e42b2d9e",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "init states homes.forEach",
        "func": "msg.homes.forEach(function (home) {\n    node.send(home);    \n});",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1920,
        "wires": [
            [
                "c3d6f0bb540b7bac"
            ]
        ]
    },
    {
        "id": "11868f5defbb3ea5",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "button- home presence-set",
        "func": "let uniq_id_sub = \"option_not_valid\";\n\nconst configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.command;\n\nconst element = msg.payload;\n\nlet icon;\n\nif (element.statedefinitions !== undefined && element.statedefinitions.general !== undefined && element.statedefinitions.general.options !== undefined && Array.isArray(element.statedefinitions.general.options) && element.type === 'home') { \n    let payload_press;\n    element.statedefinitions.general.options.forEach(function (option) { \n\n        switch (option) {\n            case \"1\":\n                uniq_id_sub = \"present\";\n                payload_press = option;\n                icon = \"mdi:home\"; \n                break;\n            case \"0\":\n                uniq_id_sub = \"away\";\n                payload_press = option;  \n                icon = \"mdi:home-export-outline\";                          \n                break;\n            case \"h\":\n                uniq_id_sub = \"holiday\";\n                payload_press = option;  \n                icon = \"mdi:airplane\";                                  \n                break;\n            default:  \n                icon = \"mdi:help-circle-outline\";                       \n                uniq_id_sub = \"option_not_valid\";\n        }       \n\n        let command_main_topic = \"everhome/control/button\";\n\n        const command_topic = `${command_main_topic}/${element.type}/${uniq_id_sub}/${element.id}`;\n        const avty = [...element.config.avty];\n\n        let payload = {\n            \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n            \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n            \"icon\": icon,\n            \"cmd_t\": command_topic,\n            \"payload_press\": payload_press,\n            \"val_tpl\": `{{value_json.value if value_json.value is defined else 'false'}}`,\n            \"retain\": retain,    \n            \"device\": {\n                //\"name\": element.device_name,\n                \"ids\": [\n                    element.device_id\n                ]\n            },\n            \"avty\": avty,\n            \"avty_mode\": \"all\"\n        };\n\n        if (element.set_object_id) {\n            payload[\"obj_id\"] = payload.uniq_id;\n        }\n        \n        // Todo topic central analog Gateway\n        let discovery_prefix = 'homeassistant'; // Todo Global\n        let component = 'button';\n        let node_id = 'everhome'; // Todo Global\n\n        let prefix = 'config';\n        let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n        msg.topic = topic;\n\n        msg.payload = payload;\n        node.send(msg);\n\n    });\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 2300,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "8d21578953d34c91",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - presence",
        "func": "const uniq_id_sub = \"presence\";\n\nconst element = msg.payload;\n\nif (element[uniq_id_sub] !== undefined) { \n    const stat_t = `${element.main_topic}/${element.id}/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"ent_cat\": \"diagnostic\",\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2360,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "eae3d70df44ab014",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "sensor - luminance",
        "func": "const uniq_id_sub = \"luminance\";\n\nlet deviceclass = 'illuminance';\nlet stateclass = 'measurement';\n\nconst element = msg.payload;\n\nif (element.states[uniq_id_sub] !== undefined) {\n\n    let unitofmeasurement = null;\n\n    if (element.statedefinitions[uniq_id_sub] !== undefined && element.statedefinitions[uniq_id_sub].unitkey !== undefined) {\n            unitofmeasurement = element.statedefinitions[uniq_id_sub].unitkey;\n    }\n\n    const stat_t = `${element.main_topic}/${element.id}/states/${uniq_id_sub}`;\n    const avty = [...element.config.avty];\n    avty.push(\n        {\n            \"t\": stat_t,\n            \"val_tpl\": `{{'online' if value_json.value is defined else 'offline'}}`\n        }\n    )\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"stat_t\": stat_t,\n        \"name\": ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(uniq_id_sub, global.get(\"language\")),\n        \"state_class\": stateclass,\n        \"device_class\": deviceclass,\n        \"val_tpl\": `{{ value_json.value if value_json.value is defined else 'false'}}`,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (unitofmeasurement !== null) {\n        payload[\"unit_of_measurement\"] = unitofmeasurement;\n    }\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n    let discovery_prefix = 'homeassistant';\n    let component = 'sensor';\n    let node_id = 'everhome';\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2420,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "f9bc7cbca77a0e7c",
        "type": "function",
        "z": "95278f532bb93da2",
        "g": "b2f04ce1015743c7",
        "name": "cover - toggle",
        "func": "const uniq_id_sub = \"toggle\";\n\nconst configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.command;\n\nconst element = msg.payload;\n\nif (element.subtype !== undefined && element.subtype === 'shutter' || element.subtype === 'blind' || element.subtype === 'awning') {    \n    let command_main_topic = \"everhome/control/cover\";\n\n    const command_topic = `${command_main_topic}/${uniq_id_sub}/${element.type}/${element.id}`;\n    const avty = [...element.config.avty];\n\n    let payload = {\n        \"uniq_id\": `${element.uniq_id_main}_${uniq_id_sub}`,\n        \"name\": element.name,\n        \"cmd_t\": command_topic,\n        \"payload_press\": \"toggle\",\n        \"val_tpl\": `{{value_json.value if value_json.value is defined else 'false'}}`,\n        \"retain\": retain,\n        \"device\": {\n            //\"name\": element.device_name,\n            \"ids\": [\n                element.device_id\n            ]\n        },\n        \"avty\": avty,\n        \"avty_mode\": \"all\"\n    };\n\n    if (element.set_object_id) {\n        payload[\"obj_id\"] = payload.uniq_id;\n    }\n\n    // Todo topic central analog Gateway\n    let discovery_prefix = 'homeassistant'; // Todo Global\n    let component = 'button';\n    let node_id = 'everhome'; // Todo Global\n\n    let prefix = 'config';\n    let topic = `${discovery_prefix}/${component}/${node_id}/${element.uniq_id_main}_${uniq_id_sub}/${prefix}`;\n    msg.topic = topic;\n\n    msg.payload = payload;\n    node.send(msg);   \n}\n    \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 680,
        "wires": [
            [
                "4a300ee35db77eae"
            ]
        ]
    },
    {
        "id": "58dfceae4a681e65",
        "type": "switch",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "reset",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 410,
        "y": 1480,
        "wires": [
            [
                "ddc1255baf4bfa15"
            ]
        ]
    },
    {
        "id": "3ebed5969e5255fb",
        "type": "debug",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 1420,
        "wires": []
    },
    {
        "id": "0556ba10c4453dd8",
        "type": "debug",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 1620,
        "wires": []
    },
    {
        "id": "9bd343a04e678770",
        "type": "debug",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1620,
        "wires": []
    },
    {
        "id": "503466892b317314",
        "type": "debug",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1620,
        "wires": []
    },
    {
        "id": "d6e37092529d6a44",
        "type": "delay",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 1480,
        "wires": [
            [
                "c74d84ace096bbab",
                "0179892b815aa565",
                "503466892b317314"
            ]
        ]
    },
    {
        "id": "b42d1a0fa27d3d13",
        "type": "inject",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1560,
        "wires": [
            [
                "ddc1255baf4bfa15"
            ]
        ]
    },
    {
        "id": "125cd9e02a40321c",
        "type": "comment",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "Restart",
        "info": "",
        "x": 1550,
        "y": 1540,
        "wires": []
    },
    {
        "id": "497ca1deab9c9ed2",
        "type": "comment",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "Init",
        "info": "",
        "x": 1230,
        "y": 1540,
        "wires": []
    },
    {
        "id": "4bc8da691a0969c3",
        "type": "comment",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "Delete Config",
        "info": "",
        "x": 990,
        "y": 1540,
        "wires": []
    },
    {
        "id": "8d764efedf71d953",
        "type": "comment",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "Reset",
        "info": "",
        "x": 130,
        "y": 1440,
        "wires": []
    },
    {
        "id": "fab294fcd252736a",
        "type": "link out",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "link out - restart",
        "mode": "link",
        "links": [
            "d49769c6a79c5c96"
        ],
        "x": 1515,
        "y": 1580,
        "wires": []
    },
    {
        "id": "a3ea0b2a99f1cfbe",
        "type": "link out",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "link out - Init",
        "mode": "link",
        "links": [
            "d04a2eea4aaf4f4e"
        ],
        "x": 1215,
        "y": 1580,
        "wires": []
    },
    {
        "id": "0af17e3e0a40fcef",
        "type": "delay",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1360,
        "y": 1480,
        "wires": [
            [
                "0556ba10c4453dd8",
                "1308aed5422ca167",
                "fab294fcd252736a"
            ]
        ]
    },
    {
        "id": "c74d84ace096bbab",
        "type": "delay",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1060,
        "y": 1480,
        "wires": [
            [
                "0af17e3e0a40fcef",
                "a3ea0b2a99f1cfbe",
                "9bd343a04e678770"
            ]
        ]
    },
    {
        "id": "0179892b815aa565",
        "type": "link out",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "link out - Delete Config",
        "mode": "link",
        "links": [
            "14044e685c1fb612"
        ],
        "x": 945,
        "y": 1580,
        "wires": []
    },
    {
        "id": "96cf4afb238f9a2a",
        "type": "debug",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 1480,
        "wires": []
    },
    {
        "id": "af34c99b9832290b",
        "type": "mqtt in",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "",
        "topic": "everhome/control/refresh",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "010c8dcccc60a718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 1480,
        "wires": [
            [
                "3ebed5969e5255fb",
                "58dfceae4a681e65"
            ]
        ]
    },
    {
        "id": "0d5be596b5af6ddd",
        "type": "comment",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Climate - Mode",
        "info": "",
        "x": 160,
        "y": 1060,
        "wires": []
    },
    {
        "id": "4dfbf75f2b2cdb03",
        "type": "mqtt in",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "topic": "everhome/control/climate/mode/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "010c8dcccc60a718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 1120,
        "wires": [
            [
                "5554f8103b1b3745"
            ]
        ]
    },
    {
        "id": "5554f8103b1b3745",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Prepare Data",
        "func": "function getState(state) {\n    if (state === 'auto') {\n        return 'override-begin';\n    } else if (state === 'off') {\n        return 'override-cancel';\n    } else {\n        return null;\n    }\n}\n\nfunction extractElement(topic, pos) {\n    const parts = topic.split('/');\n    return parts[parts.length - pos];\n}\n\nlet action = (getState(msg.payload));\nlet topic = msg.topic;\n\nlet element_type = extractElement(topic, 2);\nlet element_id = extractElement(topic, 1);\n\nlet url = `https://everhome.cloud/${element_type}/${element_id}/execute`;\nmsg.url = url;\n\n\n// JSON-Objekt erstellen und mit Variablen füllen\n// check if override is activated\nlet roomid = parseInt(element_id, 10);\nlet rooms = global.get('rooms');\nlet room = rooms.find(obj => obj.id === roomid);\n\nlet temperature = room.states.temperaturetarget;\nlet jsonObject = {\n    \"action\": action,\n    \"override\":{\n    \"type\": \"unlimited\", \n        \"temperature\": temperature\n    }\n};\nmsg.payload = jsonObject;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1120,
        "wires": [
            [
                "99ce772ef0594ea8"
            ]
        ]
    },
    {
        "id": "99ce772ef0594ea8",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Add Bearer Token",
        "func": "const token = global.get('accessToken');\nif (token) {\n    msg.headers = {\n        'Authorization': `Bearer ${token}`,\n        'User-Agent': 'everHome2MQTT'\n    };\n    return msg;\n} else {\n    node.error('Token not found');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 1120,
        "wires": [
            [
                "15a26c577514f92d"
            ]
        ]
    },
    {
        "id": "15a26c577514f92d",
        "type": "http request",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1490,
        "y": 1120,
        "wires": [
            [
                "a4f0e09e31ead929"
            ]
        ]
    },
    {
        "id": "c2e0edcd58416128",
        "type": "mqtt in",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "topic": "everhome/control/climate/temperature/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "010c8dcccc60a718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 980,
        "wires": [
            [
                "8afe0e15e3936c4d"
            ]
        ]
    },
    {
        "id": "0d3df798c1178832",
        "type": "comment",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Climate - Temperature",
        "info": "",
        "x": 180,
        "y": 920,
        "wires": []
    },
    {
        "id": "8afe0e15e3936c4d",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Prepare Data",
        "func": "function extractElement(topic, pos) {\n    const parts = topic.split('/');\n    return parts[parts.length - pos];\n}\n// get msg data\nlet targetTemperature = msg.payload;\nlet topic = msg.topic;\n\nlet element_type = extractElement(topic, 2);\nlet element_id = extractElement(topic, 1);\n\n//set url\nlet url = `https://everhome.cloud/${element_type}/${element_id}/execute`;\nmsg.url = url;\n\n// set override payload \nlet payload = {\n    \"action\": \"override-begin\",\n    \"override\": {\n        \"type\": \"unlimited\",\n        \"temperature\": targetTemperature\n    }\n};\nmsg.payload = payload;\n\n// check hvac mode is auto\nlet roomid = parseInt(element_id, 10);\nlet rooms = global.get('rooms');\n\nlet hvac_states = global.get('hvac_states');\nlet hvacIsAuto = false;\n\nif (Array.isArray(hvac_states)) {\n    let hvac_state = hvac_states.find(obj => obj.id === roomid);\n    if (hvac_state && hvac_state.value === 'auto') {\n        hvacIsAuto = true;\n    }\n}\n\nif (hvacIsAuto && targetTemperature !== \"\") {\n    node.warn(msg);\n    return msg;\n} else {\n    node.warn(msg);\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1060,
        "wires": [
            [
                "99ce772ef0594ea8"
            ]
        ]
    },
    {
        "id": "5b391f292ab49989",
        "type": "comment",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Control Covers",
        "info": "",
        "x": 160,
        "y": 140,
        "wires": []
    },
    {
        "id": "a367026312ac88fd",
        "type": "mqtt in",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "topic": "everhome/control/cover/singlemotion/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "010c8dcccc60a718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 200,
        "wires": [
            [
                "cb3fe56a8ae3e3d9",
                "4fcd3f4dca28e450"
            ]
        ]
    },
    {
        "id": "cb3fe56a8ae3e3d9",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Cover Stop",
        "func": "function extractElement(topic, pos) {\n    const parts = topic.split('/');\n    return parts[parts.length - pos];\n}\n\nlet element_type = extractElement(msg.topic, 2);\nlet element_id = extractElement(msg.topic, 1);\n\nconst main = \"states\";\n\nconst type = element_type;\n\nlet main_topic = `everhome/${type}`;\n\nconst topic = `${main_topic}/${element_id}/${main}/position`;\nmsg.topic = topic;\n\nlet coverstop = `coverstop_${type}_${element_id}`;\n\nif (msg.payload == 'stop'){\n    global.set(coverstop, true);    \n    msg.payload = 50;\n    return msg;\n}else{\n    global.set(coverstop, false);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 100,
        "wires": [
            [
                "379f5d9060a1d5ab"
            ]
        ]
    },
    {
        "id": "97aee404750bc0aa",
        "type": "mqtt in",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "topic": "everhome/control/cover/slat/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "010c8dcccc60a718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 280,
        "wires": [
            [
                "4fcd3f4dca28e450"
            ]
        ]
    },
    {
        "id": "4fcd3f4dca28e450",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Prepare Data",
        "func": "function extractElement(topic, pos) {\n    const parts = topic.split('/');\n    return parts[parts.length - pos];\n}\n// get msg data\nlet topic = msg.topic;\nlet action = msg.payload;\n\n\n\nlet element_type = extractElement(topic, 2);\nlet element_id = extractElement(topic, 1);\n\n//set url\nlet url = `https://everhome.cloud/${element_type}/${element_id}/execute`;\nmsg.url = url;\n\nmsg.payload = action;\n\nif(typeof msg.payload !== 'object'){\n    let payload;\n    payload = {\n        \"action\": action\n    };\n    msg.payload = payload;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 280,
        "wires": [
            [
                "4fd098eb3e166066"
            ]
        ]
    },
    {
        "id": "4fd098eb3e166066",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Add Bearer Token",
        "func": "const token = global.get('accessToken');\nif (token) {\n    msg.headers = {\n        'Authorization': `Bearer ${token}`,\n        'User-Agent': 'everHome2MQTT'\n    };\n    return msg;\n} else {\n    node.error('Token not found');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 280,
        "wires": [
            [
                "a785786d812c0dad",
                "c8d8dbc33e50a7ca"
            ]
        ]
    },
    {
        "id": "c8d8dbc33e50a7ca",
        "type": "http request",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1390,
        "y": 280,
        "wires": [
            [
                "3547aa46ead492f0"
            ]
        ]
    },
    {
        "id": "6c146c47d3e7dd94",
        "type": "comment",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Control Pulse Buttons",
        "info": "",
        "x": 180,
        "y": 560,
        "wires": []
    },
    {
        "id": "11aa817591621cc2",
        "type": "mqtt in",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "topic": "everhome/control/button/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "010c8dcccc60a718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 620,
        "wires": [
            [
                "4fcd3f4dca28e450"
            ]
        ]
    },
    {
        "id": "dab55c07e59576d7",
        "type": "comment",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Control Lights",
        "info": "",
        "x": 150,
        "y": 760,
        "wires": []
    },
    {
        "id": "7acf82ade1e1f7ae",
        "type": "mqtt in",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "topic": "everhome/control/light/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "010c8dcccc60a718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 820,
        "wires": [
            [
                "88d596965dab338c"
            ]
        ]
    },
    {
        "id": "0244ba8c5b7a47a2",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Add Bearer Token",
        "func": "const token = global.get('accessToken');\nif (token) {\n    msg.headers = {\n        'Authorization': `Bearer ${token}`,\n        'User-Agent': 'everHome2MQTT'\n    };\n    return msg;\n} else {\n    node.error('Token not found');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 900,
        "wires": [
            [
                "2e011f241d948e79"
            ]
        ]
    },
    {
        "id": "2e011f241d948e79",
        "type": "http request",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1490,
        "y": 900,
        "wires": [
            [
                "1c7faf0784dd7ec1"
            ]
        ]
    },
    {
        "id": "1b256dad245d72bb",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Brightness",
        "func": "let payload = {\n    \"action\": \"brightness\",\n    \"brightness\": msg.rest_action.brightness,\n};\n\nmsg.payload = payload;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 800,
        "wires": [
            [
                "a3cbc925029fbaa3"
            ]
        ]
    },
    {
        "id": "5a765987fba18a3f",
        "type": "http request",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1490,
        "y": 800,
        "wires": [
            [
                "fcf1cb60453c993c",
                "f2e23ac8d5180e61"
            ]
        ]
    },
    {
        "id": "a3cbc925029fbaa3",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Add Bearer Token",
        "func": "const token = global.get('accessToken');\nif (token) {\n    msg.headers = {\n        'Authorization': `Bearer ${token}`,\n        'User-Agent': 'everHome2MQTT'\n    };\n    return msg;\n} else {\n    node.error('Token not found');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 800,
        "wires": [
            [
                "5a765987fba18a3f"
            ]
        ]
    },
    {
        "id": "fcf1cb60453c993c",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "On/Off",
        "func": "let payload = {\n    \"action\": msg.rest_action.state,\n};\n\nmsg.payload = payload;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 900,
        "wires": [
            [
                "0244ba8c5b7a47a2"
            ]
        ]
    },
    {
        "id": "88d596965dab338c",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Prepare Data",
        "func": "function extractElement(topic, pos) {\n    const parts = topic.split('/');\n    return parts[parts.length - pos];\n}\n// get msg data\nlet topic = msg.topic;\n\nmsg.payload.state = msg.payload.state.toLowerCase();\nlet action = msg.payload;\nmsg.rest_action = action;\n\nlet element_type = extractElement(topic, 2);\nlet element_id = extractElement(topic, 1);\n\n//set url\nlet url = `https://everhome.cloud/${element_type}/${element_id}/execute`;\nmsg.url = url;\n\n// set override payload \nlet payload = {\n    \"action\": action\n};\n\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 820,
        "wires": [
            [
                "c107e2fda3ca5ad8"
            ]
        ]
    },
    {
        "id": "c107e2fda3ca5ad8",
        "type": "switch",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "property": "rest_action.brightness",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 820,
        "wires": [
            [
                "fcf1cb60453c993c"
            ],
            [
                "1b256dad245d72bb"
            ]
        ]
    },
    {
        "id": "21765dfa746c591a",
        "type": "mqtt out",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "010c8dcccc60a718",
        "x": 1170,
        "y": 160,
        "wires": []
    },
    {
        "id": "379f5d9060a1d5ab",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Retain State",
        "func": "const configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.state;\nmsg.retain = retain;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 160,
        "wires": [
            [
                "21765dfa746c591a"
            ]
        ]
    },
    {
        "id": "ddc1255baf4bfa15",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "log reset",
        "func": "node.log(\"reset started\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1480,
        "wires": [
            [
                "d6e37092529d6a44"
            ]
        ]
    },
    {
        "id": "1308aed5422ca167",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "ebad0b280b30e495",
        "name": "log finished",
        "func": "node.log(\"reset finished\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1480,
        "wires": [
            [
                "96cf4afb238f9a2a"
            ]
        ]
    },
    {
        "id": "4cf0fc56afb84bfa",
        "type": "comment",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Control Switches",
        "info": "",
        "x": 160,
        "y": 440,
        "wires": []
    },
    {
        "id": "be17a2cf7f626295",
        "type": "mqtt in",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "topic": "everhome/control/switch/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "010c8dcccc60a718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 500,
        "wires": [
            [
                "4fcd3f4dca28e450"
            ]
        ]
    },
    {
        "id": "1bf1f44899b3619a",
        "type": "http in",
        "z": "7cbd671fa0ddc005",
        "g": "3e61b13e9b5416f9",
        "name": "",
        "url": "/restart",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1780,
        "wires": [
            [
                "1cbcc803a1d1a826"
            ]
        ]
    },
    {
        "id": "65a32b1d5cf8b00f",
        "type": "http response",
        "z": "7cbd671fa0ddc005",
        "g": "3e61b13e9b5416f9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1010,
        "y": 1780,
        "wires": []
    },
    {
        "id": "1cbcc803a1d1a826",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "3e61b13e9b5416f9",
        "name": "statusCode",
        "func": "msg.statusCode = 200;\nglobal.set('tokenok',false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1780,
        "wires": [
            [
                "65a32b1d5cf8b00f",
                "6a98eb05e3436cd0",
                "a9f46d4f34548d1d"
            ]
        ]
    },
    {
        "id": "6a98eb05e3436cd0",
        "type": "link out",
        "z": "7cbd671fa0ddc005",
        "g": "3e61b13e9b5416f9",
        "name": "link out - restart",
        "mode": "link",
        "links": [
            "d49769c6a79c5c96"
        ],
        "x": 735,
        "y": 1860,
        "wires": []
    },
    {
        "id": "2035f8f023522ff6",
        "type": "comment",
        "z": "7cbd671fa0ddc005",
        "g": "3e61b13e9b5416f9",
        "name": "Restart",
        "info": "",
        "x": 130,
        "y": 1720,
        "wires": []
    },
    {
        "id": "a9f46d4f34548d1d",
        "type": "debug",
        "z": "7cbd671fa0ddc005",
        "g": "3e61b13e9b5416f9",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1820,
        "wires": []
    },
    {
        "id": "f2e23ac8d5180e61",
        "type": "debug",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 800,
        "wires": []
    },
    {
        "id": "3547aa46ead492f0",
        "type": "debug",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 280,
        "wires": []
    },
    {
        "id": "1c7faf0784dd7ec1",
        "type": "debug",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 900,
        "wires": []
    },
    {
        "id": "a4f0e09e31ead929",
        "type": "debug",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 1120,
        "wires": []
    },
    {
        "id": "2643a13c4533c11d",
        "type": "comment",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Home - Presence-Set",
        "info": "",
        "x": 180,
        "y": 1200,
        "wires": []
    },
    {
        "id": "7e00c34979521e58",
        "type": "mqtt in",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "topic": "everhome/control/button/home/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "010c8dcccc60a718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 1260,
        "wires": [
            [
                "9c1f2d8fece8e2f3"
            ]
        ]
    },
    {
        "id": "78b722f5706dfd3c",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Prepare Data",
        "func": "function extractElement(topic, pos) {\n    const parts = topic.split('/');\n    return parts[parts.length - pos];\n}\n// get msg data\nlet targetTemperature = msg.payload;\nlet topic = msg.topic;\nlet state = msg.payload;\n\nlet element_type = extractElement(topic, 3);\nlet element_id = extractElement(topic, 1);\n\n//everhome/control/button/home/away/1\n\n//set url\nlet url = `https://everhome.cloud/${element_type}/${element_id}`;\nmsg.url = url;\n\n\nlet payload = {\n    \"action\": \"presence-set\",\n    \"presence\": {\n        \"state\": state\n    }\n}; \n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1260,
        "wires": [
            [
                "63a94e73774c35a7"
            ]
        ]
    },
    {
        "id": "63a94e73774c35a7",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Add Bearer Token",
        "func": "const token = global.get('accessToken');\nif (token) {\n    msg.headers = {\n        'Authorization': `Bearer ${token}`,\n        'User-Agent': 'everHome2MQTT'\n    };\n    return msg;\n} else {\n    node.error('Token not found');\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 1260,
        "wires": [
            [
                "8a0ef43c94c2af46",
                "93a429c6fbbb38fd"
            ]
        ]
    },
    {
        "id": "93a429c6fbbb38fd",
        "type": "http request",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1510,
        "y": 1260,
        "wires": [
            [
                "16cc9db9be3f2a26"
            ]
        ]
    },
    {
        "id": "16cc9db9be3f2a26",
        "type": "debug",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 1260,
        "wires": []
    },
    {
        "id": "8a0ef43c94c2af46",
        "type": "debug",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 1180,
        "wires": []
    },
    {
        "id": "9c1f2d8fece8e2f3",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "check msg.payload !== \"\"",
        "func": "if (msg.payload !== \"\") {\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1260,
        "wires": [
            [
                "78b722f5706dfd3c"
            ]
        ]
    },
    {
        "id": "2538fcbbcb4b2f30",
        "type": "mqtt in",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "topic": "everhome/control/cover/toggle/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "010c8dcccc60a718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 360,
        "wires": [
            [
                "ed71b7168fe7ff86"
            ]
        ]
    },
    {
        "id": "ed71b7168fe7ff86",
        "type": "function",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "Toggle or Stop",
        "func": "function extractElement(topic, pos) {\n    const parts = topic.split('/');\n    return parts[parts.length - pos];\n}\n\nconst configuration = global.get('configuration');\n// get msg data\nlet topic = msg.topic;\nlet action = msg.payload;\n\nlet element_type = extractElement(topic, 2);\nlet element_id = extractElement(topic, 1);\nlet timestand_element = `${element_type}_${element_id}`; \n\n\nconst TIME_FACTOR = 1000;\nconst toggle_stop_time = configuration.devices.subtype.cover.toggle_stop_time * TIME_FACTOR;\n\nconst timestamps = context.get('timestamps') || {};\nvar currentTime = new Date().getTime();\n\nif (timestamps.hasOwnProperty(timestand_element)){\n    if (currentTime - timestamps[timestand_element] <= toggle_stop_time){\n        timestamps[timestand_element] = null;\n        action = 'stop';\n    }else{\n        timestamps[timestand_element] = currentTime;\n    }\n}else{\n    timestamps[timestand_element] = currentTime;\n}\ncontext.set('timestamps', timestamps);\n\nmsg.payload = action;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 360,
        "wires": [
            [
                "4fcd3f4dca28e450"
            ]
        ]
    },
    {
        "id": "a785786d812c0dad",
        "type": "debug",
        "z": "7cbd671fa0ddc005",
        "g": "8b4dd73313215ef8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 380,
        "wires": []
    },
    {
        "id": "4b0a212b187b0ee9",
        "type": "comment",
        "z": "4c7024461c6c9a94",
        "g": "7d973e37df0bd660",
        "name": "REST-API",
        "info": "",
        "x": 140,
        "y": 520,
        "wires": []
    },
    {
        "id": "128e660181a019aa",
        "type": "comment",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "MQTT",
        "info": "",
        "x": 130,
        "y": 100,
        "wires": []
    },
    {
        "id": "dc084ae1d854e27c",
        "type": "mqtt out",
        "z": "4c7024461c6c9a94",
        "g": "7d973e37df0bd660",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "010c8dcccc60a718",
        "x": 1550,
        "y": 560,
        "wires": []
    },
    {
        "id": "64a6c14a5fdc7c67",
        "type": "comment",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "Websocket",
        "info": "",
        "x": 140,
        "y": 760,
        "wires": []
    },
    {
        "id": "1b5e185424bca3be",
        "type": "http request",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "websocket status",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1250,
        "y": 920,
        "wires": [
            [
                "8bdd12d79db958cb",
                "b1c4e17fb65ffa3f"
            ]
        ]
    },
    {
        "id": "576e0e775026e472",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "scan_interval",
        "func": "const FACTOR = 1000;\nconst scan_interval = global.get('configuration').websocket.scan_interval;\nconst delay = scan_interval * FACTOR;\nmsg.delay = delay;\n\nreturn msg; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 920,
        "wires": [
            [
                "14893dc929383299",
                "57b6041eb001a980"
            ]
        ]
    },
    {
        "id": "14893dc929383299",
        "type": "delay",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 180,
        "y": 980,
        "wires": [
            [
                "576e0e775026e472"
            ]
        ]
    },
    {
        "id": "c67107b2bea2b61b",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "generate url",
        "func": "const configuration = global.get('configuration');\nconst ip = global.get(\"internalIPvX\");\nconst port = configuration.ports.everHome2MQTT;\n//ip = \"192.168.178.34\";\nlet status_url = `http://${ip}:${port}/status`;\n\nmsg.url = status_url;\nmsg.requestTimeout = 1000;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 920,
        "wires": [
            [
                "152d089608d28a24"
            ]
        ]
    },
    {
        "id": "1bc000805434e814",
        "type": "debug",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 920,
        "wires": []
    },
    {
        "id": "8bdd12d79db958cb",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "global.set: \"websocket_state\"",
        "func": "if (msg.payload.wsConnected === true ){\n    global.set(\"websocket_state\", \"online\");\n}else{\n    global.set(\"websocket_state\", \"offline\");\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1240,
        "wires": [
            [
                "1bc000805434e814",
                "cdacf6064bf598be"
            ]
        ]
    },
    {
        "id": "33b1f6278c09c847",
        "type": "switch",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "subscription_successful",
        "property": "subscription_successful",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 920,
        "wires": [
            [
                "c67107b2bea2b61b"
            ],
            [
                "dd5a2c9eda3535f4"
            ]
        ]
    },
    {
        "id": "cdacf6064bf598be",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "websocket_state",
        "func": "function joinTopics(...topics) {\n    return topics.join('/');\n}\n\nlet central_state = {};\ncentral_state[\"value\"] = global.get(\"websocket_state\");\n\nconst subtypeName = \"central\";\nconst main_state_topic = joinTopics(\"everhome\", subtypeName);\n\nconst subtopic = \"state_connected/websocket\";\nmsg.topic = joinTopics(main_state_topic, subtopic);\n\nmsg.payload = central_state;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1300,
        "wires": [
            [
                "46e3122e434f7247"
            ]
        ]
    },
    {
        "id": "46e3122e434f7247",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "Retain State",
        "func": "const configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.state;\nmsg.retain = retain;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1300,
        "wires": [
            [
                "10602205a759a50c",
                "98a8d32025992a9f"
            ]
        ]
    },
    {
        "id": "10602205a759a50c",
        "type": "debug",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 1280,
        "wires": []
    },
    {
        "id": "98a8d32025992a9f",
        "type": "mqtt out",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "010c8dcccc60a718",
        "x": 1550,
        "y": 1340,
        "wires": []
    },
    {
        "id": "b1c4e17fb65ffa3f",
        "type": "switch",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "",
        "property": "payload.wsConnected",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1290,
        "y": 840,
        "wires": [
            [
                "e28344a502208811"
            ]
        ]
    },
    {
        "id": "e28344a502208811",
        "type": "link out",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "b595bc23a32bd2af"
        ],
        "x": 1415,
        "y": 840,
        "wires": []
    },
    {
        "id": "4ec9c9400663101b",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "7d973e37df0bd660",
        "name": "Retain State",
        "func": "const configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.state;\nmsg.retain = retain;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 560,
        "wires": [
            [
                "dc084ae1d854e27c"
            ]
        ]
    },
    {
        "id": "4895fc16c8841550",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "7d973e37df0bd660",
        "name": "api_last_request",
        "func": "function joinTopics(...topics) {\n    return topics.join('/');\n}\n\nconst central_topic = \"everhome/central\";\nconst subtopic = \"api_last_request\";\nmsg.topic = joinTopics(central_topic, subtopic);\n\nlet api_last_request = {};\n\nvar currentTime = new Date().getTime();\nvar date = new Date(currentTime);\nvar isoDateString = date.toISOString();\napi_last_request[\"last_request\"] = isoDateString;\n\nmsg.payload = api_last_request;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 560,
        "wires": [
            [
                "4ec9c9400663101b"
            ]
        ]
    },
    {
        "id": "b956b37c82c745fd",
        "type": "mqtt out",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "010c8dcccc60a718",
        "x": 1550,
        "y": 160,
        "wires": []
    },
    {
        "id": "fa78747e59e0b8d7",
        "type": "mqtt in",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "",
        "topic": "everhome/keepalive",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "010c8dcccc60a718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 320,
        "wires": [
            [
                "78e7fb06a12f0647"
            ]
        ]
    },
    {
        "id": "b8295f6e67de8018",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "set time",
        "func": "msg.payload = new Date().getTime();\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 160,
        "wires": [
            [
                "ca1d412fae75a739"
            ]
        ]
    },
    {
        "id": "ca1d412fae75a739",
        "type": "change",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "mqtt_send_time",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 160,
        "wires": [
            [
                "bfcad80d008902a0",
                "066001260ae0d439"
            ]
        ]
    },
    {
        "id": "dc89a4dce7170cea",
        "type": "change",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "mqtt_receive_time",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 400,
        "wires": [
            [
                "6e93388140d8743b"
            ]
        ]
    },
    {
        "id": "abbb999142c8a34f",
        "type": "delay",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 900,
        "y": 320,
        "wires": [
            [
                "6e93388140d8743b",
                "b8295f6e67de8018"
            ]
        ]
    },
    {
        "id": "6e93388140d8743b",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "check time",
        "func": "const mqtt_send_time = global.get(\"mqtt_send_time\");\nconst mqtt_receive_time = global.get(\"mqtt_receive_time\");\n\nlet mqtt_state;\nif (mqtt_send_time !== mqtt_receive_time){\n    mqtt_state = \"offline\";\n}else{\n    mqtt_state = \"online\";\n}\n\nglobal.set(\"mqtt_state\",mqtt_state);\n\nlet central_state = {};\ncentral_state[\"value\"] = mqtt_state;\nmsg.payload = central_state;\nmsg.topic = \"everhome/central/state_connected/mqtt\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 320,
        "wires": [
            [
                "a65e35f9e5c93a02"
            ]
        ]
    },
    {
        "id": "a65e35f9e5c93a02",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "Retain State",
        "func": "const configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.state;\n\n// \"TypeError: Cannot read properties of undefined (reading 'retain')\"\nmsg.retain = retain;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 320,
        "wires": [
            [
                "8df3eecaae2e5609"
            ]
        ]
    },
    {
        "id": "8df3eecaae2e5609",
        "type": "mqtt out",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "010c8dcccc60a718",
        "x": 1550,
        "y": 320,
        "wires": []
    },
    {
        "id": "066001260ae0d439",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "scan_interval",
        "func": "const FACTOR = 1000;\nconst scan_interval = global.get('configuration').mqtt.scan_interval;\nconst delay = scan_interval * FACTOR;\nmsg.delay = delay;\n\nreturn msg; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 220,
        "wires": [
            [
                "abbb999142c8a34f"
            ]
        ]
    },
    {
        "id": "052eb1f1bff5d854",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "Retain State",
        "func": "const configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.state;\nmsg.retain = retain;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 160,
        "wires": [
            [
                "b956b37c82c745fd",
                "25ca5fa6aef5a3d7"
            ]
        ]
    },
    {
        "id": "1f6146b7bd3a1b34",
        "type": "link in",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "link in - Start Websocket Heartbeat",
        "links": [
            "a1861f3938782cd2"
        ],
        "x": 605,
        "y": 780,
        "wires": [
            [
                "b34cc710ee6d83e4"
            ]
        ]
    },
    {
        "id": "3fc93b54ac53c6cf",
        "type": "link in",
        "z": "4c7024461c6c9a94",
        "g": "7d973e37df0bd660",
        "name": "link in - Last Request REST-API",
        "links": [
            "a1861f3938782cd2"
        ],
        "x": 335,
        "y": 560,
        "wires": [
            [
                "6ae929175e3a3478"
            ]
        ]
    },
    {
        "id": "a2da5b944ed56eab",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "set wsConnected to false",
        "func": "msg.payload.wsConnected = false;\nconsole.log(\"subscription_successful: \" + global.get(\"subscription_successful\"));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1240,
        "wires": [
            [
                "8bdd12d79db958cb"
            ]
        ]
    },
    {
        "id": "90dab40f588294ce",
        "type": "link in",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "link in - Start MQTT Heartbeat",
        "links": [
            "a1861f3938782cd2"
        ],
        "x": 565,
        "y": 100,
        "wires": [
            [
                "22fa401bbd96b29a"
            ]
        ]
    },
    {
        "id": "bfcad80d008902a0",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "set topic",
        "func": "msg.topic = \"everhome/keepalive\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 160,
        "wires": [
            [
                "052eb1f1bff5d854"
            ]
        ]
    },
    {
        "id": "22fa401bbd96b29a",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "set time",
        "func": "msg.payload = new Date().getTime();\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 100,
        "wires": [
            [
                "05f7ff12bc5bcdaa"
            ]
        ]
    },
    {
        "id": "05f7ff12bc5bcdaa",
        "type": "change",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "mqtt_send_time",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 100,
        "wires": [
            [
                "bfcad80d008902a0"
            ]
        ]
    },
    {
        "id": "eb0a016416a34ae1",
        "type": "inject",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "b8295f6e67de8018"
            ]
        ]
    },
    {
        "id": "a35cb952d1dec3e8",
        "type": "inject",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 820,
        "wires": [
            [
                "576e0e775026e472"
            ]
        ]
    },
    {
        "id": "dd5a2c9eda3535f4",
        "type": "switch",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "",
        "property": "subscription_running",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 1000,
        "wires": [
            [
                "7cb46713d3bf6793",
                "5b278a459a12ccf8"
            ],
            [
                "a2da5b944ed56eab"
            ]
        ]
    },
    {
        "id": "7cb46713d3bf6793",
        "type": "delay",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 980,
        "wires": [
            [
                "33b1f6278c09c847"
            ]
        ]
    },
    {
        "id": "152d089608d28a24",
        "type": "switch",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "",
        "property": "subscription_running",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1070,
        "y": 920,
        "wires": [
            [
                "2720ac14e98a345d",
                "993645cfe93cd094"
            ],
            [
                "1b5e185424bca3be",
                "3034c55b53d1c37d"
            ]
        ]
    },
    {
        "id": "2720ac14e98a345d",
        "type": "delay",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1060,
        "y": 800,
        "wires": [
            [
                "152d089608d28a24"
            ]
        ]
    },
    {
        "id": "993645cfe93cd094",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "wait running end (subscription_successful=true)",
        "func": "node.log(\"wait running end\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "5b278a459a12ccf8",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "wait running end (subscription_successful=false)",
        "func": "node.log(\"wait running end\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "b6a225abcf696187",
        "type": "http in",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "",
        "url": "wsdata",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 1800,
        "wires": [
            [
                "8c75bdc3c30c3336",
                "5c02199f718d520d",
                "96320e82e6feaced",
                "4c0c406f7cc74fe8"
            ]
        ]
    },
    {
        "id": "39c75fad51eb482e",
        "type": "comment",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "Receive Data",
        "info": "",
        "x": 150,
        "y": 1460,
        "wires": []
    },
    {
        "id": "2480f246336f4f3d",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "brightness",
        "func": "const ws_message = msg.payload;\nlet main_topic = `everhome/${ws_message.type}`;\n\nconst main = \"states\";\nconst value_brightness = \"brightness\";\nconst value_general = \"general\";\n\nif (typeof ws_message.data[main] !== 'undefined' && typeof ws_message.data[main][value_brightness] !== 'undefined' && typeof ws_message.data[main][value_general] !== 'undefined') {\n    const payload = {\n        state: ws_message.data[main][value_general]?.toUpperCase(),\n        brightness: ws_message.data[main][value_brightness]\n    };\n\n    const topic = `${main_topic}/${ws_message.id}/${main}/light`;\n\n    msg.payload = payload; \n    msg.topic = topic; \n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1480,
        "wires": [
            [
                "bdcb145ad347384d"
            ]
        ]
    },
    {
        "id": "29eebf99226b1b21",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "Retain State",
        "func": "const configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.state;\nmsg.retain = retain;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 1700,
        "wires": [
            [
                "996b829ffe4fdf19"
            ]
        ]
    },
    {
        "id": "996b829ffe4fdf19",
        "type": "mqtt out",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "010c8dcccc60a718",
        "x": 2190,
        "y": 1680,
        "wires": []
    },
    {
        "id": "f76b29556d142bdb",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "lastexecute",
        "func": "const ws_message = msg.payload;\nlet main_topic = `everhome/${ws_message.type}`;\n\nconst main = \"ts\";\nconst value = \"lastexecute\";\n\nif (typeof ws_message.data[main] !== 'undefined' && typeof ws_message.data[main][value] !== 'undefined') {\n    var timestamp = new Date(ws_message.data[main][value] * 1000);  \n    const payload = {\n        value: timestamp\n    };\n\n    const topic = `${main_topic}/${ws_message.id}/${main}/${value}`;\n\n    msg.payload = payload; \n    msg.topic = topic; \n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1540,
        "wires": [
            [
                "90e5a490195a0609"
            ]
        ]
    },
    {
        "id": "42df7241f3fd3d0f",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "Check if Shutter",
        "func": "const ws_message = msg.payload;\n\nmsg.shutter = ws_message.subtype === 'shutter' || ws_message.subtype === 'blind' || ws_message.subtype === 'awning';\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1640,
        "wires": [
            [
                "076935f96467b2c7"
            ]
        ]
    },
    {
        "id": "076935f96467b2c7",
        "type": "switch",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "shutter?",
        "property": "shutter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1440,
        "y": 1640,
        "wires": [
            [
                "7f0d015d64c1d532"
            ],
            [
                "9c1930e358acba1b"
            ]
        ]
    },
    {
        "id": "7f0d015d64c1d532",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "position",
        "func": "function cover_state(value) {\n    if (value === 'up' || value === 'out' ) {\n        return 100;\n    } else if (value === 'down' || value === 'in' ) {\n        return 0;\n    } else {\n        node.warn('Ungültiger Wert: ' + value + ' subtype ' + ws_message.subtype);\n        return 'no state';\n    }\n}\nconst ws_message = msg.payload;\n\nlet main_topic = `everhome/${ws_message.type}`;\n\nconst main = \"states\";\nconst value = \"general\";\n\nif (typeof ws_message.data[main] !== 'undefined' && typeof ws_message.data[main][value] !== 'undefined') {\n\n    const payload = cover_state(ws_message.data[main][value]);\n    msg.payload = payload;\n\n    const topic = `${main_topic}/${ws_message.id}/${main}/position`;\n    msg.topic = topic;\n\n    // override position if stop was pressed\n    let coverstop = `coverstop_${ws_message.type}_${ws_message.id}`;\n    let stopValue = global.get(coverstop);\n    if (typeof stopValue !== 'undefined') {\n        if (stopValue == true) {\n            msg.payload = 50;\n        } else {\n            msg.payload = payload;\n        }\n    } else {\n        msg.payload = payload;\n    }\n\n\n    return msg; \n}\n\n// Todo besser umsetzen",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 1600,
        "wires": [
            [
                "29eebf99226b1b21"
            ]
        ]
    },
    {
        "id": "9c1930e358acba1b",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "general",
        "func": "const ws_message = msg.payload;\n\nlet main_topic = `everhome/${ws_message.type}`;\n\nconst main = \"states\";\nconst value = \"general\";\n\nif (typeof ws_message.data[main] !== 'undefined' && typeof ws_message.data[main][value] !== 'undefined') {\n\n    const payload = {\n        value: ws_message.data[main][value]\n    };\n    msg.payload = payload; \n\n    const topic = `${main_topic}/${ws_message.id}/${main}/${value}`;\n    msg.topic = topic; \n\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 1680,
        "wires": [
            [
                "29eebf99226b1b21"
            ]
        ]
    },
    {
        "id": "7641aaa20177d87c",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "lastreceive",
        "func": "const ws_message = msg.payload;\n\nlet main_topic = `everhome/${ws_message.type}`;\n\nconst main = \"ts\";\nconst value = \"lastreceive\";\n\nif (typeof ws_message.data[main] !== 'undefined' && typeof ws_message.data[main][value] !== 'undefined') {\n    var timestamp = new Date(ws_message.data[main][value] * 1000);  \n    const payload = {\n        value: timestamp\n    };\n\n    const topic = `${main_topic}/${ws_message.id}/${main}/${value}`;\n\n    msg.payload = payload; \n    msg.topic = topic; \n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1720,
        "wires": [
            [
                "8502b8640b5d2af5"
            ]
        ]
    },
    {
        "id": "e0e7e5ba5ee98eb0",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "REST-API-Device",
        "func": "let currentTime = Date.now();\nlet obj = {\n    \"data\": {\n        \"states\": msg.states,\n        \"ts\": msg.ts\n    },\n    \"id\": msg.id,\n    \"method\": \"rest_api\",\n    \"ts\": currentTime,\n    \"type\": msg.type,\n    \"subtype\": msg.subtype\n};\n\nif (msg.group_subtype !== undefined) {\n    obj.group_subtype = msg.group_subtype;\n}\n\n\nif (msg.serial !== undefined) {\n    obj.serial = msg.serial;\n}\n\nif (msg.presence !== undefined) {\n    obj.presence = msg.presence;\n}\n\nif (msg.localip !== undefined) {\n    obj.localip = msg.localip;\n}\n\nif (msg.wanip !== undefined) {\n    obj.wanip = msg.wanip;\n}\n\nif (msg && msg['ip-wifi'] !== undefined) {\n    obj['ip-wifi'] = msg['ip-wifi'];\n}\n\nmsg.payload = obj;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1620,
        "wires": [
            [
                "5595786919a3e4b5"
            ]
        ]
    },
    {
        "id": "9b08ecc37e0059fc",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "serial",
        "func": "const ws_message = msg.payload;\nlet main_topic = `everhome/${ws_message.type}`;\n\nconst value = \"serial\";\n\nif (typeof ws_message[value] !== 'undefined') {\n\n    const payload = {\n        value: ws_message[value]\n    };\n\n    const topic = `${main_topic}/${ws_message.id}/${value}`;\n\n    msg.payload = payload; \n    msg.topic = topic; \n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1960,
        "wires": [
            [
                "6eb6e455079f25ae"
            ]
        ]
    },
    {
        "id": "5e8def8103a3ab3f",
        "type": "link in",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "link in - REST-API Device Data",
        "links": [
            "c3d6f0bb540b7bac"
        ],
        "x": 95,
        "y": 1620,
        "wires": [
            [
                "e0e7e5ba5ee98eb0"
            ]
        ]
    },
    {
        "id": "5595786919a3e4b5",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "device or group or home",
        "func": "const device = \"device\";\nconst group = \"group\";\nconst home = \"home\";\n\nif (msg.payload.type === group || msg.payload.type === device || msg.payload.type === home){\n    msg.topic_type = msg.payload.type;\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1660,
        "wires": [
            [
                "2480f246336f4f3d",
                "f76b29556d142bdb",
                "42df7241f3fd3d0f",
                "7641aaa20177d87c",
                "9b08ecc37e0059fc",
                "d866dddd17adcfd4",
                "cb3708f3d2df69df",
                "e978ec7564d2e93a",
                "a0776c0c79cbc3c8",
                "d667eb0cc4673f59",
                "9d67f7fa7734767a",
                "147a425c2e51f232"
            ]
        ]
    },
    {
        "id": "f0729a5cee4bb8bb",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "Ecotracker Local-API",
        "func": "let currentTime = Date.now();\nlet obj = {\n    \"data\": {\n        \"states\": msg.data.states,\n        \"ts\": currentTime\n    },\n    \"id\": msg.data.id,\n    \"method\": \"ecotracker_local_api\",\n    \"ts\": currentTime,\n    \"type\": msg.data.type\n};\n\nmsg.payload = obj;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1560,
        "wires": [
            [
                "5595786919a3e4b5"
            ]
        ]
    },
    {
        "id": "803e584dbbb5efb4",
        "type": "link in",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "link in - Local-API Data",
        "links": [
            "925645361fbf56a1"
        ],
        "x": 95,
        "y": 1560,
        "wires": [
            [
                "f0729a5cee4bb8bb"
            ]
        ]
    },
    {
        "id": "8c75bdc3c30c3336",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "room",
        "func": "const type = \"room\";\n\nif (msg.payload.type === type){\n    msg.topic_type = type;\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2400,
        "wires": [
            [
                "260ed86cca47c42c",
                "02fe33e605020999",
                "d866dddd17adcfd4"
            ]
        ]
    },
    {
        "id": "5b2c186f1063ab21",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "Retain State",
        "func": "const configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.state;\nmsg.retain = retain;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 2460,
        "wires": [
            [
                "29eebf99226b1b21"
            ]
        ]
    },
    {
        "id": "55cf220d67e79297",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "REST-API-Room",
        "func": "let currentTime = Date.now();\nlet obj = {\n    \"data\": {\n        \"states\": msg.data.states,\n        \"ts\": msg.data.ts\n    },\n    \"id\": msg.data.id,\n    \"method\": \"rest_api\",\n    \"ts\": currentTime,\n    \"type\": msg.data.type\n};\n\nif (msg.data.override !== undefined) {    \n    obj.override = \"auto\";\n}else{\n    obj.override = \"off\";  \n}\n\nmsg.payload = obj;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2400,
        "wires": [
            [
                "8c75bdc3c30c3336",
                "b7ba11fc80d400ba"
            ]
        ]
    },
    {
        "id": "9b27b02732ad3f57",
        "type": "link in",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "link in - REST-API Room Data",
        "links": [
            "aeb87f3ae70b534d"
        ],
        "x": 95,
        "y": 2400,
        "wires": [
            [
                "55cf220d67e79297",
                "485b263c46f3ef4c"
            ]
        ]
    },
    {
        "id": "260ed86cca47c42c",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "override",
        "func": "const ws_message = msg.payload;\nconst room_topic = `everhome/${msg.topic_type}`;\n\nconst main = \"override\";\nlet payload = false;\n\n// Message comes from Websocket\nif (ws_message.method === \"push\" && typeof ws_message.data[main] !== \"undefined\") {\n    if (ws_message.data[main] !== null){\n        payload = { value: \"auto\" };\n    }else{\n        payload = { value: \"off\" };\n    }\n}\n\n// Message comes from Websocket\nif (ws_message.method === \"rest_api\") {\n    payload = { value: msg.payload[main] };\n}\n\nconst topic = `${room_topic}/${ws_message.id}/${main}`;\nmsg.payload = payload; \nmsg.topic = topic; \n\nif (payload !== false) {\n    let hvac_states = global.get('hvac_states') || [];\n    let hvac_index = hvac_states.findIndex(r => r.id === ws_message.id);\n    if (hvac_index === -1) {\n        let newHvacState = {\n            id: ws_message.id,\n            value: msg.payload.value\n        };\n        hvac_states.push(newHvacState);\n    } else {\n        hvac_states[hvac_index].value = msg.payload.value;\n    }\n    global.set('hvac_states', hvac_states);\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 2460,
        "wires": [
            [
                "5b2c186f1063ab21"
            ]
        ]
    },
    {
        "id": "5c02199f718d520d",
        "type": "http response",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 500,
        "y": 1800,
        "wires": []
    },
    {
        "id": "d866dddd17adcfd4",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "states",
        "func": "function getKeyValues(obj, main_struct, main_topic) {\n    if (typeof obj.data[main_struct] !== 'undefined') {\n        for (let key in obj.data[main_struct]) {\n            const topic = `${main_topic}/${obj.id}/${main_struct}/${key}`;\n            const payload = {\n                value: obj.data[main_struct][key]\n            };\n\n            msg.payload = payload;\n            msg.topic = topic;\n            node.send(msg);\n\n        }\n    }\n}\nconst main_struct = \"states\";\nconst main_topic = `everhome/${msg.topic_type}`;\ngetKeyValues(msg.payload, main_struct, main_topic);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2400,
        "wires": [
            [
                "807d841973018fb8"
            ]
        ]
    },
    {
        "id": "485b263c46f3ef4c",
        "type": "debug",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 230,
        "y": 2460,
        "wires": []
    },
    {
        "id": "02fe33e605020999",
        "type": "debug",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 2520,
        "wires": []
    },
    {
        "id": "b7ba11fc80d400ba",
        "type": "debug",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 2480,
        "wires": []
    },
    {
        "id": "57b6041eb001a980",
        "type": "change",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "ws_hb_running",
        "rules": [
            {
                "t": "set",
                "p": "ws_hb_running",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 920,
        "wires": [
            [
                "33b1f6278c09c847"
            ]
        ]
    },
    {
        "id": "3034c55b53d1c37d",
        "type": "change",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "ws_hb_running",
        "rules": [
            {
                "t": "set",
                "p": "ws_hb_running",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "b34cc710ee6d83e4",
        "type": "switch",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "",
        "property": "ws_hb_running",
        "propertyType": "global",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 840,
        "wires": [
            [
                "33b1f6278c09c847",
                "4aa4dce91ecbecff"
            ],
            [
                "a06670c99a80e426"
            ]
        ]
    },
    {
        "id": "a06670c99a80e426",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "node.log",
        "func": "node.log(\"hb ws already running\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "4aa4dce91ecbecff",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "4959409e2e6b91aa",
        "name": "node.log",
        "func": "node.log(\"hb ws not already running\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "cb3708f3d2df69df",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "subtype",
        "func": "const ws_message = msg.payload;\n\nlet main_topic;\n\nif (ws_message.group_subtype !== undefined && ws_message.group_subtype === 'maingroup'){\n    main_topic = `everhome/maingroup`;\n}else{\n    main_topic = `everhome/${ws_message.type}`;\n}\n\nconst value = \"subtype\";\n\nif (typeof ws_message[value] !== 'undefined') {\n\n    const payload = {\n        value: ((text, targetLanguage) => global.get(\"translations\")[text]?.[targetLanguage] || global.get(\"translations\")[text]?.en || text)(ws_message.subtype, global.get(\"language\")),\n    };\n\n    const topic = `${main_topic}/${ws_message.id}/${value}`;\n\n    msg.payload = payload; \n    msg.topic = topic; \n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 2200,
        "wires": [
            [
                "59fae3a613178a6b"
            ]
        ]
    },
    {
        "id": "96320e82e6feaced",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "add subtype",
        "func": "const devices = global.get(\"devices\"); // Todo mal sehen ob das noch anders geht\nfor (let index = 0; index < devices.length; index++) {\n    const element = devices[index];\n    if (element.type === msg.payload.type && element.id === msg.payload.id ){\n        msg.payload.subtype = element.subtype\n        break\n    }    \n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1720,
        "wires": [
            [
                "ac3e4c8bebde7fb2"
            ]
        ]
    },
    {
        "id": "e978ec7564d2e93a",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "localip",
        "func": "const ws_message = msg.payload;\nlet main_topic = `everhome/${ws_message.type}`;\n\nconst value = \"localip\";\n\nif (typeof ws_message[value] !== 'undefined') {\n\n    const payload = {\n        value: ws_message[value]\n    };\n\n    const topic = `${main_topic}/${ws_message.id}/${value}`;\n\n    msg.payload = payload; \n    msg.topic = topic; \n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2020,
        "wires": [
            [
                "b0acf82f76e764e5"
            ]
        ]
    },
    {
        "id": "a0776c0c79cbc3c8",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "wanip",
        "func": "const ws_message = msg.payload;\nlet main_topic = `everhome/${ws_message.type}`;\n\nconst value = \"wanip\";\n\nif (typeof ws_message[value] !== 'undefined') {\n\n    const payload = {\n        value: ws_message[value]\n    };\n\n    const topic = `${main_topic}/${ws_message.id}/${value}`;\n\n    msg.payload = payload; \n    msg.topic = topic; \n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2080,
        "wires": [
            [
                "61770934f35e7b7f"
            ]
        ]
    },
    {
        "id": "d667eb0cc4673f59",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "ip-wifi",
        "func": "const ws_message = msg.payload;\nlet main_topic = `everhome/${ws_message.type}`;\n\nconst value = \"ip-wifi\";\n\nif (typeof ws_message[value] !== 'undefined') {\n\n    const payload = {\n        value: ws_message[value]\n    };\n\n    const topic = `${main_topic}/${ws_message.id}/${value}`;\n\n    msg.payload = payload; \n    msg.topic = topic; \n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2140,
        "wires": [
            [
                "22e7b58ba0bc15dc"
            ]
        ]
    },
    {
        "id": "25ca5fa6aef5a3d7",
        "type": "debug",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 240,
        "wires": []
    },
    {
        "id": "9d67f7fa7734767a",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "Check if Motiondetection",
        "func": "const ws_message = msg.payload;\n\nmsg.motiondetector = ws_message.subtype === 'motiondetector' && ws_message.method !== \"rest_api\"; // rest_api = init phase --> ToDo\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1800,
        "wires": [
            [
                "ae6de7d697172d30",
                "ba8fcde65b6c5b74"
            ]
        ]
    },
    {
        "id": "ae6de7d697172d30",
        "type": "switch",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "motiondetection",
        "property": "motiondetector",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1020,
        "y": 1800,
        "wires": [
            [
                "3cb99a7fcedd5fcc"
            ]
        ]
    },
    {
        "id": "93bdfcd35b3dd9d4",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "motion",
        "func": "const ws_message = msg.ws_message;\nconst motion = msg.payload;\n\nlet main_topic = `everhome/${ws_message.type}`;\n\nconst main = \"ts\";\nconst value = \"lastreceive\";\n\nif (typeof ws_message.data[main] !== 'undefined' && typeof ws_message.data[main][value] !== 'undefined') {\n    var timestamp = new Date(ws_message.data[main][value] * 1000);  \n    const payload = {\n        value: motion\n    };\n\n    const topic = `${main_topic}/${ws_message.id}/states/motion`;\n\n    msg.payload = payload; \n    msg.topic = topic; \n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1800,
        "wires": [
            [
                "29eebf99226b1b21"
            ]
        ]
    },
    {
        "id": "ba8fcde65b6c5b74",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "lastreceive",
        "func": "const ws_message = msg.payload;\n\nlet main_topic = `everhome/${ws_message.type}`;\n\nconst main = \"ts\";\nconst value = \"lastreceive\";\n\nif (typeof ws_message.data[main] !== 'undefined' && typeof ws_message.data[main][value] !== 'undefined') {\n    var timestamp = new Date(ws_message.data[main][value] * 1000);  \n    const payload = {\n        value: timestamp\n    };\n\n    const topic = `${main_topic}/${ws_message.id}/${main}/${value}`;\n\n    msg.payload = payload; \n    msg.topic = topic; \n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1860,
        "wires": [
            [
                "667d2a270b70eb62"
            ]
        ]
    },
    {
        "id": "c91905f470e8fe47",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "delay",
        "func": "function getValueFromConfig(valuesArray, defaultValue, deviceId) {\n    for (let i = 0; i < valuesArray.length; i++) {\n        if (valuesArray[i].id === deviceId) {\n            return valuesArray[i].value;\n        }\n    }\n    return defaultValue;\n}\n\nconst FACTOR = 1000;\nconst configuration = global.get('configuration');\n\nlet valuesArray = configuration.devices.subtype.motiondetector.reset_after.device_id;\nlet defaultValue = configuration.devices.subtype.motiondetector.reset_after.default_value;\nlet deviceId = msg.ws_message.id;\n\nconst scan_interval = getValueFromConfig(valuesArray, defaultValue, deviceId);\nconst delay = scan_interval * FACTOR;\nmsg.delay = delay;\n\nreturn msg; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1800,
        "wires": [
            [
                "a1c2eca6313258b5"
            ]
        ]
    },
    {
        "id": "a1c2eca6313258b5",
        "type": "trigger",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "",
        "op1": "true",
        "op2": "false",
        "op1type": "bool",
        "op2type": "bool",
        "duration": "2",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "topic",
        "topic": "ws_message.id",
        "outputs": 1,
        "x": 1480,
        "y": 1800,
        "wires": [
            [
                "93bdfcd35b3dd9d4"
            ]
        ]
    },
    {
        "id": "3cb99a7fcedd5fcc",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "ws_message",
        "func": "msg.ws_message = msg.payload;\nreturn msg; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1800,
        "wires": [
            [
                "c91905f470e8fe47"
            ]
        ]
    },
    {
        "id": "925645361fbf56a1",
        "type": "link out",
        "z": "4c7024461c6c9a94",
        "g": "efb062bb1a7b2ea6",
        "name": "link out - Local-API Data",
        "mode": "link",
        "links": [
            "803e584dbbb5efb4"
        ],
        "x": 1405,
        "y": 2780,
        "wires": []
    },
    {
        "id": "cdd112e8570c6712",
        "type": "switch",
        "z": "4c7024461c6c9a94",
        "g": "efb062bb1a7b2ea6",
        "name": "Use Local API?",
        "property": "use_local_api",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 2760,
        "wires": [
            [
                "389712dfddf9a7c0"
            ],
            [
                "da7cb589a0d25390",
                "cbe9c4064b18d171"
            ]
        ]
    },
    {
        "id": "3085874b272cf5f0",
        "type": "comment",
        "z": "4c7024461c6c9a94",
        "g": "efb062bb1a7b2ea6",
        "name": "Ecotacker - Local Api",
        "info": "",
        "x": 180,
        "y": 2640,
        "wires": []
    },
    {
        "id": "389712dfddf9a7c0",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "efb062bb1a7b2ea6",
        "name": "states[\"local_api_connected\"] = false;",
        "func": "let states = {};\nstates[\"local_api_connected\"] = false;\nmsg.element.local_api_connected = states[\"local_api_connected\"];\nlet obj = {\n    \"states\": states,\n    \"id\": msg.element.id,\n    \"type\": msg.element.type\n};\nmsg.data = obj;\nreturn msg;\n\n\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 2720,
        "wires": [
            [
                "0e06acf8e5ede672",
                "925645361fbf56a1"
            ]
        ]
    },
    {
        "id": "0e06acf8e5ede672",
        "type": "debug",
        "z": "4c7024461c6c9a94",
        "g": "efb062bb1a7b2ea6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 2720,
        "wires": []
    },
    {
        "id": "40d81977fae4b9d7",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "efb062bb1a7b2ea6",
        "name": "Filter Ecotrackers",
        "func": "const devices = global.get(\"devices\");\nvar ecotrackers = [];\n\ndevices.forEach(function (element) {\n    if (\n        typeof element !== 'undefined' &&\n        typeof element.states !== 'undefined' &&\n        element.states.energyCounterIn !== undefined &&\n        element.states.energyCounterOut !== undefined &&\n        element.states.power !== undefined &&\n        element.states.connected !== undefined &&\n        element['ip-wifi'] !== undefined\n        \n    ) {\n        ecotrackers.push(element);\n    }\n});\n\nmsg.ecotrackers = ecotrackers;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 2760,
        "wires": [
            [
                "20e3408ebf990256"
            ]
        ]
    },
    {
        "id": "ee93397850e8d2c1",
        "type": "subflow:147d74e1a76a9fac",
        "z": "4c7024461c6c9a94",
        "g": "efb062bb1a7b2ea6",
        "name": "",
        "x": 1210,
        "y": 2840,
        "wires": [
            [
                "1d6f05aaee4b7d81",
                "925645361fbf56a1"
            ]
        ]
    },
    {
        "id": "1d6f05aaee4b7d81",
        "type": "debug",
        "z": "4c7024461c6c9a94",
        "g": "efb062bb1a7b2ea6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 2840,
        "wires": []
    },
    {
        "id": "da7cb589a0d25390",
        "type": "debug",
        "z": "4c7024461c6c9a94",
        "g": "efb062bb1a7b2ea6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 2780,
        "wires": []
    },
    {
        "id": "20e3408ebf990256",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "efb062bb1a7b2ea6",
        "name": "msg.ecotrackers.forEach",
        "func": "msg.ecotrackers.forEach(function(element) {\n    msg.element = element;\n    node.send(msg)    \n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2760,
        "wires": [
            [
                "2a646f8c2f29fdf8"
            ]
        ]
    },
    {
        "id": "2a646f8c2f29fdf8",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "efb062bb1a7b2ea6",
        "name": "use_local_api ?",
        "func": "function getValueFromConfig(valuesArray, defaultValue, deviceId) {\n    for (let i = 0; i < valuesArray.length; i++) {\n        if (valuesArray[i].id === deviceId) {\n            return valuesArray[i].value;\n        }\n    }\n    return defaultValue;\n}\n\nconst configuration = global.get('configuration');\n\nlet valuesArray = configuration.devices.subtype.electricitymeter.ecotracker.local_api.activated.device_id;\nlet defaultValue = configuration.devices.subtype.electricitymeter.ecotracker.local_api.activated.default_value;\nlet deviceId = msg.element.id;\n\nmsg.use_local_api = getValueFromConfig(valuesArray, defaultValue, deviceId);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2760,
        "wires": [
            [
                "cdd112e8570c6712"
            ]
        ]
    },
    {
        "id": "78e7fb06a12f0647",
        "type": "switch",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "yaml_config_loaded?",
        "property": "yaml_config_loaded",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 440,
        "y": 320,
        "wires": [
            [
                "dc89a4dce7170cea"
            ],
            [
                "2b28cedea7e94870"
            ]
        ]
    },
    {
        "id": "2b28cedea7e94870",
        "type": "delay",
        "z": "4c7024461c6c9a94",
        "g": "df29c22a0843c619",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 400,
        "wires": [
            [
                "78e7fb06a12f0647"
            ]
        ]
    },
    {
        "id": "a1d36a21e07eb0bf",
        "type": "inject",
        "z": "4c7024461c6c9a94",
        "g": "efb062bb1a7b2ea6",
        "name": "Start Local API",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 270,
        "y": 2840,
        "wires": [
            [
                "a1e5af14f5b0a35f"
            ]
        ]
    },
    {
        "id": "a1e5af14f5b0a35f",
        "type": "switch",
        "z": "4c7024461c6c9a94",
        "g": "efb062bb1a7b2ea6",
        "name": "",
        "property": "all_configs_done",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 2840,
        "wires": [
            [
                "40d81977fae4b9d7"
            ],
            [
                "69b0ce969a6faba1"
            ]
        ]
    },
    {
        "id": "69b0ce969a6faba1",
        "type": "delay",
        "z": "4c7024461c6c9a94",
        "g": "efb062bb1a7b2ea6",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 670,
        "y": 2840,
        "wires": [
            [
                "a1e5af14f5b0a35f"
            ]
        ]
    },
    {
        "id": "4b1540ddad5b6e9a",
        "type": "comment",
        "z": "4c7024461c6c9a94",
        "g": "efb062bb1a7b2ea6",
        "name": "Prüfen aktualisieren",
        "info": "",
        "x": 810,
        "y": 2700,
        "wires": []
    },
    {
        "id": "cbe9c4064b18d171",
        "type": "rbe",
        "z": "4c7024461c6c9a94",
        "g": "efb062bb1a7b2ea6",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "element.id",
        "topi": "element.id",
        "x": 1010,
        "y": 2840,
        "wires": [
            [
                "ee93397850e8d2c1"
            ]
        ]
    },
    {
        "id": "4c0c406f7cc74fe8",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "log",
        "func": "const log = \"log\";\n\nif (msg.payload.type === log ){\n    msg.topic_type = msg.payload.type;\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1960,
        "wires": [
            [
                "9f0e7c22c031e6b0"
            ]
        ]
    },
    {
        "id": "9f0e7c22c031e6b0",
        "type": "link out",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "cfd6aa51252ed91a"
        ],
        "x": 595,
        "y": 1880,
        "wires": []
    },
    {
        "id": "cfd6aa51252ed91a",
        "type": "link in",
        "z": "4c7024461c6c9a94",
        "g": "11f89a4cc77d569b",
        "name": "link in 3",
        "links": [
            "9f0e7c22c031e6b0"
        ],
        "x": 105,
        "y": 3060,
        "wires": [
            [
                "137717810da4ac61",
                "4a4592ff06fce113"
            ]
        ]
    },
    {
        "id": "137717810da4ac61",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "11f89a4cc77d569b",
        "name": "actions/action_X",
        "func": "const log_message = msg.payload.data;\n\n//set action for movement\nconst movement = \"movement\";\nif (log_message.subtype === movement) {\n    log_message.action = movement;\n}\n\nlet main_topic = `everhome/${log_message.entitytype}`;\n\nif (typeof log_message.action !== 'undefined') {\n    const payload = log_message.action;\n\n    const topic = `${main_topic}/${log_message.entityid}/actions/action_${log_message.action}`;\n\n    msg.payload = payload; \n    msg.topic = topic; \n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 3020,
        "wires": [
            [
                "87fd9da7cef3c964"
            ]
        ]
    },
    {
        "id": "87fd9da7cef3c964",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "11f89a4cc77d569b",
        "name": "Retain State",
        "func": "const configuration = global.get('configuration');\nconst retain = configuration.mqtt.retain.topics.state;\nmsg.retain = retain;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 3060,
        "wires": [
            [
                "3674ca12408e492a",
                "db5fb16216980f93"
            ]
        ]
    },
    {
        "id": "db5fb16216980f93",
        "type": "mqtt out",
        "z": "4c7024461c6c9a94",
        "g": "11f89a4cc77d569b",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "010c8dcccc60a718",
        "x": 930,
        "y": 3020,
        "wires": []
    },
    {
        "id": "3674ca12408e492a",
        "type": "debug",
        "z": "4c7024461c6c9a94",
        "g": "11f89a4cc77d569b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 3100,
        "wires": []
    },
    {
        "id": "4a4592ff06fce113",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "11f89a4cc77d569b",
        "name": "states/action",
        "func": "const log_message = msg.payload.data;\n\n//set action for movement\nconst movement = \"movement\";\nif (log_message.subtype === movement) {\n    log_message.action = movement;\n}\n\nlet main_topic = `everhome/${log_message.entitytype}`;\n\nif (typeof log_message.action !== 'undefined') {\n\n    const payload = {\n        value: log_message.action\n    };\n\n    const topic = `${main_topic}/${log_message.entityid}/states/action`;\n\n    msg.payload = payload; \n    msg.topic = topic; \n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 3100,
        "wires": [
            [
                "87fd9da7cef3c964"
            ]
        ]
    },
    {
        "id": "b6742b90abc42646",
        "type": "comment",
        "z": "4c7024461c6c9a94",
        "g": "11f89a4cc77d569b",
        "name": "Get Data from Logs",
        "info": "",
        "x": 170,
        "y": 2960,
        "wires": []
    },
    {
        "id": "b90bacb4c839bf08",
        "type": "comment",
        "z": "4c7024461c6c9a94",
        "g": "11f89a4cc77d569b",
        "name": "action",
        "info": "",
        "x": 450,
        "y": 3060,
        "wires": []
    },
    {
        "id": "1a5132f781ec336a",
        "type": "delay",
        "z": "4c7024461c6c9a94",
        "g": "7d973e37df0bd660",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 640,
        "wires": [
            [
                "6ae929175e3a3478"
            ]
        ]
    },
    {
        "id": "6ae929175e3a3478",
        "type": "switch",
        "z": "4c7024461c6c9a94",
        "g": "7d973e37df0bd660",
        "name": "",
        "property": "all_configs_done",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 560,
        "wires": [
            [
                "4895fc16c8841550"
            ],
            [
                "1a5132f781ec336a"
            ]
        ]
    },
    {
        "id": "ac3e4c8bebde7fb2",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "home presence",
        "func": "const ws_message = msg.payload;\n\nif (ws_message.type === \"home\" ){\n    if (typeof ws_message.data.presence === 'object'){\n\n        if (!ws_message.data.states || !ws_message.data.states.state) {\n            ws_message.data.states = {\n                state: {}\n            };\n        }\n        switch (ws_message.data.presence.state) {\n            case \"h\":\n                ws_message.data.states.state = \"off\";\n                ws_message.presence = \"holiday\";\n                break;\n            case 0:\n                ws_message.data.states.state = \"off\";\n                ws_message.presence = \"away\";\n                break;\n            case 1:\n                ws_message.data.states.state = \"on\";\n                ws_message.presence = \"present\";\n                break;\n            default:\n                ws_message.data.states.state = \"off\";\n                ws_message.presence = \"away\";\n        }\n    }\n} \n\nmsg.payload = ws_message;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1720,
        "wires": [
            [
                "5595786919a3e4b5"
            ]
        ]
    },
    {
        "id": "147a425c2e51f232",
        "type": "function",
        "z": "4c7024461c6c9a94",
        "g": "bfb0edcd0febbe3e",
        "name": "presence",
        "func": "const ws_message = msg.payload;\nlet main_topic = `everhome/${ws_message.type}`;\n\nconst value = \"presence\";\n\nif (typeof ws_message[value] !== 'undefined') {\n\n    const payload = {\n        value: ws_message[value]\n    };\n\n    const topic = `${main_topic}/${ws_message.id}/${value}`;\n\n    msg.payload = payload; \n    msg.topic = topic; \n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 2260,
        "wires": [
            [
                "ebdaf1719065aaba"
            ]
        ]
    },
    {
        "id": "4e91f8c4603163bc",
        "type": "function",
        "z": "89baccb132d06886",
        "g": "33099db6c61473d5",
        "name": "global.set(\"test_power\"",
        "func": "global.set(\"test_power\", 600);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "5832aa27919f386c",
        "type": "inject",
        "z": "89baccb132d06886",
        "g": "33099db6c61473d5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 560,
        "wires": [
            [
                "4e91f8c4603163bc"
            ]
        ]
    },
    {
        "id": "cb1a0bc1291872c6",
        "type": "debug",
        "z": "89baccb132d06886",
        "g": "33099db6c61473d5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 660,
        "wires": []
    },
    {
        "id": "e05ed0ad2eae10f5",
        "type": "switch",
        "z": "89baccb132d06886",
        "g": "99da6a943348bdde",
        "name": "",
        "property": "add_simu_devices",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 390,
        "y": 840,
        "wires": [
            [
                "e1f993108f070de6"
            ]
        ]
    },
    {
        "id": "14044e685c1fb612",
        "type": "link in",
        "z": "89baccb132d06886",
        "g": "29f16be80f76bbe6",
        "name": "link in - Delete Config",
        "links": [
            "0179892b815aa565"
        ],
        "x": 135,
        "y": 220,
        "wires": [
            [
                "0a39217260b00d6b"
            ]
        ]
    },
    {
        "id": "908d4e610af16134",
        "type": "debug",
        "z": "89baccb132d06886",
        "g": "99da6a943348bdde",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 840,
        "wires": []
    },
    {
        "id": "d27d299cd19db7f9",
        "type": "inject",
        "z": "89baccb132d06886",
        "g": "99da6a943348bdde",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 840,
        "wires": [
            [
                "e05ed0ad2eae10f5"
            ]
        ]
    },
    {
        "id": "a7a5014a666aa256",
        "type": "function",
        "z": "89baccb132d06886",
        "g": "99da6a943348bdde",
        "name": "global.set:simu_devices",
        "func": "global.set('simu_devices', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 840,
        "wires": [
            [
                "908d4e610af16134"
            ]
        ]
    },
    {
        "id": "e3e64ee723aca3b9",
        "type": "json",
        "z": "89baccb132d06886",
        "g": "99da6a943348bdde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 950,
        "y": 840,
        "wires": [
            [
                "a7a5014a666aa256"
            ]
        ]
    },
    {
        "id": "e1f993108f070de6",
        "type": "file in",
        "z": "89baccb132d06886",
        "g": "99da6a943348bdde",
        "name": "",
        "filename": "/homeassistant/everHome2MQTT/simu_devices.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 670,
        "y": 840,
        "wires": [
            [
                "e3e64ee723aca3b9"
            ]
        ]
    },
    {
        "id": "02e1ef894ae6c347",
        "type": "comment",
        "z": "89baccb132d06886",
        "g": "99da6a943348bdde",
        "name": "Simu Devices",
        "info": "",
        "x": 150,
        "y": 780,
        "wires": []
    },
    {
        "id": "5454944e985365da",
        "type": "comment",
        "z": "89baccb132d06886",
        "g": "33099db6c61473d5",
        "name": "Eootracker Test API",
        "info": "",
        "x": 170,
        "y": 560,
        "wires": []
    },
    {
        "id": "2b9760d334ff917f",
        "type": "http in",
        "z": "89baccb132d06886",
        "g": "33099db6c61473d5",
        "name": "",
        "url": "/v1/json",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 620,
        "wires": [
            [
                "d22801476e848b8a"
            ]
        ]
    },
    {
        "id": "6561b508ea6aa881",
        "type": "http response",
        "z": "89baccb132d06886",
        "g": "33099db6c61473d5",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1610,
        "y": 620,
        "wires": []
    },
    {
        "id": "d22801476e848b8a",
        "type": "function",
        "z": "89baccb132d06886",
        "g": "33099db6c61473d5",
        "name": "responseJSON",
        "func": "var randomFloat = Math.random() * (4.9 - 4.3) + 4.3;\nvar randomInteger = Math.floor(Math.random() * 9) + 1;\n\nlet power = global.get(\"test_power\");\npower = power + randomInteger;\nlet energyCounterOut = 48633.4 + randomFloat; \nlet energyCounterIn = 791110.6 + randomFloat; \n\nvar responseJSON = {\n   \"power\": power,\n   \"energyCounterOut\": energyCounterOut,\n   \"energyCounterIn\": energyCounterIn\n};\n\nmsg.statusCode = 200;\nmsg.headers = {\n   \"Content-Type\": \"application/json\"\n};\nmsg.payload = responseJSON;\n\nglobal.set(\"test_power\",power);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 620,
        "wires": [
            [
                "cb1a0bc1291872c6",
                "6561b508ea6aa881"
            ]
        ]
    },
    {
        "id": "54b7ea2311990f4a",
        "type": "function",
        "z": "89baccb132d06886",
        "g": "314444591f1337f2",
        "name": "Get everhome Topics",
        "func": "//if (msg.topic.includes('everhome') && msg.topic.endsWith('/config')) {\nif (msg.topic.includes('everhome')) {\n    msg.payload = msg.topic;\n    return msg;\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 440,
        "wires": [
            [
                "ad23556f82d88e06"
            ]
        ]
    },
    {
        "id": "319c1cee37533531",
        "type": "mqtt in",
        "z": "89baccb132d06886",
        "g": "314444591f1337f2",
        "name": "",
        "topic": "#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "010c8dcccc60a718",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 440,
        "wires": [
            [
                "54b7ea2311990f4a"
            ]
        ]
    },
    {
        "id": "3d4f0b7e95afb7fc",
        "type": "file",
        "z": "89baccb132d06886",
        "g": "314444591f1337f2",
        "name": "",
        "filename": "/homeassistant/everHome2MQTT/topics.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1490,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "ad23556f82d88e06",
        "type": "rbe",
        "z": "89baccb132d06886",
        "g": "314444591f1337f2",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "payload",
        "x": 990,
        "y": 440,
        "wires": [
            [
                "3d4f0b7e95afb7fc"
            ]
        ]
    },
    {
        "id": "0a39217260b00d6b",
        "type": "file in",
        "z": "89baccb132d06886",
        "g": "29f16be80f76bbe6",
        "name": "",
        "filename": "/homeassistant/everHome2MQTT/topics.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 430,
        "y": 160,
        "wires": [
            [
                "88227f1e3a6ad2bb"
            ]
        ]
    },
    {
        "id": "efe45a26fe0d2c64",
        "type": "inject",
        "z": "89baccb132d06886",
        "g": "29f16be80f76bbe6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "0a39217260b00d6b"
            ]
        ]
    },
    {
        "id": "3dd9a5685f80ef1d",
        "type": "function",
        "z": "89baccb132d06886",
        "g": "29f16be80f76bbe6",
        "name": "Get Topics",
        "func": "var topics = msg.payload.split('\\n');\nmsg.payload = topics;\nmsg.topics_length = msg.payload.length;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 160,
        "wires": [
            [
                "066a327e85353e97"
            ]
        ]
    },
    {
        "id": "066a327e85353e97",
        "type": "switch",
        "z": "89baccb132d06886",
        "g": "29f16be80f76bbe6",
        "name": "",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "payload.length",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1090,
        "y": 160,
        "wires": [
            [
                "7a6e91afc6002279",
                "88184648a85ff4dc"
            ],
            []
        ]
    },
    {
        "id": "88184648a85ff4dc",
        "type": "function",
        "z": "89baccb132d06886",
        "g": "29f16be80f76bbe6",
        "name": "msg.counter ++",
        "func": "msg.counter ++;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 260,
        "wires": [
            [
                "066a327e85353e97"
            ]
        ]
    },
    {
        "id": "88227f1e3a6ad2bb",
        "type": "function",
        "z": "89baccb132d06886",
        "g": "29f16be80f76bbe6",
        "name": "init",
        "func": "msg.counter = 0;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 160,
        "wires": [
            [
                "3dd9a5685f80ef1d"
            ]
        ]
    },
    {
        "id": "677ee05d0edb2561",
        "type": "mqtt out",
        "z": "89baccb132d06886",
        "g": "29f16be80f76bbe6",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "010c8dcccc60a718",
        "x": 1610,
        "y": 160,
        "wires": []
    },
    {
        "id": "7a6e91afc6002279",
        "type": "function",
        "z": "89baccb132d06886",
        "g": "29f16be80f76bbe6",
        "name": "Set Topic & Empty Payload",
        "func": "msg.topic = msg.payload[msg.counter];\n\nif (msg.topic !== \"\"){\n    msg.payload = \"\";\n    return msg;\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 160,
        "wires": [
            [
                "677ee05d0edb2561"
            ]
        ]
    },
    {
        "id": "d9ef5b38f1979e91",
        "type": "comment",
        "z": "89baccb132d06886",
        "g": "29f16be80f76bbe6",
        "name": "Delete MQTT Entities",
        "info": "",
        "x": 180,
        "y": 100,
        "wires": []
    },
    {
        "id": "96d24e2df27b51f5",
        "type": "comment",
        "z": "89baccb132d06886",
        "g": "314444591f1337f2",
        "name": "Get everHome Topics",
        "info": "",
        "x": 180,
        "y": 380,
        "wires": []
    }
]